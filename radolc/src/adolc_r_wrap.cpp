/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGR
#define SWIGR
#endif


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif


/* Remove global namespace pollution */
#if !defined(SWIG_NO_R_NO_REMAP)
# define R_NO_REMAP
#endif
#if !defined(SWIG_NO_STRICT_R_HEADERS)
# define STRICT_R_HEADERS
#endif

#include <Rdefines.h>
#include <Rversion.h>

#ifdef __cplusplus
#include <exception>
extern "C" {
#endif

/* for raw pointer */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_R_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_R_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_R_NewPointerObj(ptr, type, flags)

#include <stdlib.h>
#include <assert.h>

#if R_VERSION >= R_Version(2,6,0)
#define VMAXTYPE void *
#else
#define VMAXTYPE char *
#endif

/*
  This is mainly a way to avoid having lots of local variables that may 
  conflict with those in the routine.

   Change name to R_SWIG_Callb....
*/
typedef struct RCallbackFunctionData {

  SEXP fun;
  SEXP userData;


  SEXP expr;
  SEXP retValue;
  int errorOccurred;

  SEXP el;  /* Temporary pointer used in the construction of the expression to call the R function. */

  struct RCallbackFunctionData *previous;   /* Stack */

} RCallbackFunctionData;

static RCallbackFunctionData  *callbackFunctionDataStack;


SWIGRUNTIME SEXP
R_SWIG_debug_getCallbackFunctionData()
{
  int n, i;
  SEXP ans;
  RCallbackFunctionData  *p = callbackFunctionDataStack;

  n = 0;
  while(p) { 
    n++;
    p = p->previous;
  }

  Rf_protect(ans = Rf_allocVector(VECSXP, n));
  for(p = callbackFunctionDataStack, i = 0; i < n; p = p->previous, i++) 
      SET_VECTOR_ELT(ans, i, p->fun);

  Rf_unprotect(1);

  return(ans);
}



SWIGRUNTIME RCallbackFunctionData *
R_SWIG_pushCallbackFunctionData(SEXP fun, SEXP userData)
{
   RCallbackFunctionData *el;
   el = (RCallbackFunctionData *) calloc(1, sizeof(RCallbackFunctionData));
   el->fun = fun;
   el->userData = userData;
   el->previous = callbackFunctionDataStack;

   callbackFunctionDataStack = el;

   return(el);
}


SWIGRUNTIME SEXP
R_SWIG_R_pushCallbackFunctionData(SEXP fun, SEXP userData)
{
    R_SWIG_pushCallbackFunctionData(fun, userData);
    return R_NilValue;
}

SWIGRUNTIME RCallbackFunctionData *
R_SWIG_getCallbackFunctionData()
{
  if(!callbackFunctionDataStack) {
    Rf_error("Supposedly impossible error occurred in the SWIG callback mechanism."
            "  No callback function data set.");
  }
  
  return callbackFunctionDataStack;
}

SWIGRUNTIME void
R_SWIG_popCallbackFunctionData(int doFree)
{
  RCallbackFunctionData  *el = NULL;
  if(!callbackFunctionDataStack)
    return ; /* Error !!! */

  el = callbackFunctionDataStack ;
  callbackFunctionDataStack = callbackFunctionDataStack->previous;

  if(doFree)
     free(el);
}


/*
  Interface to S function
      is(obj, type)
  which is to be used to determine if an 
  external pointer inherits from the right class.

  Ideally, we would like to be able to do this without an explicit call to the is() function.
  When the S4 class system uses its own SEXP types, then we will hopefully be able to do this
  in the C code.

  Should we make the expression static and preserve it to avoid the overhead of 
  allocating each time.
*/
SWIGRUNTIME int
R_SWIG_checkInherits(SEXP obj, SEXP tag, const char *type)
{
  SEXP e, val;
  int check_err = 0;

  Rf_protect(e = Rf_allocVector(LANGSXP, 3));
  SETCAR(e, Rf_install("extends"));

  SETCAR(CDR(e), Rf_mkString(CHAR(PRINTNAME(tag))));
  SETCAR(CDR(CDR(e)), Rf_mkString(type));

  val = R_tryEval(e, R_GlobalEnv, &check_err);
  Rf_unprotect(1);
  if(check_err) 
    return(0);


  return(LOGICAL(val)[0]);
}


SWIGRUNTIME void *
R_SWIG_resolveExternalRef(SEXP arg, const char * const type, const char * const argName, Rboolean nullOk)
{
  void *ptr;
  SEXP orig = arg;

  if(TYPEOF(arg) != EXTPTRSXP) 
    arg = GET_SLOT(arg, Rf_mkString("ref"));

  
  if(TYPEOF(arg) != EXTPTRSXP) {
    Rf_error("argument %s must be an external pointer (from an ExternalReference)", argName);
  }


  ptr = R_ExternalPtrAddr(arg);

  if(ptr == NULL && nullOk == (Rboolean) FALSE) {
    Rf_error("the external pointer (of type %s) for argument %s has value NULL", argName, type);
  }

  if(type[0] && R_ExternalPtrTag(arg) != Rf_install(type) && strcmp(type, "voidRef")
      && !R_SWIG_checkInherits(orig,  R_ExternalPtrTag(arg), type)) {
    Rf_error("the external pointer for argument %s has tag %s, not the expected value %s",
             argName, CHAR(PRINTNAME(R_ExternalPtrTag(arg))), type);
  }


  return(ptr);
}

SWIGRUNTIME void
R_SWIG_ReferenceFinalizer(SEXP el)
{
  void *ptr = R_SWIG_resolveExternalRef(el, "", "<finalizer>",  (Rboolean) 1);
  fprintf(stderr, "In R_SWIG_ReferenceFinalizer for %p\n", ptr);
  Rf_PrintValue(el);

  if(ptr) {
     if(TYPEOF(el) != EXTPTRSXP)
        el = GET_SLOT(el, Rf_mkString("ref"));

     if(TYPEOF(el) == EXTPTRSXP)
        R_ClearExternalPtr(el);

     free(ptr);
  }

  return;
}

typedef enum {R_SWIG_EXTERNAL, R_SWIG_OWNER } R_SWIG_Owner;

SWIGRUNTIME SEXP
SWIG_MakePtr(void *ptr, const char *typeName, R_SWIG_Owner owner)
{
  SEXP external, r_obj;

  Rf_protect(external = R_MakeExternalPtr(ptr, Rf_install(typeName), R_NilValue));
  Rf_protect(r_obj = NEW_OBJECT(MAKE_CLASS((char *) typeName)));

  if(owner)
    R_RegisterCFinalizer(external, R_SWIG_ReferenceFinalizer);

  r_obj = SET_SLOT(r_obj, Rf_mkString((char *) "ref"), external);
  SET_S4_OBJECT(r_obj);
  Rf_unprotect(2);

  return(r_obj);
}


SWIGRUNTIME SEXP
R_SWIG_create_SWIG_R_Array(const char *typeName, SEXP ref, int len)
{
   SEXP arr;

/*XXX remove the char * cast when we can. MAKE_CLASS should be declared appropriately. */
   Rf_protect(arr = NEW_OBJECT(MAKE_CLASS((char *) typeName)));
   Rf_protect(arr = R_do_slot_assign(arr, Rf_mkString("ref"), ref));
   Rf_protect(arr = R_do_slot_assign(arr, Rf_mkString("dims"), Rf_ScalarInteger(len)));

   Rf_unprotect(3); 			   
   SET_S4_OBJECT(arr);	
   return arr;
}

#define ADD_OUTPUT_ARG(result, pos, value, name)  r_ans = AddOutputArgToReturn(pos, value, name, OutputValues);

SWIGRUNTIME SEXP
AddOutputArgToReturn(int pos, SEXP value, const char *name, SEXP output)
{
  SET_VECTOR_ELT(output, pos, value);

  return(output);
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE SEXP
SWIG_R_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  SEXP rptr = R_MakeExternalPtr(ptr, 
  R_MakeExternalPtr(type, R_NilValue, R_NilValue), R_NilValue); 
  SET_S4_OBJECT(rptr);
  return rptr;
}


/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_R_ConvertPtr(SEXP obj, void **ptr, swig_type_info *ty, int flags) {
  void *vptr;
  if (!obj) return SWIG_ERROR;
  if (obj == R_NilValue) {
    if (ptr) *ptr = NULL;
    return SWIG_OK;
  }

  vptr = R_ExternalPtrAddr(obj);
  if (ty) {
    swig_type_info *to = (swig_type_info*) 
      R_ExternalPtrAddr(R_ExternalPtrTag(obj));
    if (to == ty) {
      if (ptr) *ptr = vptr;
    } else {
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      int newmemory = 0;
      if (ptr) *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
      if (ptr) *ptr = vptr;
 }
  return SWIG_OK;
}

SWIGRUNTIME swig_module_info *
SWIG_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_SetModule(void *v, swig_module_info *swig_module) {
}

typedef struct {
  void *pack;
  swig_type_info *ty;
  size_t size;
} RSwigPacked;

/* Create a new packed object */

SWIGRUNTIMEINLINE SEXP RSwigPacked_New(void *ptr, size_t sz,
		  swig_type_info *ty) {
  SEXP rptr;
  RSwigPacked *sobj = 
  (RSwigPacked*) malloc(sizeof(RSwigPacked));
  if (sobj) {
    void *pack = malloc(sz);
    if (pack) {
      memcpy(pack, ptr, sz);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = sz;
    } else {
      sobj = 0;
    }
  }
  rptr = R_MakeExternalPtr(sobj, R_NilValue, R_NilValue); 
  return rptr;
}

SWIGRUNTIME swig_type_info *
RSwigPacked_UnpackData(SEXP obj, void *ptr, size_t size)
{
    RSwigPacked *sobj = 
        (RSwigPacked *)R_ExternalPtrAddr(obj);
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
}

SWIGRUNTIMEINLINE SEXP
SWIG_R_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? RSwigPacked_New((void *) ptr, sz, type) : R_NilValue;
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_R_ConvertPacked(SEXP obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = RSwigPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

#ifdef __cplusplus
#define SWIG_exception_noreturn(code, msg) do { throw std::runtime_error(msg); } while(0)
#else
#define SWIG_exception_noreturn(code, msg) do { return result; } while(0)
#endif

#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { Rf_warning(msg); return Rf_ScalarLogical(NA_LOGICAL); return Rf_ScalarLogical(NA_LOGICAL); } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { Rf_warning(msg); return Rf_ScalarLogical(NA_LOGICAL); return Rf_ScalarLogical(NA_LOGICAL); } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CP_Context swig_types[0]
#define SWIGTYPE_p_CpInfos swig_types[1]
#define SWIGTYPE_p_EDFobject swig_types[2]
#define SWIGTYPE_p_EDFobject_iArr swig_types[3]
#define SWIGTYPE_p_EDFobject_v2 swig_types[4]
#define SWIGTYPE_p_FILE swig_types[5]
#define SWIGTYPE_p_adouble swig_types[6]
#define SWIGTYPE_p_adub swig_types[7]
#define SWIGTYPE_p_adubref swig_types[8]
#define SWIGTYPE_p_advector swig_types[9]
#define SWIGTYPE_p_badouble swig_types[10]
#define SWIGTYPE_p_char swig_types[11]
#define SWIGTYPE_p_double swig_types[12]
#define SWIGTYPE_p_ext_diff_fct swig_types[13]
#define SWIGTYPE_p_ext_diff_fct_v2 swig_types[14]
#define SWIGTYPE_p_f___p_void swig_types[15]
#define SWIGTYPE_p_f_int_int_p_p_double_int_int_p_p_p_double_p_p_short__int swig_types[16]
#define SWIGTYPE_p_f_int_int_p_p_double_int_p_p_double_p_double_p_double__int swig_types[17]
#define SWIGTYPE_p_f_int_p_adouble__int swig_types[18]
#define SWIGTYPE_p_f_int_p_double__int swig_types[19]
#define SWIGTYPE_p_f_int_p_double_int_int_p_p_double__int swig_types[20]
#define SWIGTYPE_p_f_int_p_double_int_int_p_p_p_double_int_p_double_p_p_p_double__int swig_types[21]
#define SWIGTYPE_p_f_int_p_double_int_p_double__int swig_types[22]
#define SWIGTYPE_p_f_int_p_double_int_p_double_p_double_p_double__int swig_types[23]
#define SWIGTYPE_p_f_int_p_double_int_p_p_double_int_p_double_p_p_double__int swig_types[24]
#define SWIGTYPE_p_f_int_p_double_p_double_int_p_double_p_double__int swig_types[25]
#define SWIGTYPE_p_f_int_p_int_int_int_p_int_int_p_p_p_double_p_int_p_p_p_double_p_p_double_p_p_double_p_void__int swig_types[26]
#define SWIGTYPE_p_f_int_p_int_int_int_p_int_p_p_double_int_int_p_p_p_p_double_p_int_p_p_double_p_p_p_p_double_p_void__int swig_types[27]
#define SWIGTYPE_p_f_int_p_int_int_int_p_int_p_p_double_int_p_p_p_double_p_int_p_p_double_p_p_p_double_p_void__int swig_types[28]
#define SWIGTYPE_p_f_int_p_int_int_int_p_int_p_p_double_p_int_p_p_double_p_p_double_p_p_double_p_void__int swig_types[29]
#define SWIGTYPE_p_f_int_p_int_int_int_p_int_p_p_double_p_int_p_p_double_p_void__int swig_types[30]
#define SWIGTYPE_p_f_int_p_int_int_int_p_int_p_p_double_p_p_double_p_int_p_p_double_p_p_double_p_void__int swig_types[31]
#define SWIGTYPE_p_f_int_p_int_int_int_p_p_double_int_int_p_p_p_double_p_p_short__int swig_types[32]
#define SWIGTYPE_p_f_int_p_int_int_int_p_p_double_int_p_p_double_p_double_p_double__int swig_types[33]
#define SWIGTYPE_p_f_int_p_int_int_p_double_int_int_p_p_double__int swig_types[34]
#define SWIGTYPE_p_f_int_p_int_int_p_double_int_int_p_p_p_double_int_p_double_p_p_p_double__int swig_types[35]
#define SWIGTYPE_p_f_int_p_int_int_p_double_int_p_double__int swig_types[36]
#define SWIGTYPE_p_f_int_p_int_int_p_double_int_p_double_p_double_p_double__int swig_types[37]
#define SWIGTYPE_p_f_int_p_int_int_p_double_int_p_p_double_int_p_double_p_p_double__int swig_types[38]
#define SWIGTYPE_p_f_int_p_int_int_p_double_p_double_int_p_double_p_double__int swig_types[39]
#define SWIGTYPE_p_f_p_adouble_p_adouble_p_adouble_int_int__int swig_types[40]
#define SWIGTYPE_p_f_p_double_int__double swig_types[41]
#define SWIGTYPE_p_f_p_double_p_double_p_double_int_int__int swig_types[42]
#define SWIGTYPE_p_f_p_void__void swig_types[43]
#define SWIGTYPE_p_p_adouble swig_types[44]
#define SWIGTYPE_p_p_double swig_types[45]
#define SWIGTYPE_p_p_p_double swig_types[46]
#define SWIGTYPE_p_p_p_p_double swig_types[47]
#define SWIGTYPE_p_p_p_unsigned_int swig_types[48]
#define SWIGTYPE_p_p_short swig_types[49]
#define SWIGTYPE_p_p_unsigned_int swig_types[50]
#define SWIGTYPE_p_p_unsigned_long swig_types[51]
#define SWIGTYPE_p_p_void swig_types[52]
#define SWIGTYPE_p_pdouble swig_types[53]
#define SWIGTYPE_p_std__vectorT_adouble_t swig_types[54]
#define SWIGTYPE_p_std__vectorT_short_t swig_types[55]
#define SWIGTYPE_p_uint32_t swig_types[56]
#define SWIGTYPE_p_unsigned_int swig_types[57]
#define SWIGTYPE_p_unsigned_long swig_types[58]
#define SWIGTYPE_p_void swig_types[59]
static swig_type_info *swig_types[61];
static swig_module_info swig_module = {swig_types, 60, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#define SWIGVERSION 0x030011 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <adolc/adolc.h>


int sparse_jac
(short, int , int, int, const double*, int *, unsigned int **, unsigned int **, double **,int*);


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERNINLINE  int
SWIG_AsVal_long (SEXP obj, long *val)
{
   if (val) *val = Rf_asInteger(obj);
   return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_int (SEXP obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE  int
SWIG_AsVal_double (SEXP obj, double *val)
{
   if (val) *val = Rf_asReal(obj);
   return SWIG_OK;
}


SWIGINTERNINLINE SEXP
SWIG_From_double  (double value)
{
	return Rf_ScalarReal(value);
}


SWIGINTERNINLINE SEXP
SWIG_From_long  (long value)
{
	return Rf_ScalarInteger((int)value);
}


SWIGINTERNINLINE SEXP
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(SEXP obj, char** cptr, size_t* psize, int *alloc)
{
  if (cptr && Rf_isString(obj)) {
    char *cstr = const_cast< char * >(CHAR(STRING_ELT(obj, 0)));
    int len = strlen(cstr);

    if (alloc) {
      if (*alloc == SWIG_NEWOBJ) {
        *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
        *alloc = SWIG_NEWOBJ;
      } else {
        *cptr = cstr;
      }
    } else {
      *cptr = reinterpret_cast< char * >(malloc(len + 1));
      *cptr = strcpy(*cptr, cstr);
    }
    if (psize) *psize = len + 1;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(SEXP obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (SEXP obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERN char *
SWIG_strdup(const char *str)
{
  char *newstr = reinterpret_cast< char * >(malloc(strlen(str) + 1));
  return strcpy(newstr, str);
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT SEXP
R_swig_sparse_jac ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_arg9, SEXP s_arg10, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int *arg6 = (int *) 0 ;
  unsigned int **arg7 = (unsigned int **) 0 ;
  unsigned int **arg8 = (unsigned int **) 0 ;
  double **arg9 = (double **) 0 ;
  int *arg10 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sparse_jac" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg6[_rswigi] = INTEGER(s_arg6)[_rswigi];
      }
    }
  }
  res7 = SWIG_R_ConvertPtr(s_arg7, &argp7, SWIGTYPE_p_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "sparse_jac" "', argument " "7"" of type '" "unsigned int **""'"); 
  }
  arg7 = reinterpret_cast< unsigned int ** >(argp7);
  res8 = SWIG_R_ConvertPtr(s_arg8, &argp8, SWIGTYPE_p_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "sparse_jac" "', argument " "8"" of type '" "unsigned int **""'"); 
  }
  arg8 = reinterpret_cast< unsigned int ** >(argp8);
  {
    
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg10);
      arg10 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg10[_rswigi] = INTEGER(s_arg10)[_rswigi];
      }
    }
  }
  result = (int)sparse_jac(arg1,arg2,arg3,arg4,(double const *)arg5,arg6,arg7,arg8,arg9,arg10);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      int _rswiga[2];
      _rswiga[0] = arg2;
      _rswiga[1] = arg3;
      SEXP _rswigarg;
      PROTECT(_rswigarg = Rf_allocVector(INTSXP, 2));
      memcpy(INTEGER(_rswigarg), _rswiga, 2 * sizeof(int));
      Rf_setAttrib(s_arg9, R_DimSymbol, _rswigarg);
      SEXP r_dim = Rf_getAttrib(s_arg9, R_DimSymbol);
      int _rswiglen0 = _rswiga[0];
      int _rswiglen1 = _rswiga[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg9)[_rswigi*_rswiglen1+_rswigj] = arg9[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  
  
  
  free(arg9);
  
  
  free(arg10);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_condassign__SWIG_0 ( SEXP res, SEXP cond, SEXP s_arg1, SEXP s_arg2)
{
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  double temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(res, &argp1, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "condassign" "', argument " "1"" of type '" "double &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condassign" "', argument " "1"" of type '" "double &""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_double(cond, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "condassign" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(s_arg1, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "condassign" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_double(s_arg2, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "condassign" "', argument " "4"" of type '" "double""'");
  } 
  temp4 = static_cast< double >(val4);
  arg4 = &temp4;
  condassign(*arg1,(double const &)*arg2,(double const &)*arg3,(double const &)*arg4);
  r_ans = R_NilValue;
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_condassign__SWIG_1 ( SEXP res, SEXP cond, SEXP s_arg)
{
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(res, &argp1, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "condassign" "', argument " "1"" of type '" "double &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condassign" "', argument " "1"" of type '" "double &""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_double(cond, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "condassign" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(s_arg, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "condassign" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  condassign(*arg1,(double const &)*arg2,(double const &)*arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_condeqassign__SWIG_0 ( SEXP res, SEXP cond, SEXP s_arg1, SEXP s_arg2)
{
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  double temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(res, &argp1, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "condeqassign" "', argument " "1"" of type '" "double &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condeqassign" "', argument " "1"" of type '" "double &""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_double(cond, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "condeqassign" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(s_arg1, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "condeqassign" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_double(s_arg2, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "condeqassign" "', argument " "4"" of type '" "double""'");
  } 
  temp4 = static_cast< double >(val4);
  arg4 = &temp4;
  condeqassign(*arg1,(double const &)*arg2,(double const &)*arg3,(double const &)*arg4);
  r_ans = R_NilValue;
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_condeqassign__SWIG_1 ( SEXP res, SEXP cond, SEXP s_arg)
{
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(res, &argp1, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "condeqassign" "', argument " "1"" of type '" "double &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condeqassign" "', argument " "1"" of type '" "double &""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_double(cond, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "condeqassign" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(s_arg, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "condeqassign" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  condeqassign(*arg1,(double const &)*arg2,(double const &)*arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_loc ( SEXP self, SEXP s_swig_copy)
{
  locint result;
  badouble *arg1 = (badouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_loc" "', argument " "1"" of type '" "badouble const *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = ((badouble const *)arg1)->loc();
  r_ans = SWIG_R_NewPointerObj((new locint(static_cast< const locint& >(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_declareDependent__SWIG_0 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  badouble *arg1 = (badouble *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_declareDependent" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "badouble_declareDependent" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "badouble_declareDependent" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  result = (badouble *) &(arg1)->operator >>=(*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_declareIndependent__SWIG_0 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  badouble *arg1 = (badouble *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_declareIndependent" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (badouble *) &(arg1)->operator <<=(arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_declareIndependent__SWIG_1 ( SEXP self)
{
  badouble *arg1 = (badouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_declareIndependent" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  (arg1)->declareIndependent();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_declareDependent__SWIG_1 ( SEXP self)
{
  badouble *arg1 = (badouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_declareDependent" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  (arg1)->declareDependent();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble___seteq____SWIG_0 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  badouble *arg1 = (badouble *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble___seteq__" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (badouble *) &(arg1)->operator =(arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble___seteq____SWIG_1 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  badouble *arg1 = (badouble *) 0 ;
  badouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble___seteq__" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "badouble___seteq__" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "badouble___seteq__" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (badouble *) &(arg1)->operator =((badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble___seteq____SWIG_2 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  badouble *arg1 = (badouble *) 0 ;
  adub *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble___seteq__" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_adub,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "badouble___seteq__" "', argument " "2"" of type '" "adub const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "badouble___seteq__" "', argument " "2"" of type '" "adub const &""'"); 
  }
  arg2 = reinterpret_cast< adub * >(argp2);
  result = (badouble *) &(arg1)->operator =((adub const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_getValue ( SEXP self, SEXP s_swig_copy)
{
  double result;
  badouble *arg1 = (badouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_getValue" "', argument " "1"" of type '" "badouble const *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = (double)((badouble const *)arg1)->getValue();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_value ( SEXP self, SEXP s_swig_copy)
{
  double result;
  badouble *arg1 = (badouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_value" "', argument " "1"" of type '" "badouble const *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = (double)((badouble const *)arg1)->value();
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_setValue ( SEXP self, SEXP s_arg2)
{
  badouble *arg1 = (badouble *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_setValue" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  (arg1)->setValue(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_PlusEqual__SWIG_0 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  badouble *arg1 = (badouble *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_PlusEqual" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (badouble *) &(arg1)->operator +=(arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_PlusEqual__SWIG_1 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  badouble *arg1 = (badouble *) 0 ;
  badouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_PlusEqual" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "badouble_PlusEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "badouble_PlusEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (badouble *) &(arg1)->operator +=((badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_MinusEqual__SWIG_0 ( SEXP self, SEXP y, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  badouble *arg1 = (badouble *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_MinusEqual" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< double >(REAL(y)[0]);
  result = (badouble *) &(arg1)->operator -=(arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_MinusEqual__SWIG_1 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  badouble *arg1 = (badouble *) 0 ;
  badouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_MinusEqual" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "badouble_MinusEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "badouble_MinusEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (badouble *) &(arg1)->operator -=((badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_MultiplyEqual__SWIG_0 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  badouble *arg1 = (badouble *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_MultiplyEqual" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (badouble *) &(arg1)->operator *=(arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_MultiplyEqual__SWIG_1 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  badouble *arg1 = (badouble *) 0 ;
  badouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_MultiplyEqual" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "badouble_MultiplyEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "badouble_MultiplyEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (badouble *) &(arg1)->operator *=((badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_DivideEqual__SWIG_0 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  badouble *arg1 = (badouble *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_DivideEqual" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (badouble *) &(arg1)->operator /=(arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_DivideEqual__SWIG_1 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  badouble *arg1 = (badouble *) 0 ;
  badouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_DivideEqual" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "badouble_DivideEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "badouble_DivideEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (badouble *) &(arg1)->operator /=((badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_PlusEqual__SWIG_2 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  badouble *arg1 = (badouble *) 0 ;
  adub *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_PlusEqual" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_adub,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "badouble_PlusEqual" "', argument " "2"" of type '" "adub const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "badouble_PlusEqual" "', argument " "2"" of type '" "adub const &""'"); 
  }
  arg2 = reinterpret_cast< adub * >(argp2);
  result = (badouble *) &(arg1)->operator +=((adub const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_MinusEqual__SWIG_2 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  badouble *arg1 = (badouble *) 0 ;
  adub *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_MinusEqual" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_adub,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "badouble_MinusEqual" "', argument " "2"" of type '" "adub const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "badouble_MinusEqual" "', argument " "2"" of type '" "adub const &""'"); 
  }
  arg2 = reinterpret_cast< adub * >(argp2);
  result = (badouble *) &(arg1)->operator -=((adub const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble___seteq____SWIG_3 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  badouble *arg1 = (badouble *) 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble___seteq__" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "badouble___seteq__" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "badouble___seteq__" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (badouble *) &(arg1)->operator =((pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_PlusEqual__SWIG_3 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  badouble *arg1 = (badouble *) 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_PlusEqual" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "badouble_PlusEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "badouble_PlusEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (badouble *) &(arg1)->operator +=((pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_MinusEqual__SWIG_3 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  badouble *arg1 = (badouble *) 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_MinusEqual" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "badouble_MinusEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "badouble_MinusEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (badouble *) &(arg1)->operator -=((pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_MultiplyEqual__SWIG_2 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  badouble *arg1 = (badouble *) 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_MultiplyEqual" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "badouble_MultiplyEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "badouble_MultiplyEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (badouble *) &(arg1)->operator *=((pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_badouble_DivideEqual__SWIG_2 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  badouble *arg1 = (badouble *) 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "badouble_DivideEqual" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "badouble_DivideEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "badouble_DivideEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (badouble *) &(arg1)->operator /=((pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_NotEqual__SWIG_0 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  badouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NotEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NotEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NotEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NotEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (int)operator !=((badouble const &)*arg1,(badouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EqualEqual__SWIG_0 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  badouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EqualEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EqualEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EqualEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EqualEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (int)operator ==((badouble const &)*arg1,(badouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_LessThanEqual__SWIG_0 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  badouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LessThanEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LessThanEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LessThanEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LessThanEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (int)operator <=((badouble const &)*arg1,(badouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GreaterThanEqual__SWIG_0 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  badouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GreaterThanEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreaterThanEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GreaterThanEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreaterThanEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (int)operator >=((badouble const &)*arg1,(badouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GreaterThan__SWIG_0 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  badouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GreaterThan" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreaterThan" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GreaterThan" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreaterThan" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (int)operator >((badouble const &)*arg1,(badouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_LessThan__SWIG_0 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  badouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LessThan" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LessThan" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LessThan" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LessThan" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (int)operator <((badouble const &)*arg1,(badouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_NotEqual__SWIG_1 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  double arg1 ;
  badouble *arg2 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NotEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NotEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (int)operator !=(arg1,(badouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_NotEqual__SWIG_2 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  badouble *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NotEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NotEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (int)operator !=((badouble const &)*arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EqualEqual__SWIG_1 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  double arg1 ;
  badouble *arg2 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EqualEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EqualEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (int)operator ==(arg1,(badouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EqualEqual__SWIG_2 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  badouble *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EqualEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EqualEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (int)operator ==((badouble const &)*arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_LessThanEqual__SWIG_1 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  double arg1 ;
  badouble *arg2 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LessThanEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LessThanEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (int)operator <=(arg1,(badouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_LessThanEqual__SWIG_2 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  badouble *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LessThanEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LessThanEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (int)operator <=((badouble const &)*arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GreaterThanEqual__SWIG_1 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  double arg1 ;
  badouble *arg2 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GreaterThanEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreaterThanEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (int)operator >=(arg1,(badouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GreaterThanEqual__SWIG_2 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  badouble *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GreaterThanEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreaterThanEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (int)operator >=((badouble const &)*arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GreaterThan__SWIG_1 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  double arg1 ;
  badouble *arg2 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GreaterThan" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreaterThan" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (int)operator >(arg1,(badouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GreaterThan__SWIG_2 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  badouble *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GreaterThan" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreaterThan" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (int)operator >((badouble const &)*arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_LessThan__SWIG_1 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  double arg1 ;
  badouble *arg2 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LessThan" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LessThan" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (int)operator <(arg1,(badouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_LessThan__SWIG_2 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  badouble *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LessThan" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LessThan" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (int)operator <((badouble const &)*arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_atan2 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  adouble result;
  badouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atan2" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "atan2" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atan2" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "atan2" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = atan2((badouble const &)*arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj((new adouble(static_cast< const adouble& >(result))), SWIGTYPE_p_adouble, SWIG_POINTER_OWN |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_pow__SWIG_0 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  adouble result;
  badouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pow" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pow" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pow" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pow" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = pow((badouble const &)*arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj((new adouble(static_cast< const adouble& >(result))), SWIGTYPE_p_adouble, SWIG_POINTER_OWN |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_pow__SWIG_1 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  adouble result;
  double arg1 ;
  badouble *arg2 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pow" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pow" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = pow(arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj((new adouble(static_cast< const adouble& >(result))), SWIGTYPE_p_adouble, SWIG_POINTER_OWN |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myquad ( SEXP s_arg1, SEXP s_swig_copy)
{
  adouble result;
  badouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "myquad" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "myquad" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = myquad((badouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj((new adouble(static_cast< const adouble& >(result))), SWIGTYPE_p_adouble, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_condassign__SWIG_2 ( SEXP res, SEXP cond, SEXP s_arg1, SEXP s_arg2)
{
  adouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  badouble *arg3 = 0 ;
  badouble *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(res, &argp1, SWIGTYPE_p_adouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "condassign" "', argument " "1"" of type '" "adouble &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condassign" "', argument " "1"" of type '" "adouble &""'"); 
  }
  arg1 = reinterpret_cast< adouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(cond, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "condassign" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condassign" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  res3 = SWIG_R_ConvertPtr(s_arg1, &argp3, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "condassign" "', argument " "3"" of type '" "badouble const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condassign" "', argument " "3"" of type '" "badouble const &""'"); 
  }
  arg3 = reinterpret_cast< badouble * >(argp3);
  res4 = SWIG_R_ConvertPtr(s_arg2, &argp4, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "condassign" "', argument " "4"" of type '" "badouble const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condassign" "', argument " "4"" of type '" "badouble const &""'"); 
  }
  arg4 = reinterpret_cast< badouble * >(argp4);
  condassign(*arg1,(badouble const &)*arg2,(badouble const &)*arg3,(badouble const &)*arg4);
  r_ans = R_NilValue;
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_condassign__SWIG_3 ( SEXP res, SEXP cond, SEXP s_arg)
{
  adouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  badouble *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(res, &argp1, SWIGTYPE_p_adouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "condassign" "', argument " "1"" of type '" "adouble &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condassign" "', argument " "1"" of type '" "adouble &""'"); 
  }
  arg1 = reinterpret_cast< adouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(cond, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "condassign" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condassign" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  res3 = SWIG_R_ConvertPtr(s_arg, &argp3, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "condassign" "', argument " "3"" of type '" "badouble const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condassign" "', argument " "3"" of type '" "badouble const &""'"); 
  }
  arg3 = reinterpret_cast< badouble * >(argp3);
  condassign(*arg1,(badouble const &)*arg2,(badouble const &)*arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_condeqassign__SWIG_2 ( SEXP res, SEXP cond, SEXP s_arg1, SEXP s_arg2)
{
  adouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  badouble *arg3 = 0 ;
  badouble *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(res, &argp1, SWIGTYPE_p_adouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "condeqassign" "', argument " "1"" of type '" "adouble &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condeqassign" "', argument " "1"" of type '" "adouble &""'"); 
  }
  arg1 = reinterpret_cast< adouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(cond, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "condeqassign" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condeqassign" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  res3 = SWIG_R_ConvertPtr(s_arg1, &argp3, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "condeqassign" "', argument " "3"" of type '" "badouble const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condeqassign" "', argument " "3"" of type '" "badouble const &""'"); 
  }
  arg3 = reinterpret_cast< badouble * >(argp3);
  res4 = SWIG_R_ConvertPtr(s_arg2, &argp4, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "condeqassign" "', argument " "4"" of type '" "badouble const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condeqassign" "', argument " "4"" of type '" "badouble const &""'"); 
  }
  arg4 = reinterpret_cast< badouble * >(argp4);
  condeqassign(*arg1,(badouble const &)*arg2,(badouble const &)*arg3,(badouble const &)*arg4);
  r_ans = R_NilValue;
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_condeqassign__SWIG_3 ( SEXP res, SEXP cond, SEXP s_arg)
{
  adouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  badouble *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(res, &argp1, SWIGTYPE_p_adouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "condeqassign" "', argument " "1"" of type '" "adouble &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condeqassign" "', argument " "1"" of type '" "adouble &""'"); 
  }
  arg1 = reinterpret_cast< adouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(cond, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "condeqassign" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condeqassign" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  res3 = SWIG_R_ConvertPtr(s_arg, &argp3, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "condeqassign" "', argument " "3"" of type '" "badouble const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condeqassign" "', argument " "3"" of type '" "badouble const &""'"); 
  }
  arg3 = reinterpret_cast< badouble * >(argp3);
  condeqassign(*arg1,(badouble const &)*arg2,(badouble const &)*arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_NotEqual__SWIG_3 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  pdouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NotEqual" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NotEqual" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NotEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NotEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (int)operator !=((pdouble const &)*arg1,(badouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_NotEqual__SWIG_4 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  badouble *arg1 = 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NotEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NotEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NotEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NotEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (int)operator !=((badouble const &)*arg1,(pdouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EqualEqual__SWIG_3 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  pdouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EqualEqual" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EqualEqual" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EqualEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EqualEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (int)operator ==((pdouble const &)*arg1,(badouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EqualEqual__SWIG_4 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  badouble *arg1 = 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EqualEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EqualEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EqualEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EqualEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (int)operator ==((badouble const &)*arg1,(pdouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_LessThanEqual__SWIG_3 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  pdouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LessThanEqual" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LessThanEqual" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LessThanEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LessThanEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (int)operator <=((pdouble const &)*arg1,(badouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_LessThanEqual__SWIG_4 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  badouble *arg1 = 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LessThanEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LessThanEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LessThanEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LessThanEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (int)operator <=((badouble const &)*arg1,(pdouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GreaterThanEqual__SWIG_3 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  pdouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GreaterThanEqual" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreaterThanEqual" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GreaterThanEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreaterThanEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (int)operator >=((pdouble const &)*arg1,(badouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GreaterThanEqual__SWIG_4 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  badouble *arg1 = 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GreaterThanEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreaterThanEqual" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GreaterThanEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreaterThanEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (int)operator >=((badouble const &)*arg1,(pdouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GreaterThan__SWIG_3 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  pdouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GreaterThan" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreaterThan" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GreaterThan" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreaterThan" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (int)operator >((pdouble const &)*arg1,(badouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_GreaterThan__SWIG_4 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  badouble *arg1 = 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GreaterThan" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreaterThan" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GreaterThan" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GreaterThan" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (int)operator >((badouble const &)*arg1,(pdouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_LessThan__SWIG_3 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  pdouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LessThan" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LessThan" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LessThan" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LessThan" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (int)operator <((pdouble const &)*arg1,(badouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_LessThan__SWIG_4 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  int result;
  badouble *arg1 = 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LessThan" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LessThan" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LessThan" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LessThan" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (int)operator <((badouble const &)*arg1,(pdouble const &)*arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_pow__SWIG_2 ( SEXP s_arg1, SEXP s_arg2, SEXP s_swig_copy)
{
  adouble result;
  pdouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pow" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pow" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pow" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pow" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = pow((pdouble const &)*arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj((new adouble(static_cast< const adouble& >(result))), SWIGTYPE_p_adouble, SWIG_POINTER_OWN |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_badouble ( SEXP self)
{
  badouble *arg1 = (badouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_badouble, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_badouble" "', argument " "1"" of type '" "badouble *""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_adub ( SEXP self)
{
  adub *arg1 = (adub *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adub, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_adub" "', argument " "1"" of type '" "adub *""'"); 
  }
  arg1 = reinterpret_cast< adub * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_ensureContiguousLocations ( SEXP n)
{
  size_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(n, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ensureContiguousLocations" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ensureContiguousLocations(arg1);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_adouble__SWIG_0 ( SEXP s_arg1)
{
  adouble *result = 0 ;
  adub *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_adub,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_adouble" "', argument " "1"" of type '" "adub const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_adouble" "', argument " "1"" of type '" "adub const &""'"); 
  }
  arg1 = reinterpret_cast< adub * >(argp1);
  result = (adouble *)new adouble((adub const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adouble, R_SWIG_OWNER |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_adouble__SWIG_1 ( SEXP s_arg1)
{
  adouble *result = 0 ;
  adouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_adouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_adouble" "', argument " "1"" of type '" "adouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_adouble" "', argument " "1"" of type '" "adouble const &""'"); 
  }
  arg1 = reinterpret_cast< adouble * >(argp1);
  result = (adouble *)new adouble((adouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adouble, R_SWIG_OWNER |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_adouble__SWIG_2 ( )
{
  adouble *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (adouble *)new adouble();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adouble, R_SWIG_OWNER |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_adouble__SWIG_3 ( SEXP s_arg1)
{
  adouble *result = 0 ;
  double arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  result = (adouble *)new adouble(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adouble, R_SWIG_OWNER |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adouble___plusplus____SWIG_0 ( SEXP self, SEXP s_arg2)
{
  adub *result = 0 ;
  adouble *arg1 = (adouble *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adouble___plusplus__" "', argument " "1"" of type '" "adouble *""'"); 
  }
  arg1 = reinterpret_cast< adouble * >(argp1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  result = (adub *)(arg1)->operator ++(arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adouble___minusminus____SWIG_0 ( SEXP self, SEXP s_arg2)
{
  adub *result = 0 ;
  adouble *arg1 = (adouble *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adouble___minusminus__" "', argument " "1"" of type '" "adouble *""'"); 
  }
  arg1 = reinterpret_cast< adouble * >(argp1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  result = (adub *)(arg1)->operator --(arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adouble___plusplus____SWIG_1 ( SEXP self, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  adouble *arg1 = (adouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adouble___plusplus__" "', argument " "1"" of type '" "adouble *""'"); 
  }
  arg1 = reinterpret_cast< adouble * >(argp1);
  result = (badouble *) &(arg1)->operator ++();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adouble___minusminus____SWIG_1 ( SEXP self, SEXP s_swig_copy)
{
  badouble *result = 0 ;
  adouble *arg1 = (adouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adouble___minusminus__" "', argument " "1"" of type '" "adouble *""'"); 
  }
  arg1 = reinterpret_cast< adouble * >(argp1);
  result = (badouble *) &(arg1)->operator --();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_badouble, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_adouble ( SEXP self)
{
  adouble *arg1 = (adouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adouble, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_adouble" "', argument " "1"" of type '" "adouble *""'"); 
  }
  arg1 = reinterpret_cast< adouble * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adouble___seteq____SWIG_0 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  adouble *result = 0 ;
  adouble *arg1 = (adouble *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adouble___seteq__" "', argument " "1"" of type '" "adouble *""'"); 
  }
  arg1 = reinterpret_cast< adouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (adouble *) &(arg1)->operator =(arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adouble___seteq____SWIG_1 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  adouble *result = 0 ;
  adouble *arg1 = (adouble *) 0 ;
  badouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adouble___seteq__" "', argument " "1"" of type '" "adouble *""'"); 
  }
  arg1 = reinterpret_cast< adouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adouble___seteq__" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adouble___seteq__" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adouble *) &(arg1)->operator =((badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adouble___seteq____SWIG_2 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  adouble *result = 0 ;
  adouble *arg1 = (adouble *) 0 ;
  adouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adouble___seteq__" "', argument " "1"" of type '" "adouble *""'"); 
  }
  arg1 = reinterpret_cast< adouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_adouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adouble___seteq__" "', argument " "2"" of type '" "adouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adouble___seteq__" "', argument " "2"" of type '" "adouble const &""'"); 
  }
  arg2 = reinterpret_cast< adouble * >(argp2);
  result = (adouble *) &(arg1)->operator =((adouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adouble___seteq____SWIG_3 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  adouble *result = 0 ;
  adouble *arg1 = (adouble *) 0 ;
  adub *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adouble___seteq__" "', argument " "1"" of type '" "adouble *""'"); 
  }
  arg1 = reinterpret_cast< adouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_adub,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adouble___seteq__" "', argument " "2"" of type '" "adub const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adouble___seteq__" "', argument " "2"" of type '" "adub const &""'"); 
  }
  arg2 = reinterpret_cast< adub * >(argp2);
  result = (adouble *) &(arg1)->operator =((adub const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adouble___seteq____SWIG_4 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  adouble *result = 0 ;
  adouble *arg1 = (adouble *) 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adouble___seteq__" "', argument " "1"" of type '" "adouble *""'"); 
  }
  arg1 = reinterpret_cast< adouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adouble___seteq__" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adouble___seteq__" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adouble *) &(arg1)->operator =((pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adouble_loc ( SEXP self, SEXP s_swig_copy)
{
  locint result;
  adouble *arg1 = (adouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adouble_loc" "', argument " "1"" of type '" "adouble const *""'"); 
  }
  arg1 = reinterpret_cast< adouble * >(argp1);
  result = ((adouble const *)arg1)->loc();
  r_ans = SWIG_R_NewPointerObj((new locint(static_cast< const locint& >(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_mkparam_idx ( SEXP pval, SEXP s_swig_copy)
{
  locint result;
  double arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(pval)[0]);
  result = mkparam_idx(arg1);
  r_ans = SWIG_R_NewPointerObj((new locint(static_cast< const locint& >(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_pdouble ( SEXP self)
{
  pdouble *arg1 = (pdouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_pdouble, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pdouble" "', argument " "1"" of type '" "pdouble *""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_get_num_param ( SEXP tag, SEXP s_swig_copy)
{
  size_t result;
  short arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(tag, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_num_param" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  result = get_num_param(arg1);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_set_param_vec ( SEXP tag, SEXP numparam, SEXP paramvec)
{
  short arg1 ;
  size_t arg2 ;
  revreal *arg3 = (revreal *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(tag, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_param_vec" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  ecode2 = SWIG_AsVal_int(numparam, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "set_param_vec" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(paramvec);
      arg3 = static_cast< revreal * >(calloc(sizeof(revreal), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg3[_rswigi] = REAL(paramvec)[_rswigi];
      }
    }
  }
  set_param_vec(arg1,arg2,arg3);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(paramvec);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(paramvec)[_rswigi] = arg3[_rswigi];
      }
    }
  }
  
  
  
  free(arg3);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref___plusplus____SWIG_0 ( SEXP self, SEXP s_arg2)
{
  adub *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref___plusplus__" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  result = (adub *)(arg1)->operator ++(arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref___minusminus____SWIG_0 ( SEXP self, SEXP s_arg2)
{
  adub *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref___minusminus__" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  result = (adub *)(arg1)->operator --(arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref___plusplus____SWIG_1 ( SEXP self, SEXP s_swig_copy)
{
  adubref *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref___plusplus__" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  result = (adubref *) &(arg1)->operator ++();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref___minusminus____SWIG_1 ( SEXP self, SEXP s_swig_copy)
{
  adubref *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref___minusminus__" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  result = (adubref *) &(arg1)->operator --();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref___seteq____SWIG_0 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  adubref *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref___seteq__" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (adubref *) &(arg1)->operator =(arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref___seteq____SWIG_1 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  adubref *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  badouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref___seteq__" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adubref___seteq__" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adubref___seteq__" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adubref *) &(arg1)->operator =((badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref___seteq____SWIG_2 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  adubref *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  adubref *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref___seteq__" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_adubref,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adubref___seteq__" "', argument " "2"" of type '" "adubref const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adubref___seteq__" "', argument " "2"" of type '" "adubref const &""'"); 
  }
  arg2 = reinterpret_cast< adubref * >(argp2);
  result = (adubref *) &(arg1)->operator =((adubref const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref___seteq____SWIG_3 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  adubref *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref___seteq__" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adubref___seteq__" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adubref___seteq__" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adubref *) &(arg1)->operator =((pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref_PlusEqual__SWIG_0 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  adubref *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref_PlusEqual" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (adubref *) &(arg1)->operator +=(arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref_PlusEqual__SWIG_1 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  adubref *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  badouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref_PlusEqual" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adubref_PlusEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adubref_PlusEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adubref *) &(arg1)->operator +=((badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref_PlusEqual__SWIG_2 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  adubref *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref_PlusEqual" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adubref_PlusEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adubref_PlusEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adubref *) &(arg1)->operator +=((pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref_MinusEqual__SWIG_0 ( SEXP self, SEXP x, SEXP s_swig_copy)
{
  adubref *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref_MinusEqual" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  arg2 = static_cast< double >(REAL(x)[0]);
  result = (adubref *) &(arg1)->operator -=(arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref_MinusEqual__SWIG_1 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  adubref *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  badouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref_MinusEqual" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adubref_MinusEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adubref_MinusEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adubref *) &(arg1)->operator -=((badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref_MinusEqual__SWIG_2 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  adubref *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref_MinusEqual" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adubref_MinusEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adubref_MinusEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adubref *) &(arg1)->operator -=((pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref_MultiplyEqual__SWIG_0 ( SEXP self, SEXP x, SEXP s_swig_copy)
{
  adubref *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref_MultiplyEqual" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  arg2 = static_cast< double >(REAL(x)[0]);
  result = (adubref *) &(arg1)->operator *=(arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref_MultiplyEqual__SWIG_1 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  adubref *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  badouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref_MultiplyEqual" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adubref_MultiplyEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adubref_MultiplyEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adubref *) &(arg1)->operator *=((badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref_MultiplyEqual__SWIG_2 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  adubref *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref_MultiplyEqual" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adubref_MultiplyEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adubref_MultiplyEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adubref *) &(arg1)->operator *=((pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref_DivideEqual__SWIG_0 ( SEXP self, SEXP x, SEXP s_swig_copy)
{
  adubref *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref_DivideEqual" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  arg2 = static_cast< double >(REAL(x)[0]);
  result = (adubref *) &(arg1)->operator /=(arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref_DivideEqual__SWIG_1 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  adubref *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  badouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref_DivideEqual" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adubref_DivideEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adubref_DivideEqual" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adubref *) &(arg1)->operator /=((badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref_DivideEqual__SWIG_2 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  adubref *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref_DivideEqual" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adubref_DivideEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adubref_DivideEqual" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adubref *) &(arg1)->operator /=((pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref_declareIndependent__SWIG_0 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  adubref *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref_declareIndependent" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (adubref *) &(arg1)->operator <<=(arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref_declareIndependent__SWIG_1 ( SEXP self)
{
  adubref *arg1 = (adubref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref_declareIndependent" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  (arg1)->declareIndependent();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref_declareDependent__SWIG_0 ( SEXP self, SEXP s_arg2, SEXP s_swig_copy)
{
  adubref *result = 0 ;
  adubref *arg1 = (adubref *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref_declareDependent" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adubref_declareDependent" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adubref_declareDependent" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  result = (adubref *) &(arg1)->operator >>=(*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adubref_declareDependent__SWIG_1 ( SEXP self)
{
  adubref *arg1 = (adubref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adubref_declareDependent" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  (arg1)->declareDependent();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_condassign__SWIG_4 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4)
{
  adubref *arg1 = 0 ;
  badouble *arg2 = 0 ;
  badouble *arg3 = 0 ;
  badouble *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_adubref,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "condassign" "', argument " "1"" of type '" "adubref &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condassign" "', argument " "1"" of type '" "adubref &""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "condassign" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condassign" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  res3 = SWIG_R_ConvertPtr(s_arg3, &argp3, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "condassign" "', argument " "3"" of type '" "badouble const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condassign" "', argument " "3"" of type '" "badouble const &""'"); 
  }
  arg3 = reinterpret_cast< badouble * >(argp3);
  res4 = SWIG_R_ConvertPtr(s_arg4, &argp4, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "condassign" "', argument " "4"" of type '" "badouble const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condassign" "', argument " "4"" of type '" "badouble const &""'"); 
  }
  arg4 = reinterpret_cast< badouble * >(argp4);
  condassign(*arg1,(badouble const &)*arg2,(badouble const &)*arg3,(badouble const &)*arg4);
  r_ans = R_NilValue;
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_condassign__SWIG_5 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3)
{
  adubref *arg1 = 0 ;
  badouble *arg2 = 0 ;
  badouble *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_adubref,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "condassign" "', argument " "1"" of type '" "adubref &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condassign" "', argument " "1"" of type '" "adubref &""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "condassign" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condassign" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  res3 = SWIG_R_ConvertPtr(s_arg3, &argp3, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "condassign" "', argument " "3"" of type '" "badouble const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condassign" "', argument " "3"" of type '" "badouble const &""'"); 
  }
  arg3 = reinterpret_cast< badouble * >(argp3);
  condassign(*arg1,(badouble const &)*arg2,(badouble const &)*arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_condeqassign__SWIG_4 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4)
{
  adubref *arg1 = 0 ;
  badouble *arg2 = 0 ;
  badouble *arg3 = 0 ;
  badouble *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_adubref,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "condeqassign" "', argument " "1"" of type '" "adubref &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condeqassign" "', argument " "1"" of type '" "adubref &""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "condeqassign" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condeqassign" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  res3 = SWIG_R_ConvertPtr(s_arg3, &argp3, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "condeqassign" "', argument " "3"" of type '" "badouble const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condeqassign" "', argument " "3"" of type '" "badouble const &""'"); 
  }
  arg3 = reinterpret_cast< badouble * >(argp3);
  res4 = SWIG_R_ConvertPtr(s_arg4, &argp4, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "condeqassign" "', argument " "4"" of type '" "badouble const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condeqassign" "', argument " "4"" of type '" "badouble const &""'"); 
  }
  arg4 = reinterpret_cast< badouble * >(argp4);
  condeqassign(*arg1,(badouble const &)*arg2,(badouble const &)*arg3,(badouble const &)*arg4);
  r_ans = R_NilValue;
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_condeqassign__SWIG_5 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3)
{
  adubref *arg1 = 0 ;
  badouble *arg2 = 0 ;
  badouble *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_adubref,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "condeqassign" "', argument " "1"" of type '" "adubref &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condeqassign" "', argument " "1"" of type '" "adubref &""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "condeqassign" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condeqassign" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  res3 = SWIG_R_ConvertPtr(s_arg3, &argp3, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "condeqassign" "', argument " "3"" of type '" "badouble const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "condeqassign" "', argument " "3"" of type '" "badouble const &""'"); 
  }
  arg3 = reinterpret_cast< badouble * >(argp3);
  condeqassign(*arg1,(badouble const &)*arg2,(badouble const &)*arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_adubref ( SEXP self)
{
  adubref *arg1 = (adubref *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_adubref, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_adubref" "', argument " "1"" of type '" "adubref *""'"); 
  }
  arg1 = reinterpret_cast< adubref * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adolc_vec_copy ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3)
{
  adouble *arg1 = (adouble *) (adouble *)0 ;
  adouble *arg2 = (adouble *) (adouble *)0 ;
  locint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adolc_vec_copy" "', argument " "1"" of type '" "adouble *const""'"); 
  }
  arg1 = reinterpret_cast< adouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adolc_vec_copy" "', argument " "2"" of type '" "adouble const *const""'"); 
  }
  arg2 = reinterpret_cast< adouble * >(argp2);
  {
    res3 = SWIG_R_ConvertPtr(s_arg3, &argp3, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "adolc_vec_copy" "', argument " "3"" of type '" "locint""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adolc_vec_copy" "', argument " "3"" of type '" "locint""'");
    } else {
      arg3 = *(reinterpret_cast< locint * >(argp3));
    }
  }
  adolc_vec_copy(arg1,(adouble const *)arg2,arg3);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adolc_vec_axpy ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5)
{
  adouble *arg1 = (adouble *) (adouble *)0 ;
  badouble *arg2 = 0 ;
  adouble *arg3 = (adouble *) (adouble *)0 ;
  adouble *arg4 = (adouble *) (adouble *)0 ;
  locint arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adolc_vec_axpy" "', argument " "1"" of type '" "adouble *const""'"); 
  }
  arg1 = reinterpret_cast< adouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adolc_vec_axpy" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adolc_vec_axpy" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  res3 = SWIG_R_ConvertPtr(s_arg3, &argp3, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "adolc_vec_axpy" "', argument " "3"" of type '" "adouble const *const""'"); 
  }
  arg3 = reinterpret_cast< adouble * >(argp3);
  res4 = SWIG_R_ConvertPtr(s_arg4, &argp4, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "adolc_vec_axpy" "', argument " "4"" of type '" "adouble const *const""'"); 
  }
  arg4 = reinterpret_cast< adouble * >(argp4);
  {
    res5 = SWIG_R_ConvertPtr(s_arg5, &argp5, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "adolc_vec_axpy" "', argument " "5"" of type '" "locint""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adolc_vec_axpy" "', argument " "5"" of type '" "locint""'");
    } else {
      arg5 = *(reinterpret_cast< locint * >(argp5));
    }
  }
  adolc_vec_axpy(arg1,(badouble const &)*arg2,(adouble const *)arg3,(adouble const *)arg4,arg5);
  r_ans = R_NilValue;
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_advector__SWIG_0 ( )
{
  advector *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (advector *)new advector();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_advector, R_SWIG_OWNER |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_advector__SWIG_1 ( SEXP n)
{
  advector *result = 0 ;
  size_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(n, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_advector" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (advector *)new advector(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_advector, R_SWIG_OWNER |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_advector ( SEXP self)
{
  advector *arg1 = (advector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_advector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_advector" "', argument " "1"" of type '" "advector *""'"); 
  }
  arg1 = reinterpret_cast< advector * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_advector__SWIG_2 ( SEXP x)
{
  advector *result = 0 ;
  advector *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(x, &argp1, SWIGTYPE_p_advector,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_advector" "', argument " "1"" of type '" "advector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_advector" "', argument " "1"" of type '" "advector const &""'"); 
  }
  arg1 = reinterpret_cast< advector * >(argp1);
  result = (advector *)new advector((advector const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_advector, R_SWIG_OWNER |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_advector__SWIG_3 ( SEXP v)
{
  advector *result = 0 ;
  std::vector< adouble > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(v, &argp1, SWIGTYPE_p_std__vectorT_adouble_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_advector" "', argument " "1"" of type '" "std::vector< adouble > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_advector" "', argument " "1"" of type '" "std::vector< adouble > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< adouble > * >(argp1);
  result = (advector *)new advector((std::vector< adouble > const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_advector, R_SWIG_OWNER |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_advector_size ( SEXP self, SEXP s_swig_copy)
{
  size_t result;
  advector *arg1 = (advector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_advector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "advector_size" "', argument " "1"" of type '" "advector const *""'"); 
  }
  arg1 = reinterpret_cast< advector * >(argp1);
  result = ((advector const *)arg1)->size();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_advector___index____SWIG_0 ( SEXP self, SEXP index)
{
  adub *result = 0 ;
  advector *arg1 = (advector *) 0 ;
  badouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_advector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "advector___index__" "', argument " "1"" of type '" "advector const *""'"); 
  }
  arg1 = reinterpret_cast< advector * >(argp1);
  res2 = SWIG_R_ConvertPtr(index, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "advector___index__" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "advector___index__" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adub *)((advector const *)arg1)->operator []((badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_advector___index____SWIG_1 ( SEXP self, SEXP index)
{
  adubref *result = 0 ;
  advector *arg1 = (advector *) 0 ;
  badouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_advector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "advector___index__" "', argument " "1"" of type '" "advector *""'"); 
  }
  arg1 = reinterpret_cast< advector * >(argp1);
  res2 = SWIG_R_ConvertPtr(index, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "advector___index__" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "advector___index__" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adubref *)(arg1)->operator []((badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adubref, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_advector___index____SWIG_2 ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  adouble *result = 0 ;
  advector *arg1 = (advector *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_advector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "advector___index__" "', argument " "1"" of type '" "advector *""'"); 
  }
  arg1 = reinterpret_cast< advector * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "advector___index__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (adouble *) &(arg1)->operator [](arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_advector___index____SWIG_3 ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  adouble *result = 0 ;
  advector *arg1 = (advector *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_advector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "advector___index__" "', argument " "1"" of type '" "advector const *""'"); 
  }
  arg1 = reinterpret_cast< advector * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "advector___index__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (adouble *) &((advector const *)arg1)->operator [](arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adouble, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_advector_lookupindex ( SEXP self, SEXP x, SEXP y, SEXP s_swig_copy)
{
  adouble result;
  advector *arg1 = (advector *) 0 ;
  badouble *arg2 = 0 ;
  badouble *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_advector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "advector_lookupindex" "', argument " "1"" of type '" "advector const *""'"); 
  }
  arg1 = reinterpret_cast< advector * >(argp1);
  res2 = SWIG_R_ConvertPtr(x, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "advector_lookupindex" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "advector_lookupindex" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  res3 = SWIG_R_ConvertPtr(y, &argp3, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "advector_lookupindex" "', argument " "3"" of type '" "badouble const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "advector_lookupindex" "', argument " "3"" of type '" "badouble const &""'"); 
  }
  arg3 = reinterpret_cast< badouble * >(argp3);
  result = ((advector const *)arg1)->lookupindex((badouble const &)*arg2,(badouble const &)*arg3);
  r_ans = SWIG_R_NewPointerObj((new adouble(static_cast< const adouble& >(result))), SWIGTYPE_p_adouble, SWIG_POINTER_OWN |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_reg_ext_fct__SWIG_0 ( SEXP ext_fct)
{
  ext_diff_fct_v2 *result = 0 ;
  ADOLC_ext_fct_v2 *arg1 = (ADOLC_ext_fct_v2 *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    int res = SWIG_R_ConvertPtr(ext_fct, (void**)(&arg1), SWIGTYPE_p_f_int_p_int_int_int_p_int_p_p_double_p_int_p_p_double_p_void__int, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "reg_ext_fct" "', argument " "1"" of type '" "ADOLC_ext_fct_v2 *""'"); 
    }
  }
  result = (ext_diff_fct_v2 *)reg_ext_fct(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ext_diff_fct_v2, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_call_ext_fct__SWIG_0 ( SEXP edfct, SEXP iArrLen, SEXP iArr, SEXP nin, SEXP nout, SEXP insz, SEXP x, SEXP outsz, SEXP y, SEXP s_swig_copy)
{
  int result;
  ext_diff_fct_v2 *arg1 = (ext_diff_fct_v2 *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  adouble **arg7 = (adouble **) 0 ;
  int *arg8 = (int *) 0 ;
  adouble **arg9 = (adouble **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(edfct, &argp1, SWIGTYPE_p_ext_diff_fct_v2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "call_ext_fct" "', argument " "1"" of type '" "ext_diff_fct_v2 *""'"); 
  }
  arg1 = reinterpret_cast< ext_diff_fct_v2 * >(argp1);
  arg2 = static_cast< int >(INTEGER(iArrLen)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(iArr);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(iArr)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(nin)[0]);
  arg5 = static_cast< int >(INTEGER(nout)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(insz);
      arg6 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg6[_rswigi] = INTEGER(insz)[_rswigi];
      }
    }
  }
  res7 = SWIG_R_ConvertPtr(x, &argp7, SWIGTYPE_p_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "call_ext_fct" "', argument " "7"" of type '" "adouble **""'"); 
  }
  arg7 = reinterpret_cast< adouble ** >(argp7);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(outsz);
      arg8 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg8[_rswigi] = INTEGER(outsz)[_rswigi];
      }
    }
  }
  res9 = SWIG_R_ConvertPtr(y, &argp9, SWIGTYPE_p_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "call_ext_fct" "', argument " "9"" of type '" "adouble **""'"); 
  }
  arg9 = reinterpret_cast< adouble ** >(argp9);
  result = (int)call_ext_fct(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  free(arg3);
  
  
  
  
  free(arg6);
  
  
  
  free(arg8);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_edf_zero__SWIG_0 ( SEXP edfct)
{
  ext_diff_fct_v2 *arg1 = (ext_diff_fct_v2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(edfct, &argp1, SWIGTYPE_p_ext_diff_fct_v2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "edf_zero" "', argument " "1"" of type '" "ext_diff_fct_v2 *""'"); 
  }
  arg1 = reinterpret_cast< ext_diff_fct_v2 * >(argp1);
  edf_zero(arg1);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_edf_set_opaque_context ( SEXP edfct, SEXP ctx)
{
  ext_diff_fct_v2 *arg1 = (ext_diff_fct_v2 *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(edfct, &argp1, SWIGTYPE_p_ext_diff_fct_v2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "edf_set_opaque_context" "', argument " "1"" of type '" "ext_diff_fct_v2 *""'"); 
  }
  arg1 = reinterpret_cast< ext_diff_fct_v2 * >(argp1);
  res2 = SWIG_R_ConvertPtr(ctx, SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "edf_set_opaque_context" "', argument " "2"" of type '" "void *""'"); 
  }
  edf_set_opaque_context(arg1,arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_reg_ext_fct__SWIG_1 ( SEXP ext_fct)
{
  ext_diff_fct *result = 0 ;
  ADOLC_ext_fct *arg1 = (ADOLC_ext_fct *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    int res = SWIG_R_ConvertPtr(ext_fct, (void**)(&arg1), SWIGTYPE_p_f_int_p_double_int_p_double__int, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "reg_ext_fct" "', argument " "1"" of type '" "ADOLC_ext_fct *""'"); 
    }
  }
  result = (ext_diff_fct *)reg_ext_fct(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ext_diff_fct, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_reg_ext_fct__SWIG_2 ( SEXP ext_fct)
{
  ext_diff_fct *result = 0 ;
  ADOLC_ext_fct_iArr *arg1 = (ADOLC_ext_fct_iArr *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    int res = SWIG_R_ConvertPtr(ext_fct, (void**)(&arg1), SWIGTYPE_p_f_int_p_int_int_p_double_int_p_double__int, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "reg_ext_fct" "', argument " "1"" of type '" "ADOLC_ext_fct_iArr *""'"); 
    }
  }
  result = (ext_diff_fct *)reg_ext_fct(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ext_diff_fct, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_call_ext_fct__SWIG_1 ( SEXP edfct, SEXP n, SEXP xa, SEXP m, SEXP ya, SEXP s_swig_copy)
{
  int result;
  ext_diff_fct *arg1 = (ext_diff_fct *) 0 ;
  int arg2 ;
  adouble *arg3 = (adouble *) 0 ;
  int arg4 ;
  adouble *arg5 = (adouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(edfct, &argp1, SWIGTYPE_p_ext_diff_fct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "call_ext_fct" "', argument " "1"" of type '" "ext_diff_fct *""'"); 
  }
  arg1 = reinterpret_cast< ext_diff_fct * >(argp1);
  arg2 = static_cast< int >(INTEGER(n)[0]);
  res3 = SWIG_R_ConvertPtr(xa, &argp3, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "call_ext_fct" "', argument " "3"" of type '" "adouble *""'"); 
  }
  arg3 = reinterpret_cast< adouble * >(argp3);
  arg4 = static_cast< int >(INTEGER(m)[0]);
  res5 = SWIG_R_ConvertPtr(ya, &argp5, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "call_ext_fct" "', argument " "5"" of type '" "adouble *""'"); 
  }
  arg5 = reinterpret_cast< adouble * >(argp5);
  result = (int)call_ext_fct(arg1,arg2,arg3,arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_call_ext_fct__SWIG_2 ( SEXP edfct, SEXP iArrLength, SEXP iArr, SEXP n, SEXP xa, SEXP m, SEXP ya, SEXP s_swig_copy)
{
  int result;
  ext_diff_fct *arg1 = (ext_diff_fct *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  adouble *arg5 = (adouble *) 0 ;
  int arg6 ;
  adouble *arg7 = (adouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(edfct, &argp1, SWIGTYPE_p_ext_diff_fct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "call_ext_fct" "', argument " "1"" of type '" "ext_diff_fct *""'"); 
  }
  arg1 = reinterpret_cast< ext_diff_fct * >(argp1);
  arg2 = static_cast< int >(INTEGER(iArrLength)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(iArr);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(iArr)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(n)[0]);
  res5 = SWIG_R_ConvertPtr(xa, &argp5, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "call_ext_fct" "', argument " "5"" of type '" "adouble *""'"); 
  }
  arg5 = reinterpret_cast< adouble * >(argp5);
  arg6 = static_cast< int >(INTEGER(m)[0]);
  res7 = SWIG_R_ConvertPtr(ya, &argp7, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "call_ext_fct" "', argument " "7"" of type '" "adouble *""'"); 
  }
  arg7 = reinterpret_cast< adouble * >(argp7);
  result = (int)call_ext_fct(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  free(arg3);
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_edf_zero__SWIG_1 ( SEXP edfct)
{
  ext_diff_fct *arg1 = (ext_diff_fct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(edfct, &argp1, SWIGTYPE_p_ext_diff_fct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "edf_zero" "', argument " "1"" of type '" "ext_diff_fct *""'"); 
  }
  arg1 = reinterpret_cast< ext_diff_fct * >(argp1);
  edf_zero(arg1);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_EDFobject ( SEXP self)
{
  EDFobject *arg1 = (EDFobject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EDFobject" "', argument " "1"" of type '" "EDFobject *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_eval_func ( SEXP self, SEXP n, SEXP x, SEXP m, SEXP y, SEXP s_swig_copy)
{
  int result;
  EDFobject *arg1 = (EDFobject *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_eval_func" "', argument " "1"" of type '" "EDFobject *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject * >(argp1);
  arg2 = static_cast< int >(INTEGER(n)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(x);
      arg3 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg3[_rswigi] = REAL(x)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(m)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(y);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(y)[_rswigi];
      }
    }
  }
  result = (int)(arg1)->function(arg2,arg3,arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(x);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(x)[_rswigi] = arg3[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(y);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(y)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  
  
  
  free(arg3);
  
  
  
  free(arg5);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_zos_forward ( SEXP self, SEXP n, SEXP x, SEXP m, SEXP y, SEXP s_swig_copy)
{
  int result;
  EDFobject *arg1 = (EDFobject *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_zos_forward" "', argument " "1"" of type '" "EDFobject *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject * >(argp1);
  arg2 = static_cast< int >(INTEGER(n)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(x);
      arg3 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg3[_rswigi] = REAL(x)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(m)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(y);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(y)[_rswigi];
      }
    }
  }
  result = (int)(arg1)->zos_forward(arg2,arg3,arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(x);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(x)[_rswigi] = arg3[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(y);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(y)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  
  
  
  free(arg3);
  
  
  
  free(arg5);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_fos_forward ( SEXP self, SEXP n, SEXP dp_x, SEXP dp_X, SEXP m, SEXP dp_y, SEXP dp_Y, SEXP s_swig_copy)
{
  int result;
  EDFobject *arg1 = (EDFobject *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_fos_forward" "', argument " "1"" of type '" "EDFobject *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject * >(argp1);
  arg2 = static_cast< int >(INTEGER(n)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_x);
      arg3 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg3[_rswigi] = REAL(dp_x)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_X);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(dp_X)[_rswigi];
      }
    }
  }
  arg5 = static_cast< int >(INTEGER(m)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_y);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(dp_y)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_Y);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(dp_Y)[_rswigi];
      }
    }
  }
  result = (int)(arg1)->fos_forward(arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,5));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_x);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_x)[_rswigi] = arg3[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_X);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_X)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_y);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_y)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_Y);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_Y)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  
  
  
  free(arg3);
  
  
  free(arg4);
  
  
  
  free(arg6);
  
  
  free(arg7);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_fov_forward ( SEXP self, SEXP n, SEXP dp_x, SEXP p, SEXP dpp_X, SEXP m, SEXP dp_y, SEXP dpp_Y, SEXP s_swig_copy)
{
  int result;
  EDFobject *arg1 = (EDFobject *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double **arg5 = (double **) 0 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  double **arg8 = (double **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_fov_forward" "', argument " "1"" of type '" "EDFobject *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject * >(argp1);
  arg2 = static_cast< int >(INTEGER(n)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_x);
      arg3 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg3[_rswigi] = REAL(dp_x)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(p)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(dpp_X, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg5 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg5_ltmp = reinterpret_cast< double * >(arg5 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg5[_rswigi] = arg5_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg5[_rswigi][_rswigj] =  REAL(dpp_X)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  arg6 = static_cast< int >(INTEGER(m)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_y);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(dp_y)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(dpp_Y, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg8 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg8_ltmp = reinterpret_cast< double * >(arg8 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg8[_rswigi] = arg8_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg8[_rswigi][_rswigj] =  REAL(dpp_Y)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)(arg1)->fov_forward(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,5));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_x);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_x)[_rswigi] = arg3[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(dpp_X, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(dpp_X)[_rswigi*_rswiglen1+_rswigj] = arg5[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_y);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_y)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(dpp_Y, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(dpp_Y)[_rswigi*_rswiglen1+_rswigj] = arg8[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  free(arg3);
  
  
  
  free(arg5);
  
  
  
  free(arg7);
  
  
  free(arg8);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_fos_reverse ( SEXP self, SEXP m, SEXP dp_U, SEXP n, SEXP dp_Z, SEXP dp_x, SEXP dp_y, SEXP s_swig_copy)
{
  int result;
  EDFobject *arg1 = (EDFobject *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_fos_reverse" "', argument " "1"" of type '" "EDFobject *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject * >(argp1);
  arg2 = static_cast< int >(INTEGER(m)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_U);
      arg3 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg3[_rswigi] = REAL(dp_U)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(n)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_Z);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(dp_Z)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_x);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(dp_x)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_y);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(dp_y)[_rswigi];
      }
    }
  }
  result = (int)(arg1)->fos_reverse(arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,5));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_U);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_U)[_rswigi] = arg3[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_Z);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_Z)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_x);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_x)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_y);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_y)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  
  
  
  free(arg3);
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  
  free(arg7);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_fov_reverse ( SEXP self, SEXP m, SEXP p, SEXP dpp_U, SEXP n, SEXP dpp_Z, SEXP dp_x, SEXP dp_y, SEXP s_swig_copy)
{
  int result;
  EDFobject *arg1 = (EDFobject *) 0 ;
  int arg2 ;
  int arg3 ;
  double **arg4 = (double **) 0 ;
  int arg5 ;
  double **arg6 = (double **) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_fov_reverse" "', argument " "1"" of type '" "EDFobject *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject * >(argp1);
  arg2 = static_cast< int >(INTEGER(m)[0]);
  arg3 = static_cast< int >(INTEGER(p)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(dpp_U, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg4 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg4_ltmp = reinterpret_cast< double * >(arg4 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg4[_rswigi] = arg4_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg4[_rswigi][_rswigj] =  REAL(dpp_U)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  arg5 = static_cast< int >(INTEGER(n)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(dpp_Z, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(dpp_Z)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_x);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(dp_x)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_y);
      arg8 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg8[_rswigi] = REAL(dp_y)[_rswigi];
      }
    }
  }
  result = (int)(arg1)->fov_reverse(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,5));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(dpp_U, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(dpp_U)[_rswigi*_rswiglen1+_rswigj] = arg4[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(dpp_Z, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(dpp_Z)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_x);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_x)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_y);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_y)[_rswigi] = arg8[_rswigi];
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  
  free(arg6);
  
  
  free(arg7);
  
  
  free(arg8);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_call__SWIG_0 ( SEXP self, SEXP n, SEXP xa, SEXP m, SEXP ya, SEXP s_swig_copy)
{
  int result;
  EDFobject *arg1 = (EDFobject *) 0 ;
  int arg2 ;
  adouble *arg3 = (adouble *) 0 ;
  int arg4 ;
  adouble *arg5 = (adouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_call" "', argument " "1"" of type '" "EDFobject *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject * >(argp1);
  arg2 = static_cast< int >(INTEGER(n)[0]);
  res3 = SWIG_R_ConvertPtr(xa, &argp3, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EDFobject_call" "', argument " "3"" of type '" "adouble *""'"); 
  }
  arg3 = reinterpret_cast< adouble * >(argp3);
  arg4 = static_cast< int >(INTEGER(m)[0]);
  res5 = SWIG_R_ConvertPtr(ya, &argp5, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "EDFobject_call" "', argument " "5"" of type '" "adouble *""'"); 
  }
  arg5 = reinterpret_cast< adouble * >(argp5);
  result = (int)(arg1)->call(arg2,arg3,arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_call__SWIG_1 ( SEXP self, SEXP n, SEXP x, SEXP m, SEXP y, SEXP s_swig_copy)
{
  int result;
  EDFobject *arg1 = (EDFobject *) 0 ;
  int arg2 ;
  advector *arg3 = 0 ;
  int arg4 ;
  advector *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_call" "', argument " "1"" of type '" "EDFobject *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject * >(argp1);
  arg2 = static_cast< int >(INTEGER(n)[0]);
  res3 = SWIG_R_ConvertPtr(x, &argp3, SWIGTYPE_p_advector,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "EDFobject_call" "', argument " "3"" of type '" "advector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDFobject_call" "', argument " "3"" of type '" "advector &""'"); 
  }
  arg3 = reinterpret_cast< advector * >(argp3);
  arg4 = static_cast< int >(INTEGER(m)[0]);
  res5 = SWIG_R_ConvertPtr(y, &argp5, SWIGTYPE_p_advector,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "EDFobject_call" "', argument " "5"" of type '" "advector &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDFobject_call" "', argument " "5"" of type '" "advector &""'"); 
  }
  arg5 = reinterpret_cast< advector * >(argp5);
  result = (int)(arg1)->call(arg2,*arg3,arg4,*arg5);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_EDFobject_iArr ( SEXP self)
{
  EDFobject_iArr *arg1 = (EDFobject_iArr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject_iArr, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EDFobject_iArr" "', argument " "1"" of type '" "EDFobject_iArr *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject_iArr * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_iArr_eval_func ( SEXP self, SEXP iArrLength, SEXP iArr, SEXP n, SEXP x, SEXP m, SEXP y, SEXP s_swig_copy)
{
  int result;
  EDFobject_iArr *arg1 = (EDFobject_iArr *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject_iArr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_iArr_eval_func" "', argument " "1"" of type '" "EDFobject_iArr *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject_iArr * >(argp1);
  arg2 = static_cast< int >(INTEGER(iArrLength)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(iArr);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(iArr)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(n)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(x);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(x)[_rswigi];
      }
    }
  }
  arg6 = static_cast< int >(INTEGER(m)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(y);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(y)[_rswigi];
      }
    }
  }
  result = (int)(arg1)->function(arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(x);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(x)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(y);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(y)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  
  
  
  free(arg3);
  
  
  
  free(arg5);
  
  
  
  free(arg7);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_iArr_zos_forward ( SEXP self, SEXP iArrLength, SEXP iArr, SEXP n, SEXP x, SEXP m, SEXP y, SEXP s_swig_copy)
{
  int result;
  EDFobject_iArr *arg1 = (EDFobject_iArr *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject_iArr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_iArr_zos_forward" "', argument " "1"" of type '" "EDFobject_iArr *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject_iArr * >(argp1);
  arg2 = static_cast< int >(INTEGER(iArrLength)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(iArr);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(iArr)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(n)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(x);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(x)[_rswigi];
      }
    }
  }
  arg6 = static_cast< int >(INTEGER(m)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(y);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(y)[_rswigi];
      }
    }
  }
  result = (int)(arg1)->zos_forward(arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(x);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(x)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(y);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(y)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  
  
  
  free(arg3);
  
  
  
  free(arg5);
  
  
  
  free(arg7);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_iArr_fos_forward ( SEXP self, SEXP iArrLength, SEXP iArr, SEXP n, SEXP dp_x, SEXP dp_X, SEXP m, SEXP dp_y, SEXP dp_Y, SEXP s_swig_copy)
{
  int result;
  EDFobject_iArr *arg1 = (EDFobject_iArr *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int arg7 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject_iArr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_iArr_fos_forward" "', argument " "1"" of type '" "EDFobject_iArr *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject_iArr * >(argp1);
  arg2 = static_cast< int >(INTEGER(iArrLength)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(iArr);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(iArr)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(n)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_x);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(dp_x)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_X);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(dp_X)[_rswigi];
      }
    }
  }
  arg7 = static_cast< int >(INTEGER(m)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_y);
      arg8 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg8[_rswigi] = REAL(dp_y)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_Y);
      arg9 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg9[_rswigi] = REAL(dp_Y)[_rswigi];
      }
    }
  }
  result = (int)(arg1)->fos_forward(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,5));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_x);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_x)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_X);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_X)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_y);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_y)[_rswigi] = arg8[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_Y);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_Y)[_rswigi] = arg9[_rswigi];
      }
    }
  }
  
  
  
  free(arg3);
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  
  
  free(arg8);
  
  
  free(arg9);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_iArr_fov_forward ( SEXP self, SEXP iArrLength, SEXP iArr, SEXP n, SEXP dp_x, SEXP p, SEXP dpp_X, SEXP m, SEXP dp_y, SEXP dpp_Y, SEXP s_swig_copy)
{
  int result;
  EDFobject_iArr *arg1 = (EDFobject_iArr *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  double **arg7 = (double **) 0 ;
  int arg8 ;
  double *arg9 = (double *) 0 ;
  double **arg10 = (double **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject_iArr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_iArr_fov_forward" "', argument " "1"" of type '" "EDFobject_iArr *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject_iArr * >(argp1);
  arg2 = static_cast< int >(INTEGER(iArrLength)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(iArr);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(iArr)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(n)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_x);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(dp_x)[_rswigi];
      }
    }
  }
  arg6 = static_cast< int >(INTEGER(p)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(dpp_X, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg7 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg7_ltmp = reinterpret_cast< double * >(arg7 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg7[_rswigi] = arg7_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg7[_rswigi][_rswigj] =  REAL(dpp_X)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  arg8 = static_cast< int >(INTEGER(m)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_y);
      arg9 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg9[_rswigi] = REAL(dp_y)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(dpp_Y, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg10 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg10_ltmp = reinterpret_cast< double * >(arg10 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg10[_rswigi] = arg10_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg10[_rswigi][_rswigj] =  REAL(dpp_Y)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)(arg1)->fov_forward(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,5));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_x);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_x)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(dpp_X, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(dpp_X)[_rswigi*_rswiglen1+_rswigj] = arg7[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_y);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_y)[_rswigi] = arg9[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(dpp_Y, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(dpp_Y)[_rswigi*_rswiglen1+_rswigj] = arg10[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  free(arg3);
  
  
  
  free(arg5);
  
  
  
  free(arg7);
  
  
  
  free(arg9);
  
  
  free(arg10);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_iArr_fos_reverse ( SEXP self, SEXP iArrLength, SEXP iArr, SEXP m, SEXP dp_U, SEXP n, SEXP dp_Z, SEXP dp_x, SEXP dp_y, SEXP s_swig_copy)
{
  int result;
  EDFobject_iArr *arg1 = (EDFobject_iArr *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject_iArr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_iArr_fos_reverse" "', argument " "1"" of type '" "EDFobject_iArr *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject_iArr * >(argp1);
  arg2 = static_cast< int >(INTEGER(iArrLength)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(iArr);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(iArr)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(m)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_U);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(dp_U)[_rswigi];
      }
    }
  }
  arg6 = static_cast< int >(INTEGER(n)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_Z);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(dp_Z)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_x);
      arg8 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg8[_rswigi] = REAL(dp_x)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_y);
      arg9 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg9[_rswigi] = REAL(dp_y)[_rswigi];
      }
    }
  }
  result = (int)(arg1)->fos_reverse(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,5));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_U);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_U)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_Z);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_Z)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_x);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_x)[_rswigi] = arg8[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_y);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_y)[_rswigi] = arg9[_rswigi];
      }
    }
  }
  
  
  
  free(arg3);
  
  
  
  free(arg5);
  
  
  
  free(arg7);
  
  
  free(arg8);
  
  
  free(arg9);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_iArr_fov_reverse ( SEXP self, SEXP iArrLength, SEXP iArr, SEXP m, SEXP p, SEXP dpp_U, SEXP n, SEXP dpp_Z, SEXP dp_x, SEXP dp_y, SEXP s_swig_copy)
{
  int result;
  EDFobject_iArr *arg1 = (EDFobject_iArr *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  double **arg6 = (double **) 0 ;
  int arg7 ;
  double **arg8 = (double **) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject_iArr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_iArr_fov_reverse" "', argument " "1"" of type '" "EDFobject_iArr *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject_iArr * >(argp1);
  arg2 = static_cast< int >(INTEGER(iArrLength)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(iArr);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(iArr)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(m)[0]);
  arg5 = static_cast< int >(INTEGER(p)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(dpp_U, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(dpp_U)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  arg7 = static_cast< int >(INTEGER(n)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(dpp_Z, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg8 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg8_ltmp = reinterpret_cast< double * >(arg8 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg8[_rswigi] = arg8_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg8[_rswigi][_rswigj] =  REAL(dpp_Z)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_x);
      arg9 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg9[_rswigi] = REAL(dp_x)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_y);
      arg10 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg10[_rswigi] = REAL(dp_y)[_rswigi];
      }
    }
  }
  result = (int)(arg1)->fov_reverse(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,5));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(dpp_U, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(dpp_U)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(dpp_Z, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(dpp_Z)[_rswigi*_rswiglen1+_rswigj] = arg8[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_x);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_x)[_rswigi] = arg9[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(dp_y);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(dp_y)[_rswigi] = arg10[_rswigi];
      }
    }
  }
  
  
  
  free(arg3);
  
  
  
  
  free(arg6);
  
  
  
  free(arg8);
  
  
  free(arg9);
  
  
  free(arg10);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_iArr_call__SWIG_0 ( SEXP self, SEXP iArrLength, SEXP iArr, SEXP n, SEXP xa, SEXP m, SEXP ya, SEXP s_swig_copy)
{
  int result;
  EDFobject_iArr *arg1 = (EDFobject_iArr *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  adouble *arg5 = (adouble *) 0 ;
  int arg6 ;
  adouble *arg7 = (adouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject_iArr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_iArr_call" "', argument " "1"" of type '" "EDFobject_iArr *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject_iArr * >(argp1);
  arg2 = static_cast< int >(INTEGER(iArrLength)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(iArr);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(iArr)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(n)[0]);
  res5 = SWIG_R_ConvertPtr(xa, &argp5, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "EDFobject_iArr_call" "', argument " "5"" of type '" "adouble *""'"); 
  }
  arg5 = reinterpret_cast< adouble * >(argp5);
  arg6 = static_cast< int >(INTEGER(m)[0]);
  res7 = SWIG_R_ConvertPtr(ya, &argp7, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "EDFobject_iArr_call" "', argument " "7"" of type '" "adouble *""'"); 
  }
  arg7 = reinterpret_cast< adouble * >(argp7);
  result = (int)(arg1)->call(arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  free(arg3);
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_iArr_call__SWIG_1 ( SEXP self, SEXP iArrLength, SEXP iArr, SEXP n, SEXP x, SEXP m, SEXP y, SEXP s_swig_copy)
{
  int result;
  EDFobject_iArr *arg1 = (EDFobject_iArr *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  advector *arg5 = 0 ;
  int arg6 ;
  advector *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject_iArr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_iArr_call" "', argument " "1"" of type '" "EDFobject_iArr *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject_iArr * >(argp1);
  arg2 = static_cast< int >(INTEGER(iArrLength)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(iArr);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(iArr)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(n)[0]);
  res5 = SWIG_R_ConvertPtr(x, &argp5, SWIGTYPE_p_advector,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "EDFobject_iArr_call" "', argument " "5"" of type '" "advector &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDFobject_iArr_call" "', argument " "5"" of type '" "advector &""'"); 
  }
  arg5 = reinterpret_cast< advector * >(argp5);
  arg6 = static_cast< int >(INTEGER(m)[0]);
  res7 = SWIG_R_ConvertPtr(y, &argp7, SWIGTYPE_p_advector,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "EDFobject_iArr_call" "', argument " "7"" of type '" "advector &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EDFobject_iArr_call" "', argument " "7"" of type '" "advector &""'"); 
  }
  arg7 = reinterpret_cast< advector * >(argp7);
  result = (int)(arg1)->call(arg2,arg3,arg4,*arg5,arg6,*arg7);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  free(arg3);
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_EDFobject_v2 ( SEXP self)
{
  EDFobject_v2 *arg1 = (EDFobject_v2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject_v2, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EDFobject_v2" "', argument " "1"" of type '" "EDFobject_v2 *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject_v2 * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_v2_eval_func ( SEXP self, SEXP iArrLen, SEXP iArr, SEXP nin, SEXP nout, SEXP insz, SEXP x, SEXP outsz, SEXP y, SEXP ctx, SEXP s_swig_copy)
{
  int result;
  EDFobject_v2 *arg1 = (EDFobject_v2 *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  double **arg7 = (double **) 0 ;
  int *arg8 = (int *) 0 ;
  double **arg9 = (double **) 0 ;
  void *arg10 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res10 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject_v2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_v2_eval_func" "', argument " "1"" of type '" "EDFobject_v2 *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject_v2 * >(argp1);
  arg2 = static_cast< int >(INTEGER(iArrLen)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(iArr);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(iArr)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(nin)[0]);
  arg5 = static_cast< int >(INTEGER(nout)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(insz);
      arg6 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg6[_rswigi] = INTEGER(insz)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(x, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg7 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg7_ltmp = reinterpret_cast< double * >(arg7 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg7[_rswigi] = arg7_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg7[_rswigi][_rswigj] =  REAL(x)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(outsz);
      arg8 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg8[_rswigi] = INTEGER(outsz)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(y, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg9 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg9_ltmp = reinterpret_cast< double * >(arg9 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg9[_rswigi] = arg9_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg9[_rswigi][_rswigj] =  REAL(y)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  res10 = SWIG_R_ConvertPtr(ctx, SWIG_as_voidptrptr(&arg10), 0, 0);
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "EDFobject_v2_eval_func" "', argument " "10"" of type '" "void *""'"); 
  }
  result = (int)(arg1)->function(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(x, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(x)[_rswigi*_rswiglen1+_rswigj] = arg7[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(y, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(y)[_rswigi*_rswiglen1+_rswigj] = arg9[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  free(arg3);
  
  
  
  
  free(arg6);
  
  
  free(arg7);
  
  
  free(arg8);
  
  
  free(arg9);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_v2_zos_forward ( SEXP self, SEXP iArrLen, SEXP iArr, SEXP nin, SEXP nout, SEXP insz, SEXP x, SEXP outsz, SEXP y, SEXP ctx, SEXP s_swig_copy)
{
  int result;
  EDFobject_v2 *arg1 = (EDFobject_v2 *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  double **arg7 = (double **) 0 ;
  int *arg8 = (int *) 0 ;
  double **arg9 = (double **) 0 ;
  void *arg10 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res10 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject_v2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_v2_zos_forward" "', argument " "1"" of type '" "EDFobject_v2 *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject_v2 * >(argp1);
  arg2 = static_cast< int >(INTEGER(iArrLen)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(iArr);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(iArr)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(nin)[0]);
  arg5 = static_cast< int >(INTEGER(nout)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(insz);
      arg6 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg6[_rswigi] = INTEGER(insz)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(x, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg7 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg7_ltmp = reinterpret_cast< double * >(arg7 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg7[_rswigi] = arg7_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg7[_rswigi][_rswigj] =  REAL(x)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(outsz);
      arg8 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg8[_rswigi] = INTEGER(outsz)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(y, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg9 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg9_ltmp = reinterpret_cast< double * >(arg9 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg9[_rswigi] = arg9_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg9[_rswigi][_rswigj] =  REAL(y)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  res10 = SWIG_R_ConvertPtr(ctx, SWIG_as_voidptrptr(&arg10), 0, 0);
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "EDFobject_v2_zos_forward" "', argument " "10"" of type '" "void *""'"); 
  }
  result = (int)(arg1)->zos_forward(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(x, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(x)[_rswigi*_rswiglen1+_rswigj] = arg7[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(y, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(y)[_rswigi*_rswiglen1+_rswigj] = arg9[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  free(arg3);
  
  
  
  
  free(arg6);
  
  
  free(arg7);
  
  
  free(arg8);
  
  
  free(arg9);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_v2_fos_forward ( SEXP self, SEXP iArrLen, SEXP iArr, SEXP nin, SEXP nout, SEXP insz, SEXP x, SEXP xp, SEXP outsz, SEXP y, SEXP yp, SEXP ctx, SEXP s_swig_copy)
{
  int result;
  EDFobject_v2 *arg1 = (EDFobject_v2 *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  double **arg7 = (double **) 0 ;
  double **arg8 = (double **) 0 ;
  int *arg9 = (int *) 0 ;
  double **arg10 = (double **) 0 ;
  double **arg11 = (double **) 0 ;
  void *arg12 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res12 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject_v2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_v2_fos_forward" "', argument " "1"" of type '" "EDFobject_v2 *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject_v2 * >(argp1);
  arg2 = static_cast< int >(INTEGER(iArrLen)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(iArr);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(iArr)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(nin)[0]);
  arg5 = static_cast< int >(INTEGER(nout)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(insz);
      arg6 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg6[_rswigi] = INTEGER(insz)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(x, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg7 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg7_ltmp = reinterpret_cast< double * >(arg7 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg7[_rswigi] = arg7_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg7[_rswigi][_rswigj] =  REAL(x)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(xp, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg8 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg8_ltmp = reinterpret_cast< double * >(arg8 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg8[_rswigi] = arg8_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg8[_rswigi][_rswigj] =  REAL(xp)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(outsz);
      arg9 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg9[_rswigi] = INTEGER(outsz)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(y, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg10 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg10_ltmp = reinterpret_cast< double * >(arg10 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg10[_rswigi] = arg10_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg10[_rswigi][_rswigj] =  REAL(y)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(yp, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg11 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg11_ltmp = reinterpret_cast< double * >(arg11 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg11[_rswigi] = arg11_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg11[_rswigi][_rswigj] =  REAL(yp)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  res12 = SWIG_R_ConvertPtr(ctx, SWIG_as_voidptrptr(&arg12), 0, 0);
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "EDFobject_v2_fos_forward" "', argument " "12"" of type '" "void *""'"); 
  }
  result = (int)(arg1)->fos_forward(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,5));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(x, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(x)[_rswigi*_rswiglen1+_rswigj] = arg7[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(xp, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(xp)[_rswigi*_rswiglen1+_rswigj] = arg8[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(y, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(y)[_rswigi*_rswiglen1+_rswigj] = arg10[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(yp, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(yp)[_rswigi*_rswiglen1+_rswigj] = arg11[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  free(arg3);
  
  
  
  
  free(arg6);
  
  
  free(arg7);
  
  
  free(arg8);
  
  
  free(arg9);
  
  
  free(arg10);
  
  
  free(arg11);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_v2_fov_forward ( SEXP self, SEXP iArrLen, SEXP iArr, SEXP nin, SEXP nout, SEXP insz, SEXP x, SEXP ndir, SEXP Xp, SEXP outsz, SEXP y, SEXP Yp, SEXP ctx, SEXP s_swig_copy)
{
  int result;
  EDFobject_v2 *arg1 = (EDFobject_v2 *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  double **arg7 = (double **) 0 ;
  int arg8 ;
  double ***arg9 = (double ***) 0 ;
  int *arg10 = (int *) 0 ;
  double **arg11 = (double **) 0 ;
  double ***arg12 = (double ***) 0 ;
  void *arg13 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  int res13 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject_v2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_v2_fov_forward" "', argument " "1"" of type '" "EDFobject_v2 *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject_v2 * >(argp1);
  arg2 = static_cast< int >(INTEGER(iArrLen)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(iArr);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(iArr)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(nin)[0]);
  arg5 = static_cast< int >(INTEGER(nout)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(insz);
      arg6 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg6[_rswigi] = INTEGER(insz)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(x, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg7 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg7_ltmp = reinterpret_cast< double * >(arg7 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg7[_rswigi] = arg7_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg7[_rswigi][_rswigj] =  REAL(x)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  arg8 = static_cast< int >(INTEGER(ndir)[0]);
  res9 = SWIG_R_ConvertPtr(Xp, &argp9, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "EDFobject_v2_fov_forward" "', argument " "9"" of type '" "double ***""'"); 
  }
  arg9 = reinterpret_cast< double *** >(argp9);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(outsz);
      arg10 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg10[_rswigi] = INTEGER(outsz)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(y, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg11 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg11_ltmp = reinterpret_cast< double * >(arg11 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg11[_rswigi] = arg11_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg11[_rswigi][_rswigj] =  REAL(y)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  res12 = SWIG_R_ConvertPtr(Yp, &argp12, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "EDFobject_v2_fov_forward" "', argument " "12"" of type '" "double ***""'"); 
  }
  arg12 = reinterpret_cast< double *** >(argp12);
  res13 = SWIG_R_ConvertPtr(ctx, SWIG_as_voidptrptr(&arg13), 0, 0);
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "EDFobject_v2_fov_forward" "', argument " "13"" of type '" "void *""'"); 
  }
  result = (int)(arg1)->fov_forward(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(x, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(x)[_rswigi*_rswiglen1+_rswigj] = arg7[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(y, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(y)[_rswigi*_rswiglen1+_rswigj] = arg11[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  free(arg3);
  
  
  
  
  free(arg6);
  
  
  free(arg7);
  
  
  
  
  free(arg10);
  
  
  free(arg11);
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_v2_fos_reverse ( SEXP self, SEXP iArrLen, SEXP iArr, SEXP nout, SEXP nin, SEXP outsz, SEXP up, SEXP insz, SEXP zp, SEXP x, SEXP y, SEXP ctx, SEXP s_swig_copy)
{
  int result;
  EDFobject_v2 *arg1 = (EDFobject_v2 *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  double **arg7 = (double **) 0 ;
  int *arg8 = (int *) 0 ;
  double **arg9 = (double **) 0 ;
  double **arg10 = (double **) 0 ;
  double **arg11 = (double **) 0 ;
  void *arg12 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res12 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject_v2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_v2_fos_reverse" "', argument " "1"" of type '" "EDFobject_v2 *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject_v2 * >(argp1);
  arg2 = static_cast< int >(INTEGER(iArrLen)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(iArr);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(iArr)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(nout)[0]);
  arg5 = static_cast< int >(INTEGER(nin)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(outsz);
      arg6 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg6[_rswigi] = INTEGER(outsz)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(up, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg7 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg7_ltmp = reinterpret_cast< double * >(arg7 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg7[_rswigi] = arg7_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg7[_rswigi][_rswigj] =  REAL(up)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(insz);
      arg8 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg8[_rswigi] = INTEGER(insz)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(zp, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg9 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg9_ltmp = reinterpret_cast< double * >(arg9 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg9[_rswigi] = arg9_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg9[_rswigi][_rswigj] =  REAL(zp)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(x, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg10 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg10_ltmp = reinterpret_cast< double * >(arg10 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg10[_rswigi] = arg10_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg10[_rswigi][_rswigj] =  REAL(x)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(y, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg11 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg11_ltmp = reinterpret_cast< double * >(arg11 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg11[_rswigi] = arg11_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg11[_rswigi][_rswigj] =  REAL(y)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  res12 = SWIG_R_ConvertPtr(ctx, SWIG_as_voidptrptr(&arg12), 0, 0);
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "EDFobject_v2_fos_reverse" "', argument " "12"" of type '" "void *""'"); 
  }
  result = (int)(arg1)->fos_reverse(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,5));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(up, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(up)[_rswigi*_rswiglen1+_rswigj] = arg7[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(zp, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(zp)[_rswigi*_rswiglen1+_rswigj] = arg9[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(x, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(x)[_rswigi*_rswiglen1+_rswigj] = arg10[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(y, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(y)[_rswigi*_rswiglen1+_rswigj] = arg11[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  free(arg3);
  
  
  
  
  free(arg6);
  
  
  free(arg7);
  
  
  free(arg8);
  
  
  free(arg9);
  
  
  free(arg10);
  
  
  free(arg11);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_v2_fov_reverse ( SEXP self, SEXP iArrLen, SEXP iArr, SEXP nout, SEXP nin, SEXP outsz, SEXP dir, SEXP Up, SEXP insz, SEXP Zp, SEXP x, SEXP y, SEXP ctx, SEXP s_swig_copy)
{
  int result;
  EDFobject_v2 *arg1 = (EDFobject_v2 *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int arg7 ;
  double ***arg8 = (double ***) 0 ;
  int *arg9 = (int *) 0 ;
  double ***arg10 = (double ***) 0 ;
  double **arg11 = (double **) 0 ;
  double **arg12 = (double **) 0 ;
  void *arg13 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  int res13 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject_v2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_v2_fov_reverse" "', argument " "1"" of type '" "EDFobject_v2 *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject_v2 * >(argp1);
  arg2 = static_cast< int >(INTEGER(iArrLen)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(iArr);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(iArr)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(nout)[0]);
  arg5 = static_cast< int >(INTEGER(nin)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(outsz);
      arg6 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg6[_rswigi] = INTEGER(outsz)[_rswigi];
      }
    }
  }
  arg7 = static_cast< int >(INTEGER(dir)[0]);
  res8 = SWIG_R_ConvertPtr(Up, &argp8, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "EDFobject_v2_fov_reverse" "', argument " "8"" of type '" "double ***""'"); 
  }
  arg8 = reinterpret_cast< double *** >(argp8);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(insz);
      arg9 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg9[_rswigi] = INTEGER(insz)[_rswigi];
      }
    }
  }
  res10 = SWIG_R_ConvertPtr(Zp, &argp10, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "EDFobject_v2_fov_reverse" "', argument " "10"" of type '" "double ***""'"); 
  }
  arg10 = reinterpret_cast< double *** >(argp10);
  {
    {
      SEXP r_dim = Rf_getAttrib(x, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg11 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg11_ltmp = reinterpret_cast< double * >(arg11 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg11[_rswigi] = arg11_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg11[_rswigi][_rswigj] =  REAL(x)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(y, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg12 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg12_ltmp = reinterpret_cast< double * >(arg12 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg12[_rswigi] = arg12_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg12[_rswigi][_rswigj] =  REAL(y)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  res13 = SWIG_R_ConvertPtr(ctx, SWIG_as_voidptrptr(&arg13), 0, 0);
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "EDFobject_v2_fov_reverse" "', argument " "13"" of type '" "void *""'"); 
  }
  result = (int)(arg1)->fov_reverse(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(x, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(x)[_rswigi*_rswiglen1+_rswigj] = arg11[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(y, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(y)[_rswigi*_rswiglen1+_rswigj] = arg12[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  free(arg3);
  
  
  
  
  free(arg6);
  
  
  
  
  free(arg9);
  
  
  
  free(arg11);
  
  
  free(arg12);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_EDFobject_v2_call ( SEXP self, SEXP iArrLen, SEXP iArr, SEXP nin, SEXP nout, SEXP insz, SEXP x, SEXP outsz, SEXP y, SEXP s_swig_copy)
{
  int result;
  EDFobject_v2 *arg1 = (EDFobject_v2 *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  adouble **arg7 = (adouble **) 0 ;
  int *arg8 = (int *) 0 ;
  adouble **arg9 = (adouble **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_EDFobject_v2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EDFobject_v2_call" "', argument " "1"" of type '" "EDFobject_v2 *""'"); 
  }
  arg1 = reinterpret_cast< EDFobject_v2 * >(argp1);
  arg2 = static_cast< int >(INTEGER(iArrLen)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(iArr);
      arg3 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg3[_rswigi] = INTEGER(iArr)[_rswigi];
      }
    }
  }
  arg4 = static_cast< int >(INTEGER(nin)[0]);
  arg5 = static_cast< int >(INTEGER(nout)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(insz);
      arg6 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg6[_rswigi] = INTEGER(insz)[_rswigi];
      }
    }
  }
  res7 = SWIG_R_ConvertPtr(x, &argp7, SWIGTYPE_p_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "EDFobject_v2_call" "', argument " "7"" of type '" "adouble **""'"); 
  }
  arg7 = reinterpret_cast< adouble ** >(argp7);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(outsz);
      arg8 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg8[_rswigi] = INTEGER(outsz)[_rswigi];
      }
    }
  }
  res9 = SWIG_R_ConvertPtr(y, &argp9, SWIGTYPE_p_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "EDFobject_v2_call" "', argument " "9"" of type '" "adouble **""'"); 
  }
  arg9 = reinterpret_cast< adouble ** >(argp9);
  result = (int)(arg1)->call(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  free(arg3);
  
  
  
  
  free(arg6);
  
  
  
  free(arg8);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


int _p_f_int_p_adouble__int(int s_arg1, adouble * s_arg2) {
  int arg1 ;
  adouble *arg2 = (adouble *) 0 ;
  int result;
  RCallbackFunctionData *r_swig_cb_data = R_SWIG_getCallbackFunctionData();
  SEXP r_tmp;
  int r_nprotect = 0;
  char * r_vmax= 0;
  int ecode = 0;
  
  Rf_protect(r_swig_cb_data->expr = Rf_allocVector(LANGSXP, 3));
  r_nprotect++;
  r_swig_cb_data->el = r_swig_cb_data->expr;
  
  SETCAR(r_swig_cb_data->el, r_swig_cb_data->fun);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  r_tmp = Rf_ScalarInteger(s_arg1);
  SETCAR(r_swig_cb_data->el, r_tmp);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  r_tmp = SWIG_R_NewPointerObj(SWIG_as_voidptr(s_arg2), SWIGTYPE_p_adouble, R_SWIG_EXTERNAL |  0 );
  SETCAR(r_swig_cb_data->el, r_tmp);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  
  
  r_swig_cb_data->retValue = R_tryEval(r_swig_cb_data->expr, R_GlobalEnv, &r_swig_cb_data->errorOccurred);
  
  if(r_swig_cb_data->errorOccurred) {
    R_SWIG_popCallbackFunctionData(1);
    Rf_error("error in calling R function as a function pointer (_p_f_int_p_adouble__int)");
  }
  result = static_cast< int >(INTEGER(r_swig_cb_data->retValue)[0]);
  R_SWIG_popCallbackFunctionData(1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return result;
  
}


int _p_f_int_p_double__int(int s_arg1, double * s_arg2) {
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int result;
  RCallbackFunctionData *r_swig_cb_data = R_SWIG_getCallbackFunctionData();
  SEXP r_tmp;
  int r_nprotect = 0;
  char * r_vmax= 0;
  int ecode = 0;
  
  Rf_protect(r_swig_cb_data->expr = Rf_allocVector(LANGSXP, 3));
  r_nprotect++;
  r_swig_cb_data->el = r_swig_cb_data->expr;
  
  SETCAR(r_swig_cb_data->el, r_swig_cb_data->fun);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  r_tmp = Rf_ScalarInteger(s_arg1);
  SETCAR(r_swig_cb_data->el, r_tmp);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  r_tmp = SWIG_R_NewPointerObj(SWIG_as_voidptr(s_arg2), SWIGTYPE_p_double, R_SWIG_EXTERNAL |  0 );
  SETCAR(r_swig_cb_data->el, r_tmp);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  
  
  r_swig_cb_data->retValue = R_tryEval(r_swig_cb_data->expr, R_GlobalEnv, &r_swig_cb_data->errorOccurred);
  
  if(r_swig_cb_data->errorOccurred) {
    R_SWIG_popCallbackFunctionData(1);
    Rf_error("error in calling R function as a function pointer (_p_f_int_p_double__int)");
  }
  result = static_cast< int >(INTEGER(r_swig_cb_data->retValue)[0]);
  R_SWIG_popCallbackFunctionData(1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return result;
  
}


void * _p_f___p_void() {
  void *result = 0 ;
  RCallbackFunctionData *r_swig_cb_data = R_SWIG_getCallbackFunctionData();
  SEXP r_tmp;
  int r_nprotect = 0;
  char * r_vmax= 0;
  int ecode = 0;
  int res ;
  
  Rf_protect(r_swig_cb_data->expr = Rf_allocVector(LANGSXP, 1));
  r_nprotect++;
  r_swig_cb_data->el = r_swig_cb_data->expr;
  
  SETCAR(r_swig_cb_data->el, r_swig_cb_data->fun);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  
  
  r_swig_cb_data->retValue = R_tryEval(r_swig_cb_data->expr, R_GlobalEnv, &r_swig_cb_data->errorOccurred);
  
  if(r_swig_cb_data->errorOccurred) {
    R_SWIG_popCallbackFunctionData(1);
    Rf_error("error in calling R function as a function pointer (_p_f___p_void)");
  }
  res = SWIG_R_ConvertPtr(r_swig_cb_data->retValue, SWIG_as_voidptrptr(&result), 0, 0);
  if (!SWIG_IsOK(res)) {
    SWIG_exception_noreturn(SWIG_ArgError(res), "in method '" "$symname" "', argument " "$argnum"" of type '" "void *""'"); 
  }
  R_SWIG_popCallbackFunctionData(1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return result;
  
}


void _p_f_p_void__void(void * s_arg1) {
  void *arg1 = (void *) 0 ;
  RCallbackFunctionData *r_swig_cb_data = R_SWIG_getCallbackFunctionData();
  SEXP r_tmp;
  int r_nprotect = 0;
  char * r_vmax= 0;
  int ecode = 0;
  
  Rf_protect(r_swig_cb_data->expr = Rf_allocVector(LANGSXP, 2));
  r_nprotect++;
  r_swig_cb_data->el = r_swig_cb_data->expr;
  
  SETCAR(r_swig_cb_data->el, r_swig_cb_data->fun);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  r_tmp = SWIG_R_NewPointerObj(SWIG_as_voidptr(s_arg1), SWIGTYPE_p_void, R_SWIG_EXTERNAL |  0 );
  SETCAR(r_swig_cb_data->el, r_tmp);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  
  
  r_swig_cb_data->retValue = R_tryEval(r_swig_cb_data->expr, R_GlobalEnv, &r_swig_cb_data->errorOccurred);
  
  if(r_swig_cb_data->errorOccurred) {
    R_SWIG_popCallbackFunctionData(1);
    Rf_error("error in calling R function as a function pointer (_p_f_p_void__void)");
  }
  R_SWIG_popCallbackFunctionData(1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  
}


SWIGEXPORT SEXP
R_swig_reg_timestep_fct ( SEXP timeStepFunction)
{
  CpInfos *result = 0 ;
  ADOLC_TimeStepFuncion arg1 = (ADOLC_TimeStepFuncion) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    int res = SWIG_R_ConvertPtr(timeStepFunction, (void**)(&arg1), SWIGTYPE_p_f_int_p_adouble__int, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "reg_timestep_fct" "', argument " "1"" of type '" "ADOLC_TimeStepFuncion""'"); 
    }
  }
  result = (CpInfos *)reg_timestep_fct(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CpInfos, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_checkpointing ( SEXP cpInfos, SEXP s_swig_copy)
{
  int result;
  CpInfos *arg1 = (CpInfos *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(cpInfos, &argp1, SWIGTYPE_p_CpInfos, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "checkpointing" "', argument " "1"" of type '" "CpInfos *""'"); 
  }
  arg1 = reinterpret_cast< CpInfos * >(argp1);
  result = (int)checkpointing(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_reinit_checkpointing ( )
{
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  reinit_checkpointing();
  r_ans = R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_CP_Context ( SEXP tsf)
{
  CP_Context *result = 0 ;
  ADOLC_TimeStepFuncion arg1 = (ADOLC_TimeStepFuncion) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    int res = SWIG_R_ConvertPtr(tsf, (void**)(&arg1), SWIGTYPE_p_f_int_p_adouble__int, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_CP_Context" "', argument " "1"" of type '" "ADOLC_TimeStepFuncion""'"); 
    }
  }
  result = (CP_Context *)new CP_Context(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CP_Context, R_SWIG_OWNER |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_CP_Context ( SEXP self)
{
  CP_Context *arg1 = (CP_Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_CP_Context, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CP_Context" "', argument " "1"" of type '" "CP_Context *""'"); 
  }
  arg1 = reinterpret_cast< CP_Context * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_CP_Context_setDoubleFct ( SEXP self, SEXP tsf)
{
  CP_Context *arg1 = (CP_Context *) 0 ;
  ADOLC_TimeStepFuncion_double arg2 = (ADOLC_TimeStepFuncion_double) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_CP_Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CP_Context_setDoubleFct" "', argument " "1"" of type '" "CP_Context *""'"); 
  }
  arg1 = reinterpret_cast< CP_Context * >(argp1);
  {
    int res = SWIG_R_ConvertPtr(tsf, (void**)(&arg2), SWIGTYPE_p_f_int_p_double__int, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CP_Context_setDoubleFct" "', argument " "2"" of type '" "ADOLC_TimeStepFuncion_double""'"); 
    }
  }
  (arg1)->setDoubleFct(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_CP_Context_setSaveFct ( SEXP self, SEXP sf)
{
  CP_Context *arg1 = (CP_Context *) 0 ;
  ADOLC_saveFct arg2 = (ADOLC_saveFct) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_CP_Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CP_Context_setSaveFct" "', argument " "1"" of type '" "CP_Context *""'"); 
  }
  arg1 = reinterpret_cast< CP_Context * >(argp1);
  {
    int res = SWIG_R_ConvertPtr(sf, (void**)(&arg2), SWIGTYPE_p_f___p_void, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CP_Context_setSaveFct" "', argument " "2"" of type '" "ADOLC_saveFct""'"); 
    }
  }
  (arg1)->setSaveFct(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_CP_Context_setRestoreFct ( SEXP self, SEXP rf)
{
  CP_Context *arg1 = (CP_Context *) 0 ;
  ADOLC_restoreFct arg2 = (ADOLC_restoreFct) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_CP_Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CP_Context_setRestoreFct" "', argument " "1"" of type '" "CP_Context *""'"); 
  }
  arg1 = reinterpret_cast< CP_Context * >(argp1);
  {
    int res = SWIG_R_ConvertPtr(rf, (void**)(&arg2), SWIGTYPE_p_f_p_void__void, 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "CP_Context_setRestoreFct" "', argument " "2"" of type '" "ADOLC_restoreFct""'"); 
    }
  }
  (arg1)->setRestoreFct(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_CP_Context_setNumberOfSteps ( SEXP self, SEXP number)
{
  CP_Context *arg1 = (CP_Context *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_CP_Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CP_Context_setNumberOfSteps" "', argument " "1"" of type '" "CP_Context *""'"); 
  }
  arg1 = reinterpret_cast< CP_Context * >(argp1);
  arg2 = static_cast< int >(INTEGER(number)[0]);
  (arg1)->setNumberOfSteps(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_CP_Context_setNumberOfCheckpoints ( SEXP self, SEXP number)
{
  CP_Context *arg1 = (CP_Context *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_CP_Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CP_Context_setNumberOfCheckpoints" "', argument " "1"" of type '" "CP_Context *""'"); 
  }
  arg1 = reinterpret_cast< CP_Context * >(argp1);
  arg2 = static_cast< int >(INTEGER(number)[0]);
  (arg1)->setNumberOfCheckpoints(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_CP_Context_setTapeNumber ( SEXP self, SEXP tapeNumber)
{
  CP_Context *arg1 = (CP_Context *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_CP_Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CP_Context_setTapeNumber" "', argument " "1"" of type '" "CP_Context *""'"); 
  }
  arg1 = reinterpret_cast< CP_Context * >(argp1);
  arg2 = static_cast< int >(INTEGER(tapeNumber)[0]);
  (arg1)->setTapeNumber(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_CP_Context_setDimensionXY ( SEXP self, SEXP n)
{
  CP_Context *arg1 = (CP_Context *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_CP_Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CP_Context_setDimensionXY" "', argument " "1"" of type '" "CP_Context *""'"); 
  }
  arg1 = reinterpret_cast< CP_Context * >(argp1);
  arg2 = static_cast< int >(INTEGER(n)[0]);
  (arg1)->setDimensionXY(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_CP_Context_setInput ( SEXP self, SEXP x)
{
  CP_Context *arg1 = (CP_Context *) 0 ;
  adouble *arg2 = (adouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_CP_Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CP_Context_setInput" "', argument " "1"" of type '" "CP_Context *""'"); 
  }
  arg1 = reinterpret_cast< CP_Context * >(argp1);
  res2 = SWIG_R_ConvertPtr(x, &argp2, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CP_Context_setInput" "', argument " "2"" of type '" "adouble *""'"); 
  }
  arg2 = reinterpret_cast< adouble * >(argp2);
  (arg1)->setInput(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_CP_Context_setOutput ( SEXP self, SEXP y)
{
  CP_Context *arg1 = (CP_Context *) 0 ;
  adouble *arg2 = (adouble *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_CP_Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CP_Context_setOutput" "', argument " "1"" of type '" "CP_Context *""'"); 
  }
  arg1 = reinterpret_cast< CP_Context * >(argp1);
  res2 = SWIG_R_ConvertPtr(y, &argp2, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CP_Context_setOutput" "', argument " "2"" of type '" "adouble *""'"); 
  }
  arg2 = reinterpret_cast< adouble * >(argp2);
  (arg1)->setOutput(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_CP_Context_setAlwaysRetaping ( SEXP self, SEXP state)
{
  CP_Context *arg1 = (CP_Context *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_CP_Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CP_Context_setAlwaysRetaping" "', argument " "1"" of type '" "CP_Context *""'"); 
  }
  arg1 = reinterpret_cast< CP_Context * >(argp1);
  arg2 = LOGICAL(state)[0] ? true : false;
  (arg1)->setAlwaysRetaping(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_CP_Context_checkpointing ( SEXP self, SEXP s_swig_copy)
{
  int result;
  CP_Context *arg1 = (CP_Context *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_CP_Context, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CP_Context_checkpointing" "', argument " "1"" of type '" "CP_Context *""'"); 
  }
  arg1 = reinterpret_cast< CP_Context * >(argp1);
  result = (int)(arg1)->checkpointing();
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


int _p_f_p_double_p_double_p_double_int_int__int(double * s_arg1, double * s_arg2, double * s_arg3, int s_arg4, int s_arg5) {
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  int result;
  RCallbackFunctionData *r_swig_cb_data = R_SWIG_getCallbackFunctionData();
  SEXP r_tmp;
  int r_nprotect = 0;
  char * r_vmax= 0;
  int ecode = 0;
  
  Rf_protect(r_swig_cb_data->expr = Rf_allocVector(LANGSXP, 6));
  r_nprotect++;
  r_swig_cb_data->el = r_swig_cb_data->expr;
  
  SETCAR(r_swig_cb_data->el, r_swig_cb_data->fun);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  r_tmp = SWIG_R_NewPointerObj(SWIG_as_voidptr(s_arg1), SWIGTYPE_p_double, R_SWIG_EXTERNAL |  0 );
  SETCAR(r_swig_cb_data->el, r_tmp);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  r_tmp = SWIG_R_NewPointerObj(SWIG_as_voidptr(s_arg2), SWIGTYPE_p_double, R_SWIG_EXTERNAL |  0 );
  SETCAR(r_swig_cb_data->el, r_tmp);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  r_tmp = SWIG_R_NewPointerObj(SWIG_as_voidptr(s_arg3), SWIGTYPE_p_double, R_SWIG_EXTERNAL |  0 );
  SETCAR(r_swig_cb_data->el, r_tmp);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  r_tmp = Rf_ScalarInteger(s_arg4);
  SETCAR(r_swig_cb_data->el, r_tmp);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  r_tmp = Rf_ScalarInteger(s_arg5);
  SETCAR(r_swig_cb_data->el, r_tmp);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  
  
  r_swig_cb_data->retValue = R_tryEval(r_swig_cb_data->expr, R_GlobalEnv, &r_swig_cb_data->errorOccurred);
  
  if(r_swig_cb_data->errorOccurred) {
    R_SWIG_popCallbackFunctionData(1);
    Rf_error("error in calling R function as a function pointer (_p_f_p_double_p_double_p_double_int_int__int)");
  }
  result = static_cast< int >(INTEGER(r_swig_cb_data->retValue)[0]);
  R_SWIG_popCallbackFunctionData(1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return result;
  
}


int _p_f_p_adouble_p_adouble_p_adouble_int_int__int(adouble * s_arg1, adouble * s_arg2, adouble * s_arg3, int s_arg4, int s_arg5) {
  adouble *arg1 = (adouble *) 0 ;
  adouble *arg2 = (adouble *) 0 ;
  adouble *arg3 = (adouble *) 0 ;
  int arg4 ;
  int arg5 ;
  int result;
  RCallbackFunctionData *r_swig_cb_data = R_SWIG_getCallbackFunctionData();
  SEXP r_tmp;
  int r_nprotect = 0;
  char * r_vmax= 0;
  int ecode = 0;
  
  Rf_protect(r_swig_cb_data->expr = Rf_allocVector(LANGSXP, 6));
  r_nprotect++;
  r_swig_cb_data->el = r_swig_cb_data->expr;
  
  SETCAR(r_swig_cb_data->el, r_swig_cb_data->fun);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  r_tmp = SWIG_R_NewPointerObj(SWIG_as_voidptr(s_arg1), SWIGTYPE_p_adouble, R_SWIG_EXTERNAL |  0 );
  SETCAR(r_swig_cb_data->el, r_tmp);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  r_tmp = SWIG_R_NewPointerObj(SWIG_as_voidptr(s_arg2), SWIGTYPE_p_adouble, R_SWIG_EXTERNAL |  0 );
  SETCAR(r_swig_cb_data->el, r_tmp);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  r_tmp = SWIG_R_NewPointerObj(SWIG_as_voidptr(s_arg3), SWIGTYPE_p_adouble, R_SWIG_EXTERNAL |  0 );
  SETCAR(r_swig_cb_data->el, r_tmp);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  r_tmp = Rf_ScalarInteger(s_arg4);
  SETCAR(r_swig_cb_data->el, r_tmp);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  r_tmp = Rf_ScalarInteger(s_arg5);
  SETCAR(r_swig_cb_data->el, r_tmp);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  
  
  r_swig_cb_data->retValue = R_tryEval(r_swig_cb_data->expr, R_GlobalEnv, &r_swig_cb_data->errorOccurred);
  
  if(r_swig_cb_data->errorOccurred) {
    R_SWIG_popCallbackFunctionData(1);
    Rf_error("error in calling R function as a function pointer (_p_f_p_adouble_p_adouble_p_adouble_int_int__int)");
  }
  result = static_cast< int >(INTEGER(r_swig_cb_data->retValue)[0]);
  R_SWIG_popCallbackFunctionData(1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return result;
  
}


double _p_f_p_double_int__double(double * s_arg1, int s_arg2) {
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double result;
  RCallbackFunctionData *r_swig_cb_data = R_SWIG_getCallbackFunctionData();
  SEXP r_tmp;
  int r_nprotect = 0;
  char * r_vmax= 0;
  int ecode = 0;
  
  Rf_protect(r_swig_cb_data->expr = Rf_allocVector(LANGSXP, 3));
  r_nprotect++;
  r_swig_cb_data->el = r_swig_cb_data->expr;
  
  SETCAR(r_swig_cb_data->el, r_swig_cb_data->fun);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  r_tmp = SWIG_R_NewPointerObj(SWIG_as_voidptr(s_arg1), SWIGTYPE_p_double, R_SWIG_EXTERNAL |  0 );
  SETCAR(r_swig_cb_data->el, r_tmp);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  r_tmp = Rf_ScalarInteger(s_arg2);
  SETCAR(r_swig_cb_data->el, r_tmp);
  r_swig_cb_data->el = CDR(r_swig_cb_data->el);
  
  
  
  r_swig_cb_data->retValue = R_tryEval(r_swig_cb_data->expr, R_GlobalEnv, &r_swig_cb_data->errorOccurred);
  
  if(r_swig_cb_data->errorOccurred) {
    R_SWIG_popCallbackFunctionData(1);
    Rf_error("error in calling R function as a function pointer (_p_f_p_double_int__double)");
  }
  result = static_cast< double >(REAL(r_swig_cb_data->retValue)[0]);
  R_SWIG_popCallbackFunctionData(1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return result;
  
}


SWIGEXPORT SEXP
R_swig_fp_iteration ( SEXP sub_tape_num, SEXP double_F, SEXP adouble_F, SEXP norm, SEXP norm_deriv, SEXP epsilon, SEXP epsilon_deriv, SEXP N_max, SEXP N_max_deriv, SEXP x_0, SEXP u, SEXP x_fix, SEXP dim_x, SEXP dim_u, SEXP s_swig_copy)
{
  int result;
  int arg1 ;
  int (*arg2)(double *,double *,double *,int,int) = (int (*)(double *,double *,double *,int,int)) 0 ;
  int (*arg3)(adouble *,adouble *,adouble *,int,int) = (int (*)(adouble *,adouble *,adouble *,int,int)) 0 ;
  double (*arg4)(double *,int) = (double (*)(double *,int)) 0 ;
  double (*arg5)(double *,int) = (double (*)(double *,int)) 0 ;
  double arg6 ;
  double arg7 ;
  int arg8 ;
  int arg9 ;
  adouble *arg10 = (adouble *) 0 ;
  adouble *arg11 = (adouble *) 0 ;
  adouble *arg12 = (adouble *) 0 ;
  int arg13 ;
  int arg14 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(sub_tape_num)[0]);
  if(TYPEOF(double_F) != CLOSXP) {
    {
      int res = SWIG_R_ConvertPtr(double_F, (void**)(&arg2), SWIGTYPE_p_f_p_double_p_double_p_double_int_int__int, 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fp_iteration" "', argument " "2"" of type '" "int (*)(double *,double *,double *,int,int)""'"); 
      }
    }
  } else {
    arg2 = _p_f_p_double_p_double_p_double_int_int__int;
    R_SWIG_pushCallbackFunctionData(double_F, NULL);
  }
  if(TYPEOF(adouble_F) != CLOSXP) {
    {
      int res = SWIG_R_ConvertPtr(adouble_F, (void**)(&arg3), SWIGTYPE_p_f_p_adouble_p_adouble_p_adouble_int_int__int, 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fp_iteration" "', argument " "3"" of type '" "int (*)(adouble *,adouble *,adouble *,int,int)""'"); 
      }
    }
  } else {
    arg3 = _p_f_p_adouble_p_adouble_p_adouble_int_int__int;
    R_SWIG_pushCallbackFunctionData(adouble_F, NULL);
  }
  if(TYPEOF(norm) != CLOSXP) {
    {
      int res = SWIG_R_ConvertPtr(norm, (void**)(&arg4), SWIGTYPE_p_f_p_double_int__double, 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fp_iteration" "', argument " "4"" of type '" "double (*)(double *,int)""'"); 
      }
    }
  } else {
    arg4 = _p_f_p_double_int__double;
    R_SWIG_pushCallbackFunctionData(norm, NULL);
  }
  if(TYPEOF(norm_deriv) != CLOSXP) {
    {
      int res = SWIG_R_ConvertPtr(norm_deriv, (void**)(&arg5), SWIGTYPE_p_f_p_double_int__double, 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "in method '" "fp_iteration" "', argument " "5"" of type '" "double (*)(double *,int)""'"); 
      }
    }
  } else {
    arg5 = _p_f_p_double_int__double;
    R_SWIG_pushCallbackFunctionData(norm_deriv, NULL);
  }
  arg6 = static_cast< double >(REAL(epsilon)[0]);
  arg7 = static_cast< double >(REAL(epsilon_deriv)[0]);
  arg8 = static_cast< int >(INTEGER(N_max)[0]);
  arg9 = static_cast< int >(INTEGER(N_max_deriv)[0]);
  res10 = SWIG_R_ConvertPtr(x_0, &argp10, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "fp_iteration" "', argument " "10"" of type '" "adouble *""'"); 
  }
  arg10 = reinterpret_cast< adouble * >(argp10);
  res11 = SWIG_R_ConvertPtr(u, &argp11, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "fp_iteration" "', argument " "11"" of type '" "adouble *""'"); 
  }
  arg11 = reinterpret_cast< adouble * >(argp11);
  res12 = SWIG_R_ConvertPtr(x_fix, &argp12, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "fp_iteration" "', argument " "12"" of type '" "adouble *""'"); 
  }
  arg12 = reinterpret_cast< adouble * >(argp12);
  arg13 = static_cast< int >(INTEGER(dim_x)[0]);
  arg14 = static_cast< int >(INTEGER(dim_u)[0]);
  result = (int)fp_iteration(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_forward__SWIG_0 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double **arg6 = (double **) 0 ;
  double **arg7 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "forward" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg7, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg7 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg7_ltmp = reinterpret_cast< double * >(arg7 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg7[_rswigi] = arg7_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg7[_rswigi][_rswigj] =  REAL(s_arg7)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)forward(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg7, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg7)[_rswigi*_rswiglen1+_rswigj] = arg7[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  
  free(arg7);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_forward__SWIG_1 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double **arg6 = (double **) 0 ;
  double *arg7 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "forward" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(s_arg7)[_rswigi];
      }
    }
  }
  result = (int)forward(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg7)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  
  free(arg7);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_forward__SWIG_2 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "forward" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(s_arg7)[_rswigi];
      }
    }
  }
  result = (int)forward(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg7)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  
  free(arg7);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_forward__SWIG_3 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "forward" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  result = (int)forward(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_forward__SWIG_4 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_arg9, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  double ***arg7 = (double ***) 0 ;
  double *arg8 = (double *) 0 ;
  double ***arg9 = (double ***) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "forward" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  res7 = SWIG_R_ConvertPtr(s_arg7, &argp7, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "forward" "', argument " "7"" of type '" "double ***""'"); 
  }
  arg7 = reinterpret_cast< double *** >(argp7);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg8);
      arg8 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg8[_rswigi] = REAL(s_arg8)[_rswigi];
      }
    }
  }
  res9 = SWIG_R_ConvertPtr(s_arg9, &argp9, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "forward" "', argument " "9"" of type '" "double ***""'"); 
  }
  arg9 = reinterpret_cast< double *** >(argp9);
  result = (int)forward(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg8);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg8)[_rswigi] = arg8[_rswigi];
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  
  
  free(arg8);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_forward__SWIG_5 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double **arg6 = (double **) 0 ;
  double *arg7 = (double *) 0 ;
  double **arg8 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "forward" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(s_arg7)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg8, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg8 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg8_ltmp = reinterpret_cast< double * >(arg8 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg8[_rswigi] = arg8_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg8[_rswigi][_rswigj] =  REAL(s_arg8)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)forward(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,5));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg7)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg8, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg8)[_rswigi*_rswiglen1+_rswigj] = arg8[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  
  free(arg7);
  
  
  free(arg8);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_reverse__SWIG_0 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double **arg6 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)reverse(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_reverse__SWIG_1 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  double **arg6 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< double >(REAL(s_arg5)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)reverse(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_reverse__SWIG_2 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  result = (int)reverse(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_reverse__SWIG_3 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< double >(REAL(s_arg5)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  result = (int)reverse(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_reverse__SWIG_4 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double **arg6 = (double **) 0 ;
  double ***arg7 = (double ***) 0 ;
  short **arg8 = (short **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  res7 = SWIG_R_ConvertPtr(s_arg7, &argp7, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "reverse" "', argument " "7"" of type '" "double ***""'"); 
  }
  arg7 = reinterpret_cast< double *** >(argp7);
  res8 = SWIG_R_ConvertPtr(s_arg8, &argp8, SWIGTYPE_p_p_short, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "reverse" "', argument " "8"" of type '" "short **""'"); 
  }
  arg8 = reinterpret_cast< short ** >(argp8);
  result = (int)reverse(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_reverse__SWIG_5 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double **arg6 = (double **) 0 ;
  double ***arg7 = (double ***) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  res7 = SWIG_R_ConvertPtr(s_arg7, &argp7, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "reverse" "', argument " "7"" of type '" "double ***""'"); 
  }
  arg7 = reinterpret_cast< double *** >(argp7);
  result = (int)reverse(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_reverse__SWIG_6 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  double ***arg7 = (double ***) 0 ;
  short **arg8 = (short **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  res7 = SWIG_R_ConvertPtr(s_arg7, &argp7, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "reverse" "', argument " "7"" of type '" "double ***""'"); 
  }
  arg7 = reinterpret_cast< double *** >(argp7);
  res8 = SWIG_R_ConvertPtr(s_arg8, &argp8, SWIGTYPE_p_p_short, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "reverse" "', argument " "8"" of type '" "short **""'"); 
  }
  arg8 = reinterpret_cast< short ** >(argp8);
  result = (int)reverse(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_reverse__SWIG_7 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  double ***arg7 = (double ***) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  res7 = SWIG_R_ConvertPtr(s_arg7, &argp7, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "reverse" "', argument " "7"" of type '" "double ***""'"); 
  }
  arg7 = reinterpret_cast< double *** >(argp7);
  result = (int)reverse(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_reverse__SWIG_8 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double **arg6 = (double **) 0 ;
  double **arg7 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg7, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg7 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg7_ltmp = reinterpret_cast< double * >(arg7 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg7[_rswigi] = arg7_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg7[_rswigi][_rswigj] =  REAL(s_arg7)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)reverse(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg7, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg7)[_rswigi*_rswiglen1+_rswigj] = arg7[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  
  free(arg7);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_reverse__SWIG_9 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double **arg5 = (double **) 0 ;
  double **arg6 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg5, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg5 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg5_ltmp = reinterpret_cast< double * >(arg5 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg5[_rswigi] = arg5_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg5[_rswigi][_rswigj] =  REAL(s_arg5)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)reverse(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg5, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg5)[_rswigi*_rswiglen1+_rswigj] = arg5[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_reverse__SWIG_10 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  double **arg7 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg7, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg7 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg7_ltmp = reinterpret_cast< double * >(arg7 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg7[_rswigi] = arg7_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg7[_rswigi][_rswigj] =  REAL(s_arg7)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)reverse(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg7, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg7)[_rswigi*_rswiglen1+_rswigj] = arg7[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  
  free(arg7);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_reverse__SWIG_11 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double ***arg5 = (double ***) 0 ;
  short **arg6 = (short **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  res5 = SWIG_R_ConvertPtr(s_arg5, &argp5, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "reverse" "', argument " "5"" of type '" "double ***""'"); 
  }
  arg5 = reinterpret_cast< double *** >(argp5);
  res6 = SWIG_R_ConvertPtr(s_arg6, &argp6, SWIGTYPE_p_p_short, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "reverse" "', argument " "6"" of type '" "short **""'"); 
  }
  arg6 = reinterpret_cast< short ** >(argp6);
  result = (int)reverse(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_reverse__SWIG_12 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double ***arg5 = (double ***) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  res5 = SWIG_R_ConvertPtr(s_arg5, &argp5, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "reverse" "', argument " "5"" of type '" "double ***""'"); 
  }
  arg5 = reinterpret_cast< double *** >(argp5);
  result = (int)reverse(arg1,arg2,arg3,arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_zos_forward ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "zos_forward" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  result = (int)zos_forward(arg1,arg2,arg3,arg4,(double const *)arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_zos_forward_partx ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  double **arg5 = (double **) 0 ;
  double *arg6 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "zos_forward_partx" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg4[_rswigi] = INTEGER(s_arg4)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg5, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg5 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg5_ltmp = reinterpret_cast< double * >(arg5 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg5[_rswigi] = arg5_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg5[_rswigi][_rswigj] =  REAL(s_arg5)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  result = (int)zos_forward_partx(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg5, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg5)[_rswigi*_rswiglen1+_rswigj] = arg5[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  free(arg5);
  
  
  free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fos_forward ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fos_forward" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(s_arg7)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg8);
      arg8 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg8[_rswigi] = REAL(s_arg8)[_rswigi];
      }
    }
  }
  result = (int)fos_forward(arg1,arg2,arg3,arg4,(double const *)arg5,arg6,arg7,arg8);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,5));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg7)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg8);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg8)[_rswigi] = arg8[_rswigi];
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  
  free(arg7);
  
  
  free(arg8);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fos_forward_partx ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  double ***arg5 = (double ***) 0 ;
  double **arg6 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fos_forward_partx" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg4[_rswigi] = INTEGER(s_arg4)[_rswigi];
      }
    }
  }
  res5 = SWIG_R_ConvertPtr(s_arg5, &argp5, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fos_forward_partx" "', argument " "5"" of type '" "double ***""'"); 
  }
  arg5 = reinterpret_cast< double *** >(argp5);
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)fos_forward_partx(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  
  free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_hos_forward ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_arg9, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  double **arg7 = (double **) 0 ;
  double *arg8 = (double *) 0 ;
  double **arg9 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hos_forward" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg7, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg7 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg7_ltmp = reinterpret_cast< double * >(arg7 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg7[_rswigi] = arg7_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg7[_rswigi][_rswigj] =  REAL(s_arg7)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg8);
      arg8 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg8[_rswigi] = REAL(s_arg8)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg9, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg9 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg9_ltmp = reinterpret_cast< double * >(arg9 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg9[_rswigi] = arg9_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg9[_rswigi][_rswigj] =  REAL(s_arg9)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)hos_forward(arg1,arg2,arg3,arg4,arg5,(double const *)arg6,arg7,arg8,arg9);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,5));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg7, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg7)[_rswigi*_rswiglen1+_rswigj] = arg7[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg8);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg8)[_rswigi] = arg8[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg9, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg9)[_rswigi*_rswiglen1+_rswigj] = arg9[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  
  free(arg7);
  
  
  free(arg8);
  
  
  free(arg9);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_hos_forward_partx ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  double ***arg6 = (double ***) 0 ;
  double **arg7 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hos_forward_partx" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg4[_rswigi] = INTEGER(s_arg4)[_rswigi];
      }
    }
  }
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  res6 = SWIG_R_ConvertPtr(s_arg6, &argp6, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "hos_forward_partx" "', argument " "6"" of type '" "double ***""'"); 
  }
  arg6 = reinterpret_cast< double *** >(argp6);
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg7, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg7 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg7_ltmp = reinterpret_cast< double * >(arg7 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg7[_rswigi] = arg7_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg7[_rswigi][_rswigj] =  REAL(s_arg7)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)hos_forward_partx(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg7, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg7)[_rswigi*_rswiglen1+_rswigj] = arg7[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  
  
  free(arg7);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fov_forward ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double **arg6 = (double **) 0 ;
  double *arg7 = (double *) 0 ;
  double **arg8 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fov_forward" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(s_arg7)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg8, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg8 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg8_ltmp = reinterpret_cast< double * >(arg8 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg8[_rswigi] = arg8_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg8[_rswigi][_rswigj] =  REAL(s_arg8)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)fov_forward(arg1,arg2,arg3,arg4,(double const *)arg5,arg6,arg7,arg8);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,5));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg7)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg8, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg8)[_rswigi*_rswiglen1+_rswigj] = arg8[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  
  free(arg7);
  
  
  free(arg8);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fov_offset_forward ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_arg9, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  double **arg7 = (double **) 0 ;
  double *arg8 = (double *) 0 ;
  double **arg9 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fov_offset_forward" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg7, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg7 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg7_ltmp = reinterpret_cast< double * >(arg7 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg7[_rswigi] = arg7_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg7[_rswigi][_rswigj] =  REAL(s_arg7)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg8);
      arg8 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg8[_rswigi] = REAL(s_arg8)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg9, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg9 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg9_ltmp = reinterpret_cast< double * >(arg9 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg9[_rswigi] = arg9_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg9[_rswigi][_rswigj] =  REAL(s_arg9)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)fov_offset_forward(arg1,arg2,arg3,arg4,arg5,(double const *)arg6,arg7,arg8,arg9);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,5));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg7, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg7)[_rswigi*_rswiglen1+_rswigj] = arg7[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg8);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg8)[_rswigi] = arg8[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg9, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg9)[_rswigi*_rswiglen1+_rswigj] = arg9[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  
  free(arg7);
  
  
  free(arg8);
  
  
  free(arg9);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fov_forward_partx ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_arg9, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  double **arg6 = (double **) 0 ;
  double ***arg7 = (double ***) 0 ;
  double *arg8 = (double *) 0 ;
  double **arg9 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fov_forward_partx" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg4[_rswigi] = INTEGER(s_arg4)[_rswigi];
      }
    }
  }
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  res7 = SWIG_R_ConvertPtr(s_arg7, &argp7, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "fov_forward_partx" "', argument " "7"" of type '" "double ***""'"); 
  }
  arg7 = reinterpret_cast< double *** >(argp7);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg8);
      arg8 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg8[_rswigi] = REAL(s_arg8)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg9, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg9 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg9_ltmp = reinterpret_cast< double * >(arg9 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg9[_rswigi] = arg9_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg9[_rswigi][_rswigj] =  REAL(s_arg9)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)fov_forward_partx(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,4));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg8);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg8)[_rswigi] = arg8[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg9, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg9)[_rswigi*_rswiglen1+_rswigj] = arg9[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  
  free(arg6);
  
  
  
  free(arg8);
  
  
  free(arg9);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_hov_forward ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_arg9, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  double ***arg7 = (double ***) 0 ;
  double *arg8 = (double *) 0 ;
  double ***arg9 = (double ***) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp9 = 0 ;
  int res9 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hov_forward" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  res7 = SWIG_R_ConvertPtr(s_arg7, &argp7, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "hov_forward" "', argument " "7"" of type '" "double ***""'"); 
  }
  arg7 = reinterpret_cast< double *** >(argp7);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg8);
      arg8 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg8[_rswigi] = REAL(s_arg8)[_rswigi];
      }
    }
  }
  res9 = SWIG_R_ConvertPtr(s_arg9, &argp9, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "hov_forward" "', argument " "9"" of type '" "double ***""'"); 
  }
  arg9 = reinterpret_cast< double *** >(argp9);
  result = (int)hov_forward(arg1,arg2,arg3,arg4,arg5,(double const *)arg6,arg7,arg8,arg9);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg8);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg8)[_rswigi] = arg8[_rswigi];
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  
  
  free(arg8);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_hov_forward_partx ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_arg9, SEXP s_arg10, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  int arg6 ;
  double **arg7 = (double **) 0 ;
  double ****arg8 = (double ****) 0 ;
  double *arg9 = (double *) 0 ;
  double ***arg10 = (double ***) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hov_forward_partx" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg4[_rswigi] = INTEGER(s_arg4)[_rswigi];
      }
    }
  }
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  arg6 = static_cast< int >(INTEGER(s_arg6)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg7, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg7 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg7_ltmp = reinterpret_cast< double * >(arg7 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg7[_rswigi] = arg7_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg7[_rswigi][_rswigj] =  REAL(s_arg7)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  res8 = SWIG_R_ConvertPtr(s_arg8, &argp8, SWIGTYPE_p_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "hov_forward_partx" "', argument " "8"" of type '" "double ****""'"); 
  }
  arg8 = reinterpret_cast< double **** >(argp8);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg9);
      arg9 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg9[_rswigi] = REAL(s_arg9)[_rswigi];
      }
    }
  }
  res10 = SWIG_R_ConvertPtr(s_arg10, &argp10, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "hov_forward_partx" "', argument " "10"" of type '" "double ***""'"); 
  }
  arg10 = reinterpret_cast< double *** >(argp10);
  result = (int)hov_forward_partx(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg7, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg7)[_rswigi*_rswiglen1+_rswigj] = arg7[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg9);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg9)[_rswigi] = arg9[_rswigi];
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  
  
  free(arg7);
  
  
  
  free(arg9);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_hov_wk_forward ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_arg9, SEXP s_arg10, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  double ***arg8 = (double ***) 0 ;
  double *arg9 = (double *) 0 ;
  double ***arg10 = (double ***) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hov_wk_forward" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  arg6 = static_cast< int >(INTEGER(s_arg6)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(s_arg7)[_rswigi];
      }
    }
  }
  res8 = SWIG_R_ConvertPtr(s_arg8, &argp8, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "hov_wk_forward" "', argument " "8"" of type '" "double ***""'"); 
  }
  arg8 = reinterpret_cast< double *** >(argp8);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg9);
      arg9 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg9[_rswigi] = REAL(s_arg9)[_rswigi];
      }
    }
  }
  res10 = SWIG_R_ConvertPtr(s_arg10, &argp10, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res10)) {
    SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "hov_wk_forward" "', argument " "10"" of type '" "double ***""'"); 
  }
  arg10 = reinterpret_cast< double *** >(argp10);
  result = (int)hov_wk_forward(arg1,arg2,arg3,arg4,arg5,arg6,(double const *)arg7,arg8,arg9,arg10);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg7)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg9);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg9)[_rswigi] = arg9[_rswigi];
      }
    }
  }
  
  
  
  
  
  
  
  free(arg7);
  
  
  
  free(arg9);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_int_forward_safe ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned long **arg5 = (unsigned long **) 0 ;
  unsigned long **arg6 = (unsigned long **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "int_forward_safe" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  res5 = SWIG_R_ConvertPtr(s_arg5, &argp5, SWIGTYPE_p_p_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "int_forward_safe" "', argument " "5"" of type '" "unsigned long **""'"); 
  }
  arg5 = reinterpret_cast< unsigned long ** >(argp5);
  res6 = SWIG_R_ConvertPtr(s_arg6, &argp6, SWIGTYPE_p_p_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "int_forward_safe" "', argument " "6"" of type '" "unsigned long **""'"); 
  }
  arg6 = reinterpret_cast< unsigned long ** >(argp6);
  result = (int)int_forward_safe(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_int_forward_tight ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  unsigned long **arg6 = (unsigned long **) 0 ;
  double *arg7 = (double *) 0 ;
  unsigned long **arg8 = (unsigned long **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "int_forward_tight" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  res6 = SWIG_R_ConvertPtr(s_arg6, &argp6, SWIGTYPE_p_p_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "int_forward_tight" "', argument " "6"" of type '" "unsigned long **""'"); 
  }
  arg6 = reinterpret_cast< unsigned long ** >(argp6);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(s_arg7)[_rswigi];
      }
    }
  }
  res8 = SWIG_R_ConvertPtr(s_arg8, &argp8, SWIGTYPE_p_p_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "int_forward_tight" "', argument " "8"" of type '" "unsigned long **""'"); 
  }
  arg8 = reinterpret_cast< unsigned long ** >(argp8);
  result = (int)int_forward_tight(arg1,arg2,arg3,arg4,(double const *)arg5,arg6,arg7,arg8);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg7)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  
  free(arg7);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_indopro_forward_safe ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  unsigned int **arg5 = (unsigned int **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "indopro_forward_safe" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  res5 = SWIG_R_ConvertPtr(s_arg5, &argp5, SWIGTYPE_p_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "indopro_forward_safe" "', argument " "5"" of type '" "unsigned int **""'"); 
  }
  arg5 = reinterpret_cast< unsigned int ** >(argp5);
  result = (int)indopro_forward_safe(arg1,arg2,arg3,(double const *)arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_indopro_forward_tight ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  unsigned int **arg5 = (unsigned int **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "indopro_forward_tight" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  res5 = SWIG_R_ConvertPtr(s_arg5, &argp5, SWIGTYPE_p_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "indopro_forward_tight" "', argument " "5"" of type '" "unsigned int **""'"); 
  }
  arg5 = reinterpret_cast< unsigned int ** >(argp5);
  result = (int)indopro_forward_tight(arg1,arg2,arg3,(double const *)arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_nonl_ind_forward_safe ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  unsigned int **arg5 = (unsigned int **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "nonl_ind_forward_safe" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  res5 = SWIG_R_ConvertPtr(s_arg5, &argp5, SWIGTYPE_p_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "nonl_ind_forward_safe" "', argument " "5"" of type '" "unsigned int **""'"); 
  }
  arg5 = reinterpret_cast< unsigned int ** >(argp5);
  result = (int)nonl_ind_forward_safe(arg1,arg2,arg3,(double const *)arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_nonl_ind_forward_tight ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  unsigned int **arg5 = (unsigned int **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "nonl_ind_forward_tight" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  res5 = SWIG_R_ConvertPtr(s_arg5, &argp5, SWIGTYPE_p_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "nonl_ind_forward_tight" "', argument " "5"" of type '" "unsigned int **""'"); 
  }
  arg5 = reinterpret_cast< unsigned int ** >(argp5);
  result = (int)nonl_ind_forward_tight(arg1,arg2,arg3,(double const *)arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_nonl_ind_old_forward_safe ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  unsigned int **arg5 = (unsigned int **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "nonl_ind_old_forward_safe" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  res5 = SWIG_R_ConvertPtr(s_arg5, &argp5, SWIGTYPE_p_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "nonl_ind_old_forward_safe" "', argument " "5"" of type '" "unsigned int **""'"); 
  }
  arg5 = reinterpret_cast< unsigned int ** >(argp5);
  result = (int)nonl_ind_old_forward_safe(arg1,arg2,arg3,(double const *)arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_nonl_ind_old_forward_tight ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  unsigned int **arg5 = (unsigned int **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "nonl_ind_old_forward_tight" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  res5 = SWIG_R_ConvertPtr(s_arg5, &argp5, SWIGTYPE_p_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "nonl_ind_old_forward_tight" "', argument " "5"" of type '" "unsigned int **""'"); 
  }
  arg5 = reinterpret_cast< unsigned int ** >(argp5);
  result = (int)nonl_ind_old_forward_tight(arg1,arg2,arg3,(double const *)arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fos_reverse ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fos_reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  result = (int)fos_reverse(arg1,arg2,arg3,arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  free(arg5);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_hos_reverse ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double **arg6 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hos_reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)hos_reverse(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_hos_ti_reverse ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double **arg5 = (double **) 0 ;
  double **arg6 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hos_ti_reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg5, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg5 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg5_ltmp = reinterpret_cast< double * >(arg5 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg5[_rswigi] = arg5_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg5[_rswigi][_rswigj] =  REAL(s_arg5)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)hos_ti_reverse(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg5, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg5)[_rswigi*_rswiglen1+_rswigj] = arg5[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_hos_ov_reverse ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double **arg6 = (double **) 0 ;
  double ***arg7 = (double ***) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hos_ov_reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  res7 = SWIG_R_ConvertPtr(s_arg7, &argp7, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "hos_ov_reverse" "', argument " "7"" of type '" "double ***""'"); 
  }
  arg7 = reinterpret_cast< double *** >(argp7);
  result = (int)hos_ov_reverse(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fov_reverse ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double **arg5 = (double **) 0 ;
  double **arg6 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fov_reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg5, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg5 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg5_ltmp = reinterpret_cast< double * >(arg5 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg5[_rswigi] = arg5_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg5[_rswigi][_rswigj] =  REAL(s_arg5)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)fov_reverse(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg5, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg5)[_rswigi*_rswiglen1+_rswigj] = arg5[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_hov_reverse ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double **arg6 = (double **) 0 ;
  double ***arg7 = (double ***) 0 ;
  short **arg8 = (short **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hov_reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  res7 = SWIG_R_ConvertPtr(s_arg7, &argp7, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "hov_reverse" "', argument " "7"" of type '" "double ***""'"); 
  }
  arg7 = reinterpret_cast< double *** >(argp7);
  res8 = SWIG_R_ConvertPtr(s_arg8, &argp8, SWIGTYPE_p_p_short, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "hov_reverse" "', argument " "8"" of type '" "short **""'"); 
  }
  arg8 = reinterpret_cast< short ** >(argp8);
  result = (int)hov_reverse(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_hov_ti_reverse ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double ***arg6 = (double ***) 0 ;
  double ***arg7 = (double ***) 0 ;
  short **arg8 = (short **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hov_ti_reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  res6 = SWIG_R_ConvertPtr(s_arg6, &argp6, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "hov_ti_reverse" "', argument " "6"" of type '" "double ***""'"); 
  }
  arg6 = reinterpret_cast< double *** >(argp6);
  res7 = SWIG_R_ConvertPtr(s_arg7, &argp7, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "hov_ti_reverse" "', argument " "7"" of type '" "double ***""'"); 
  }
  arg7 = reinterpret_cast< double *** >(argp7);
  res8 = SWIG_R_ConvertPtr(s_arg8, &argp8, SWIGTYPE_p_p_short, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "hov_ti_reverse" "', argument " "8"" of type '" "short **""'"); 
  }
  arg8 = reinterpret_cast< short ** >(argp8);
  result = (int)hov_ti_reverse(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_int_reverse_tight ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned long **arg5 = (unsigned long **) 0 ;
  unsigned long **arg6 = (unsigned long **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "int_reverse_tight" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  res5 = SWIG_R_ConvertPtr(s_arg5, &argp5, SWIGTYPE_p_p_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "int_reverse_tight" "', argument " "5"" of type '" "unsigned long **""'"); 
  }
  arg5 = reinterpret_cast< unsigned long ** >(argp5);
  res6 = SWIG_R_ConvertPtr(s_arg6, &argp6, SWIGTYPE_p_p_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "int_reverse_tight" "', argument " "6"" of type '" "unsigned long **""'"); 
  }
  arg6 = reinterpret_cast< unsigned long ** >(argp6);
  result = (int)int_reverse_tight(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_int_reverse_safe ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned long **arg5 = (unsigned long **) 0 ;
  unsigned long **arg6 = (unsigned long **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "int_reverse_safe" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  res5 = SWIG_R_ConvertPtr(s_arg5, &argp5, SWIGTYPE_p_p_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "int_reverse_safe" "', argument " "5"" of type '" "unsigned long **""'"); 
  }
  arg5 = reinterpret_cast< unsigned long ** >(argp5);
  res6 = SWIG_R_ConvertPtr(s_arg6, &argp6, SWIGTYPE_p_p_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "int_reverse_safe" "', argument " "6"" of type '" "unsigned long **""'"); 
  }
  arg6 = reinterpret_cast< unsigned long ** >(argp6);
  result = (int)int_reverse_safe(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_get_num_switches ( SEXP s_arg1, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_num_switches" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  result = (int)get_num_switches(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_zos_pl_forward ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "zos_pl_forward" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(s_arg7)[_rswigi];
      }
    }
  }
  result = (int)zos_pl_forward(arg1,arg2,arg3,arg4,(double const *)arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,4));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg7)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  
  free(arg7);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_firstsign ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_swig_copy)
{
  short result;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  arg1 = static_cast< int >(INTEGER(s_arg1)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg2);
      arg2 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg2[_rswigi] = REAL(s_arg2)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg3);
      arg3 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg3[_rswigi] = REAL(s_arg3)[_rswigi];
      }
    }
  }
  result = (short)firstsign(arg1,arg2,arg3);
  r_ans = SWIG_From_int(static_cast< int >(result));
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg2);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg2)[_rswigi] = arg2[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg3);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg3)[_rswigi] = arg3[_rswigi];
      }
    }
  }
  
  
  free(arg2);
  
  
  free(arg3);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_ext_firstsign ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_swig_copy)
{
  short result;
  double arg1 ;
  double arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  result = (short)ext_firstsign(arg1,arg2,arg3,arg4,arg5);
  r_ans = SWIG_From_int(static_cast< int >(result));
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  free(arg5);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_ext_firstsign2 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_swig_copy)
{
  short result;
  double arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg3);
      arg3 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg3[_rswigi] = REAL(s_arg3)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  result = (short)ext_firstsign2(arg1,arg2,arg3,arg4);
  r_ans = SWIG_From_int(static_cast< int >(result));
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg3);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg3)[_rswigi] = arg3[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  
  
  
  free(arg3);
  
  
  free(arg4);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fos_pl_forward ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_arg9, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fos_pl_forward" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(s_arg7)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg8);
      arg8 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg8[_rswigi] = REAL(s_arg8)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg9);
      arg9 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg9[_rswigi] = REAL(s_arg9)[_rswigi];
      }
    }
  }
  result = (int)fos_pl_forward(arg1,arg2,arg3,(double const *)arg4,arg5,arg6,arg7,arg8,arg9);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,7));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg7)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg8);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg8)[_rswigi] = arg8[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg9);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg9)[_rswigi] = arg9[_rswigi];
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  free(arg5);
  
  
  free(arg6);
  
  
  free(arg7);
  
  
  free(arg8);
  
  
  free(arg9);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fov_pl_forward ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_arg9, SEXP s_arg10, SEXP s_arg11, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double **arg6 = (double **) 0 ;
  double *arg7 = (double *) 0 ;
  double **arg8 = (double **) 0 ;
  double *arg9 = (double *) 0 ;
  double **arg10 = (double **) 0 ;
  short *arg11 = (short *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fov_pl_forward" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(s_arg7)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg8, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg8 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg8_ltmp = reinterpret_cast< double * >(arg8 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg8[_rswigi] = arg8_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg8[_rswigi][_rswigj] =  REAL(s_arg8)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg9);
      arg9 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg9[_rswigi] = REAL(s_arg9)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg10, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg10 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg10_ltmp = reinterpret_cast< double * >(arg10 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg10[_rswigi] = arg10_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg10[_rswigi][_rswigj] =  REAL(s_arg10)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg11);
      arg11 = static_cast< short * >(calloc(sizeof(short), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg11[_rswigi] = INTEGER(s_arg11)[_rswigi];
      }
    }
  }
  result = (int)fov_pl_forward(arg1,arg2,arg3,arg4,(double const *)arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,7));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg7)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg8, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg8)[_rswigi*_rswiglen1+_rswigj] = arg8[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg9);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg9)[_rswigi] = arg9[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg10, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg10)[_rswigi*_rswiglen1+_rswigj] = arg10[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  
  free(arg7);
  
  
  free(arg8);
  
  
  free(arg9);
  
  
  free(arg10);
  
  
  free(arg11);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fos_pl_sig_forward ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_arg9, SEXP s_arg10, SEXP s_arg11, SEXP s_arg12, SEXP s_arg13, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  short *arg7 = (short *) 0 ;
  short *arg8 = (short *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  double *arg11 = (double *) 0 ;
  double *arg12 = (double *) 0 ;
  short *arg13 = (short *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fos_pl_sig_forward" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  arg6 = static_cast< int >(INTEGER(s_arg6)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      arg7 = static_cast< short * >(calloc(sizeof(short), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg7[_rswigi] = INTEGER(s_arg7)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg8);
      arg8 = static_cast< short * >(calloc(sizeof(short), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg8[_rswigi] = INTEGER(s_arg8)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg9);
      arg9 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg9[_rswigi] = REAL(s_arg9)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg10);
      arg10 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg10[_rswigi] = REAL(s_arg10)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg11);
      arg11 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg11[_rswigi] = REAL(s_arg11)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg12);
      arg12 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg12[_rswigi] = REAL(s_arg12)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg13);
      arg13 = static_cast< short * >(calloc(sizeof(short), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg13[_rswigi] = INTEGER(s_arg13)[_rswigi];
      }
    }
  }
  result = (int)fos_pl_sig_forward(arg1,arg2,arg3,(double const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,7));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg9);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg9)[_rswigi] = arg9[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg10);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg10)[_rswigi] = arg10[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg11);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg11)[_rswigi] = arg11[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg12);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg12)[_rswigi] = arg12[_rswigi];
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  free(arg5);
  
  
  
  free(arg7);
  
  
  free(arg8);
  
  
  free(arg9);
  
  
  free(arg10);
  
  
  free(arg11);
  
  
  free(arg12);
  
  
  free(arg13);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fov_pl_sig_forward ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_arg9, SEXP s_arg10, SEXP s_arg11, SEXP s_arg12, SEXP s_arg13, SEXP s_arg14, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double **arg6 = (double **) 0 ;
  int arg7 ;
  short *arg8 = (short *) 0 ;
  short *arg9 = (short *) 0 ;
  double *arg10 = (double *) 0 ;
  double **arg11 = (double **) 0 ;
  double *arg12 = (double *) 0 ;
  double **arg13 = (double **) 0 ;
  short *arg14 = (short *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fov_pl_sig_forward" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  arg7 = static_cast< int >(INTEGER(s_arg7)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg8);
      arg8 = static_cast< short * >(calloc(sizeof(short), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg8[_rswigi] = INTEGER(s_arg8)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg9);
      arg9 = static_cast< short * >(calloc(sizeof(short), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg9[_rswigi] = INTEGER(s_arg9)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg10);
      arg10 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg10[_rswigi] = REAL(s_arg10)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg11, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg11 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg11_ltmp = reinterpret_cast< double * >(arg11 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg11[_rswigi] = arg11_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg11[_rswigi][_rswigj] =  REAL(s_arg11)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg12);
      arg12 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg12[_rswigi] = REAL(s_arg12)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg13, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg13 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg13_ltmp = reinterpret_cast< double * >(arg13 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg13[_rswigi] = arg13_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg13[_rswigi][_rswigj] =  REAL(s_arg13)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg14);
      arg14 = static_cast< short * >(calloc(sizeof(short), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg14[_rswigi] = INTEGER(s_arg14)[_rswigi];
      }
    }
  }
  result = (int)fov_pl_sig_forward(arg1,arg2,arg3,arg4,(double const *)arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,7));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg10);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg10)[_rswigi] = arg10[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg11, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg11)[_rswigi*_rswiglen1+_rswigj] = arg11[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg12);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg12)[_rswigi] = arg12[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg13, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg13)[_rswigi*_rswiglen1+_rswigj] = arg13[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  
  
  free(arg8);
  
  
  free(arg9);
  
  
  free(arg10);
  
  
  free(arg11);
  
  
  free(arg12);
  
  
  free(arg13);
  
  
  free(arg14);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_indopro_forward_absnormal ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  unsigned int **arg6 = (unsigned int **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "indopro_forward_absnormal" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  res6 = SWIG_R_ConvertPtr(s_arg6, &argp6, SWIGTYPE_p_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "indopro_forward_absnormal" "', argument " "6"" of type '" "unsigned int **""'"); 
  }
  arg6 = reinterpret_cast< unsigned int ** >(argp6);
  result = (int)indopro_forward_absnormal(arg1,arg2,arg3,arg4,(double const *)arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fos_pl_reverse ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fos_pl_reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  result = (int)fos_pl_reverse(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fos_pl_sig_reverse ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  short *arg5 = (short *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fos_pl_sig_reverse" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< short * >(calloc(sizeof(short), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg5[_rswigi] = INTEGER(s_arg5)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(s_arg7)[_rswigi];
      }
    }
  }
  result = (int)fos_pl_sig_reverse(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg7)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  
  free(arg7);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_eval_func ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "eval_func" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  result = (int)function(arg1,arg2,arg3,arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  free(arg5);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_gradient ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "gradient" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg3);
      arg3 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg3[_rswigi] = REAL(s_arg3)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  result = (int)gradient(arg1,arg2,(double const *)arg3,arg4);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg3);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg3)[_rswigi] = arg3[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  
  
  
  free(arg3);
  
  
  free(arg4);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_jacobian ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double **arg5 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "jacobian" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg5, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg5 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg5_ltmp = reinterpret_cast< double * >(arg5 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg5[_rswigi] = arg5_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg5[_rswigi][_rswigj] =  REAL(s_arg5)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)jacobian(arg1,arg2,arg3,(double const *)arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg5, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg5)[_rswigi*_rswiglen1+_rswigj] = arg5[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  free(arg5);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_large_jacobian ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double **arg7 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "large_jacobian" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg7, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg7 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg7_ltmp = reinterpret_cast< double * >(arg7 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg7[_rswigi] = arg7_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg7[_rswigi][_rswigj] =  REAL(s_arg7)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)large_jacobian(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,4));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg7, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg7)[_rswigi*_rswiglen1+_rswigj] = arg7[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  
  free(arg7);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_vec_jac ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "vec_jac" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(s_arg7)[_rswigi];
      }
    }
  }
  result = (int)vec_jac(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,4));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg7)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  
  free(arg7);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_jac_vec ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "jac_vec" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  result = (int)jac_vec(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,4));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  free(arg5);
  
  
  free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_hessian ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double **arg4 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hessian" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg3);
      arg3 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg3[_rswigi] = REAL(s_arg3)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg4, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg4 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg4_ltmp = reinterpret_cast< double * >(arg4 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg4[_rswigi] = arg4_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg4[_rswigi][_rswigj] =  REAL(s_arg4)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)hessian(arg1,arg2,arg3,arg4);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg3);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg3)[_rswigi] = arg3[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg4, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg4)[_rswigi*_rswiglen1+_rswigj] = arg4[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  free(arg3);
  
  
  free(arg4);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_hessian2 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double **arg4 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hessian2" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg3);
      arg3 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg3[_rswigi] = REAL(s_arg3)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg4, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg4 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg4_ltmp = reinterpret_cast< double * >(arg4 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg4[_rswigi] = arg4_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg4[_rswigi][_rswigj] =  REAL(s_arg4)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)hessian2(arg1,arg2,arg3,arg4);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg3);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg3)[_rswigi] = arg3[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg4, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg4)[_rswigi*_rswiglen1+_rswigj] = arg4[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  free(arg3);
  
  
  free(arg4);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_hess_vec ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hess_vec" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg3);
      arg3 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg3[_rswigi] = REAL(s_arg3)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  result = (int)hess_vec(arg1,arg2,arg3,arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,4));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg3);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg3)[_rswigi] = arg3[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  
  
  
  free(arg3);
  
  
  free(arg4);
  
  
  free(arg5);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_hess_mat ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double **arg5 = (double **) 0 ;
  double **arg6 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hess_mat" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg5, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg5 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg5_ltmp = reinterpret_cast< double * >(arg5 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg5[_rswigi] = arg5_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg5[_rswigi][_rswigj] =  REAL(s_arg5)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)hess_mat(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,4));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg5, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg5)[_rswigi*_rswiglen1+_rswigj] = arg5[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  free(arg5);
  
  
  free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_lagra_hess_vec ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "lagra_hess_vec" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(s_arg6)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(s_arg7)[_rswigi];
      }
    }
  }
  result = (int)lagra_hess_vec(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,5));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg6)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg7);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg7)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  free(arg5);
  
  
  free(arg6);
  
  
  free(arg7);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_tensor_eval ( SEXP tag, SEXP m, SEXP n, SEXP d, SEXP p, SEXP x, SEXP tensor, SEXP S, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  double **arg7 = (double **) 0 ;
  double **arg8 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(tag, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tensor_eval" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(m)[0]);
  arg3 = static_cast< int >(INTEGER(n)[0]);
  arg4 = static_cast< int >(INTEGER(d)[0]);
  arg5 = static_cast< int >(INTEGER(p)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(x);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(x)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(tensor, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg7 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg7_ltmp = reinterpret_cast< double * >(arg7 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg7[_rswigi] = arg7_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg7[_rswigi][_rswigj] =  REAL(tensor)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(S, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg8 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg8_ltmp = reinterpret_cast< double * >(arg8 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg8[_rswigi] = arg8_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg8[_rswigi][_rswigj] =  REAL(S)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)tensor_eval(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,4));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(x);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(x)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(tensor, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(tensor)[_rswigi*_rswiglen1+_rswigj] = arg7[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(S, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(S)[_rswigi*_rswiglen1+_rswigj] = arg8[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  
  free(arg7);
  
  
  free(arg8);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_inverse_tensor_eval ( SEXP tag, SEXP n, SEXP d, SEXP p, SEXP x, SEXP tensor, SEXP S, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double **arg6 = (double **) 0 ;
  double **arg7 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(tag, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inverse_tensor_eval" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(n)[0]);
  arg3 = static_cast< int >(INTEGER(d)[0]);
  arg4 = static_cast< int >(INTEGER(p)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(x);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(x)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(tensor, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(tensor)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(S, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg7 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg7_ltmp = reinterpret_cast< double * >(arg7 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg7[_rswigi] = arg7_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg7[_rswigi][_rswigj] =  REAL(S)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)inverse_tensor_eval(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,4));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(x);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(x)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(tensor, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(tensor)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(S, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(S)[_rswigi*_rswiglen1+_rswigj] = arg7[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  
  free(arg7);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_inverse_Taylor_prop ( SEXP tag, SEXP n, SEXP d, SEXP Y, SEXP X, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  double **arg4 = (double **) 0 ;
  double **arg5 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(tag, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inverse_Taylor_prop" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(n)[0]);
  arg3 = static_cast< int >(INTEGER(d)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(Y, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg4 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg4_ltmp = reinterpret_cast< double * >(arg4 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg4[_rswigi] = arg4_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg4[_rswigi][_rswigj] =  REAL(Y)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(X, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg5 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg5_ltmp = reinterpret_cast< double * >(arg5 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg5[_rswigi] = arg5_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg5[_rswigi][_rswigj] =  REAL(X)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)inverse_Taylor_prop(arg1,arg2,arg3,arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(Y, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(Y)[_rswigi*_rswiglen1+_rswigj] = arg4[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(X, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(X)[_rswigi*_rswiglen1+_rswigj] = arg5[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  free(arg5);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_tensor_value ( SEXP d, SEXP m, SEXP y, SEXP tensor, SEXP multi)
{
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double **arg4 = (double **) 0 ;
  int *arg5 = (int *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  arg1 = static_cast< int >(INTEGER(d)[0]);
  arg2 = static_cast< int >(INTEGER(m)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(y);
      arg3 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg3[_rswigi] = REAL(y)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(tensor, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg4 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg4_ltmp = reinterpret_cast< double * >(arg4 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg4[_rswigi] = arg4_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg4[_rswigi][_rswigj] =  REAL(tensor)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(multi);
      arg5 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg5[_rswigi] = INTEGER(multi)[_rswigi];
      }
    }
  }
  tensor_value(arg1,arg2,arg3,arg4,arg5);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,1));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(y);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(y)[_rswigi] = arg3[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(tensor, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(tensor)[_rswigi*_rswiglen1+_rswigj] = arg4[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  free(arg3);
  
  
  free(arg4);
  
  
  free(arg5);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_tensorsetup ( SEXP m, SEXP p, SEXP d, SEXP tensorig)
{
  void **result = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double **arg4 = (double **) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  arg1 = static_cast< int >(INTEGER(m)[0]);
  arg2 = static_cast< int >(INTEGER(p)[0]);
  arg3 = static_cast< int >(INTEGER(d)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(tensorig, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg4 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg4_ltmp = reinterpret_cast< double * >(arg4 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg4[_rswigi] = arg4_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg4[_rswigi][_rswigj] =  REAL(tensorig)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (void **)tensorsetup(arg1,arg2,arg3,arg4);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_void, R_SWIG_EXTERNAL |  0 );
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(tensorig, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(tensorig)[_rswigi*_rswiglen1+_rswigj] = arg4[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  free(arg4);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_freetensor ( SEXP m, SEXP p, SEXP d, SEXP tensor)
{
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double **arg4 = (double **) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  arg1 = static_cast< int >(INTEGER(m)[0]);
  arg2 = static_cast< int >(INTEGER(p)[0]);
  arg3 = static_cast< int >(INTEGER(d)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(tensor, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg4 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg4_ltmp = reinterpret_cast< double * >(arg4 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg4[_rswigi] = arg4_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg4[_rswigi][_rswigj] =  REAL(tensor)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  freetensor(arg1,arg2,arg3,arg4);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(tensor, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(tensor)[_rswigi*_rswiglen1+_rswigj] = arg4[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  free(arg4);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_tensor_address ( SEXP d, SEXP im, SEXP s_swig_copy)
{
  int result;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(d)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(im);
      arg2 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg2[_rswigi] = INTEGER(im)[_rswigi];
      }
    }
  }
  result = (int)tensor_address(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  free(arg2);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_binomi ( SEXP a, SEXP b, SEXP s_swig_copy)
{
  long result;
  int arg1 ;
  int arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(a)[0]);
  arg2 = static_cast< int >(INTEGER(b)[0]);
  result = (long)binomi(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_jac_solv ( SEXP tag, SEXP n, SEXP x, SEXP b, SEXP mode, SEXP s_swig_copy)
{
  int result;
  unsigned short arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  unsigned short arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(tag, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "jac_solv" "', argument " "1"" of type '" "unsigned short""'");
  } 
  arg1 = static_cast< unsigned short >(val1);
  arg2 = static_cast< int >(INTEGER(n)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(x);
      arg3 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg3[_rswigi] = REAL(x)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(b);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(b)[_rswigi];
      }
    }
  }
  ecode5 = SWIG_AsVal_int(mode, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "jac_solv" "', argument " "5"" of type '" "unsigned short""'");
  } 
  arg5 = static_cast< unsigned short >(val5);
  result = (int)jac_solv(arg1,arg2,(double const *)arg3,arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(x);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(x)[_rswigi] = arg3[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(b);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(b)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  
  
  
  free(arg3);
  
  
  free(arg4);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_forodec ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  double arg3 ;
  int arg4 ;
  int arg5 ;
  double **arg6 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "forodec" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< double >(REAL(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)forodec(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg6, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg6)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_accodec ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6)
{
  int arg1 ;
  double arg2 ;
  int arg3 ;
  double ***arg4 = (double ***) 0 ;
  double ***arg5 = (double ***) 0 ;
  short **arg6 = (short **) 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(s_arg1)[0]);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  res4 = SWIG_R_ConvertPtr(s_arg4, &argp4, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "accodec" "', argument " "4"" of type '" "double ***""'"); 
  }
  arg4 = reinterpret_cast< double *** >(argp4);
  res5 = SWIG_R_ConvertPtr(s_arg5, &argp5, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "accodec" "', argument " "5"" of type '" "double ***""'"); 
  }
  arg5 = reinterpret_cast< double *** >(argp5);
  res6 = SWIG_R_ConvertPtr(s_arg6, &argp6, SWIGTYPE_p_p_short, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "accodec" "', argument " "6"" of type '" "short **""'"); 
  }
  arg6 = reinterpret_cast< short ** >(argp6);
  accodec(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = R_NilValue;
  
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_forode__SWIG_0 ( SEXP tag, SEXP n, SEXP tau, SEXP dold, SEXP dnew, SEXP X, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  double arg3 ;
  int arg4 ;
  int arg5 ;
  double **arg6 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(tag, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "forode" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(n)[0]);
  arg3 = static_cast< double >(REAL(tau)[0]);
  arg4 = static_cast< int >(INTEGER(dold)[0]);
  arg5 = static_cast< int >(INTEGER(dnew)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(X, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg6 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg6_ltmp = reinterpret_cast< double * >(arg6 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg6[_rswigi] = arg6_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg6[_rswigi][_rswigj] =  REAL(X)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)forode(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(X, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(X)[_rswigi*_rswiglen1+_rswigj] = arg6[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  
  free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_forode__SWIG_1 ( SEXP tag, SEXP n, SEXP dold, SEXP dnew, SEXP X, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double **arg5 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(tag, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "forode" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(n)[0]);
  arg3 = static_cast< int >(INTEGER(dold)[0]);
  arg4 = static_cast< int >(INTEGER(dnew)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(X, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg5 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg5_ltmp = reinterpret_cast< double * >(arg5 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg5[_rswigi] = arg5_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg5[_rswigi][_rswigj] =  REAL(X)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)forode(arg1,arg2,arg3,arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(X, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(X)[_rswigi*_rswiglen1+_rswigj] = arg5[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_forode__SWIG_2 ( SEXP tag, SEXP n, SEXP tau, SEXP deg, SEXP X, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  double arg3 ;
  int arg4 ;
  double **arg5 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(tag, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "forode" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(n)[0]);
  arg3 = static_cast< double >(REAL(tau)[0]);
  arg4 = static_cast< int >(INTEGER(deg)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(X, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg5 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg5_ltmp = reinterpret_cast< double * >(arg5 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg5[_rswigi] = arg5_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg5[_rswigi][_rswigj] =  REAL(X)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)forode(arg1,arg2,arg3,arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(X, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(X)[_rswigi*_rswiglen1+_rswigj] = arg5[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_forode__SWIG_3 ( SEXP tag, SEXP n, SEXP deg, SEXP X, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  double **arg4 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(tag, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "forode" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(n)[0]);
  arg3 = static_cast< int >(INTEGER(deg)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(X, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg4 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg4_ltmp = reinterpret_cast< double * >(arg4 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg4[_rswigi] = arg4_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg4[_rswigi][_rswigj] =  REAL(X)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)forode(arg1,arg2,arg3,arg4);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(X, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(X)[_rswigi*_rswiglen1+_rswigj] = arg4[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  free(arg4);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_accode__SWIG_0 ( SEXP n, SEXP tau, SEXP deg, SEXP A, SEXP B, SEXP nonzero)
{
  int arg1 ;
  double arg2 ;
  int arg3 ;
  double ***arg4 = (double ***) 0 ;
  double ***arg5 = (double ***) 0 ;
  short **arg6 = (short **) 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(n)[0]);
  arg2 = static_cast< double >(REAL(tau)[0]);
  arg3 = static_cast< int >(INTEGER(deg)[0]);
  res4 = SWIG_R_ConvertPtr(A, &argp4, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "accode" "', argument " "4"" of type '" "double ***""'"); 
  }
  arg4 = reinterpret_cast< double *** >(argp4);
  res5 = SWIG_R_ConvertPtr(B, &argp5, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "accode" "', argument " "5"" of type '" "double ***""'"); 
  }
  arg5 = reinterpret_cast< double *** >(argp5);
  res6 = SWIG_R_ConvertPtr(nonzero, &argp6, SWIGTYPE_p_p_short, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "accode" "', argument " "6"" of type '" "short **""'"); 
  }
  arg6 = reinterpret_cast< short ** >(argp6);
  accode(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = R_NilValue;
  
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_accode__SWIG_1 ( SEXP n, SEXP tau, SEXP deg, SEXP A, SEXP B)
{
  int arg1 ;
  double arg2 ;
  int arg3 ;
  double ***arg4 = (double ***) 0 ;
  double ***arg5 = (double ***) 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(n)[0]);
  arg2 = static_cast< double >(REAL(tau)[0]);
  arg3 = static_cast< int >(INTEGER(deg)[0]);
  res4 = SWIG_R_ConvertPtr(A, &argp4, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "accode" "', argument " "4"" of type '" "double ***""'"); 
  }
  arg4 = reinterpret_cast< double *** >(argp4);
  res5 = SWIG_R_ConvertPtr(B, &argp5, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "accode" "', argument " "5"" of type '" "double ***""'"); 
  }
  arg5 = reinterpret_cast< double *** >(argp5);
  accode(arg1,arg2,arg3,arg4,arg5);
  r_ans = R_NilValue;
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_accode__SWIG_2 ( SEXP n, SEXP deg, SEXP A, SEXP B, SEXP nonzero)
{
  int arg1 ;
  int arg2 ;
  double ***arg3 = (double ***) 0 ;
  double ***arg4 = (double ***) 0 ;
  short **arg5 = (short **) 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(n)[0]);
  arg2 = static_cast< int >(INTEGER(deg)[0]);
  res3 = SWIG_R_ConvertPtr(A, &argp3, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "accode" "', argument " "3"" of type '" "double ***""'"); 
  }
  arg3 = reinterpret_cast< double *** >(argp3);
  res4 = SWIG_R_ConvertPtr(B, &argp4, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "accode" "', argument " "4"" of type '" "double ***""'"); 
  }
  arg4 = reinterpret_cast< double *** >(argp4);
  res5 = SWIG_R_ConvertPtr(nonzero, &argp5, SWIGTYPE_p_p_short, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "accode" "', argument " "5"" of type '" "short **""'"); 
  }
  arg5 = reinterpret_cast< short ** >(argp5);
  accode(arg1,arg2,arg3,arg4,arg5);
  r_ans = R_NilValue;
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_accode__SWIG_3 ( SEXP n, SEXP deg, SEXP A, SEXP B)
{
  int arg1 ;
  int arg2 ;
  double ***arg3 = (double ***) 0 ;
  double ***arg4 = (double ***) 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(n)[0]);
  arg2 = static_cast< int >(INTEGER(deg)[0]);
  res3 = SWIG_R_ConvertPtr(A, &argp3, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "accode" "', argument " "3"" of type '" "double ***""'"); 
  }
  arg3 = reinterpret_cast< double *** >(argp3);
  res4 = SWIG_R_ConvertPtr(B, &argp4, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "accode" "', argument " "4"" of type '" "double ***""'"); 
  }
  arg4 = reinterpret_cast< double *** >(argp4);
  accode(arg1,arg2,arg3,arg4);
  r_ans = R_NilValue;
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_directional_active_gradient ( SEXP tag, SEXP n, SEXP x, SEXP d, SEXP g, SEXP sigma_g, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  short *arg6 = (short *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(tag, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "directional_active_gradient" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(n)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(x);
      arg3 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg3[_rswigi] = REAL(x)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(d);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(d)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(g);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(g)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(sigma_g);
      arg6 = static_cast< short * >(calloc(sizeof(short), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg6[_rswigi] = INTEGER(sigma_g)[_rswigi];
      }
    }
  }
  result = (int)directional_active_gradient(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,4));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(x);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(x)[_rswigi] = arg3[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(d);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(d)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(g);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(g)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  
  
  
  free(arg3);
  
  
  free(arg4);
  
  
  free(arg5);
  
  
  free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_abs_normal ( SEXP tag, SEXP m, SEXP n, SEXP swchk, SEXP x, SEXP y, SEXP z, SEXP cz, SEXP cy, SEXP Y, SEXP J, SEXP Z, SEXP L, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  double **arg10 = (double **) 0 ;
  double **arg11 = (double **) 0 ;
  double **arg12 = (double **) 0 ;
  double **arg13 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(tag, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "abs_normal" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(m)[0]);
  arg3 = static_cast< int >(INTEGER(n)[0]);
  arg4 = static_cast< int >(INTEGER(swchk)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(x);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(x)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(y);
      arg6 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg6[_rswigi] = REAL(y)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(z);
      arg7 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg7[_rswigi] = REAL(z)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(cz);
      arg8 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg8[_rswigi] = REAL(cz)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(cy);
      arg9 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg9[_rswigi] = REAL(cy)[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(Y, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg10 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg10_ltmp = reinterpret_cast< double * >(arg10 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg10[_rswigi] = arg10_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg10[_rswigi][_rswigj] =  REAL(Y)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(J, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg11 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg11_ltmp = reinterpret_cast< double * >(arg11 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg11[_rswigi] = arg11_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg11[_rswigi][_rswigj] =  REAL(J)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(Z, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg12 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg12_ltmp = reinterpret_cast< double * >(arg12 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg12[_rswigi] = arg12_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg12[_rswigi][_rswigj] =  REAL(Z)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(L, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg13 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg13_ltmp = reinterpret_cast< double * >(arg13 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg13[_rswigi] = arg13_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg13[_rswigi][_rswigj] =  REAL(L)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  result = (int)abs_normal(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,10));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(x);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(x)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(y);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(y)[_rswigi] = arg6[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(z);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(z)[_rswigi] = arg7[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(cz);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(cz)[_rswigi] = arg8[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(cy);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(cy)[_rswigi] = arg9[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(Y, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(Y)[_rswigi*_rswiglen1+_rswigj] = arg10[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(J, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(J)[_rswigi*_rswiglen1+_rswigj] = arg11[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(Z, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(Z)[_rswigi*_rswiglen1+_rswigj] = arg12[_rswigi][_rswigj];
        }
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(L, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(L)[_rswigi*_rswiglen1+_rswigj] = arg13[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  free(arg6);
  
  
  free(arg7);
  
  
  free(arg8);
  
  
  free(arg9);
  
  
  free(arg10);
  
  
  free(arg11);
  
  
  free(arg12);
  
  
  free(arg13);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_tape_doc ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5)
{
  short arg1 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tape_doc" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  tape_doc(arg1,arg2,arg3,arg4,arg5);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,1));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  free(arg5);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_jac_pat ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  unsigned int **arg5 = (unsigned int **) 0 ;
  int *arg6 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "jac_pat" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  res5 = SWIG_R_ConvertPtr(s_arg5, &argp5, SWIGTYPE_p_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "jac_pat" "', argument " "5"" of type '" "unsigned int **""'"); 
  }
  arg5 = reinterpret_cast< unsigned int ** >(argp5);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg6[_rswigi] = INTEGER(s_arg6)[_rswigi];
      }
    }
  }
  result = (int)jac_pat(arg1,arg2,arg3,(double const *)arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  
  free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_absnormal_jac_pat ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  unsigned int **arg6 = (unsigned int **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "absnormal_jac_pat" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  arg4 = static_cast< int >(INTEGER(s_arg4)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg5[_rswigi] = REAL(s_arg5)[_rswigi];
      }
    }
  }
  res6 = SWIG_R_ConvertPtr(s_arg6, &argp6, SWIGTYPE_p_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "absnormal_jac_pat" "', argument " "6"" of type '" "unsigned int **""'"); 
  }
  arg6 = reinterpret_cast< unsigned int ** >(argp6);
  result = (int)absnormal_jac_pat(arg1,arg2,arg3,arg4,(double const *)arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg5)[_rswigi] = arg5[_rswigi];
      }
    }
  }
  
  
  
  
  
  free(arg5);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_generate_seed_jac ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6)
{
  int arg1 ;
  int arg2 ;
  unsigned int **arg3 = (unsigned int **) 0 ;
  double ***arg4 = (double ***) 0 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(s_arg1)[0]);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  res3 = SWIG_R_ConvertPtr(s_arg3, &argp3, SWIGTYPE_p_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "generate_seed_jac" "', argument " "3"" of type '" "unsigned int **""'"); 
  }
  arg3 = reinterpret_cast< unsigned int ** >(argp3);
  res4 = SWIG_R_ConvertPtr(s_arg4, &argp4, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "generate_seed_jac" "', argument " "4"" of type '" "double ***""'"); 
  }
  arg4 = reinterpret_cast< double *** >(argp4);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg5[_rswigi] = INTEGER(s_arg5)[_rswigi];
      }
    }
  }
  arg6 = static_cast< int >(INTEGER(s_arg6)[0]);
  generate_seed_jac(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = R_NilValue;
  
  
  
  
  
  free(arg5);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_hess_pat ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  unsigned int **arg4 = (unsigned int **) 0 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hess_pat" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg3);
      arg3 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg3[_rswigi] = REAL(s_arg3)[_rswigi];
      }
    }
  }
  res4 = SWIG_R_ConvertPtr(s_arg4, &argp4, SWIGTYPE_p_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "hess_pat" "', argument " "4"" of type '" "unsigned int **""'"); 
  }
  arg4 = reinterpret_cast< unsigned int ** >(argp4);
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  result = (int)hess_pat(arg1,arg2,(double const *)arg3,arg4,arg5);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg3);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg3)[_rswigi] = arg3[_rswigi];
      }
    }
  }
  
  
  
  free(arg3);
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_generate_seed_hess ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5)
{
  int arg1 ;
  unsigned int **arg2 = (unsigned int **) 0 ;
  double ***arg3 = (double ***) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(s_arg1)[0]);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "generate_seed_hess" "', argument " "2"" of type '" "unsigned int **""'"); 
  }
  arg2 = reinterpret_cast< unsigned int ** >(argp2);
  res3 = SWIG_R_ConvertPtr(s_arg3, &argp3, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "generate_seed_hess" "', argument " "3"" of type '" "double ***""'"); 
  }
  arg3 = reinterpret_cast< double *** >(argp3);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg4[_rswigi] = INTEGER(s_arg4)[_rswigi];
      }
    }
  }
  arg5 = static_cast< int >(INTEGER(s_arg5)[0]);
  generate_seed_hess(arg1,arg2,arg3,arg4,arg5);
  r_ans = R_NilValue;
  
  
  
  
  free(arg4);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_sparse_hess ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_arg7, SEXP s_arg8, SEXP s_arg9, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int *arg5 = (int *) 0 ;
  unsigned int **arg6 = (unsigned int **) 0 ;
  unsigned int **arg7 = (unsigned int **) 0 ;
  double **arg8 = (double **) 0 ;
  int *arg9 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sparse_hess" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg5);
      arg5 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg5[_rswigi] = INTEGER(s_arg5)[_rswigi];
      }
    }
  }
  res6 = SWIG_R_ConvertPtr(s_arg6, &argp6, SWIGTYPE_p_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "sparse_hess" "', argument " "6"" of type '" "unsigned int **""'"); 
  }
  arg6 = reinterpret_cast< unsigned int ** >(argp6);
  res7 = SWIG_R_ConvertPtr(s_arg7, &argp7, SWIGTYPE_p_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "sparse_hess" "', argument " "7"" of type '" "unsigned int **""'"); 
  }
  arg7 = reinterpret_cast< unsigned int ** >(argp7);
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg8, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg8 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg8_ltmp = reinterpret_cast< double * >(arg8 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg8[_rswigi] = arg8_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg8[_rswigi][_rswigj] =  REAL(s_arg8)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg9);
      arg9 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg9[_rswigi] = INTEGER(s_arg9)[_rswigi];
      }
    }
  }
  result = (int)sparse_hess(arg1,arg2,arg3,(double const *)arg4,arg5,arg6,arg7,arg8,arg9);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,3));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg8, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg8)[_rswigi*_rswiglen1+_rswigj] = arg8[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  free(arg5);
  
  
  
  
  free(arg8);
  
  
  free(arg9);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_set_HP ( SEXP tag, SEXP indep, SEXP HP)
{
  short arg1 ;
  int arg2 ;
  unsigned int **arg3 = (unsigned int **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(tag, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_HP" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(indep)[0]);
  res3 = SWIG_R_ConvertPtr(HP, &argp3, SWIGTYPE_p_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "set_HP" "', argument " "3"" of type '" "unsigned int **""'"); 
  }
  arg3 = reinterpret_cast< unsigned int ** >(argp3);
  set_HP(arg1,arg2,arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_get_HP ( SEXP tag, SEXP indep, SEXP HP)
{
  short arg1 ;
  int arg2 ;
  unsigned int ***arg3 = (unsigned int ***) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(tag, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_HP" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(indep)[0]);
  res3 = SWIG_R_ConvertPtr(HP, &argp3, SWIGTYPE_p_p_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "get_HP" "', argument " "3"" of type '" "unsigned int ***""'"); 
  }
  arg3 = reinterpret_cast< unsigned int *** >(argp3);
  get_HP(arg1,arg2,arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_bit_vector_propagation ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3, SEXP s_arg4, SEXP s_arg5, SEXP s_arg6, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  unsigned int **arg5 = (unsigned int **) 0 ;
  int *arg6 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "bit_vector_propagation" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  arg3 = static_cast< int >(INTEGER(s_arg3)[0]);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      arg4 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg4[_rswigi] = REAL(s_arg4)[_rswigi];
      }
    }
  }
  res5 = SWIG_R_ConvertPtr(s_arg5, &argp5, SWIGTYPE_p_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "bit_vector_propagation" "', argument " "5"" of type '" "unsigned int **""'"); 
  }
  arg5 = reinterpret_cast< unsigned int ** >(argp5);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg6);
      arg6 = static_cast< int * >(calloc(sizeof(int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg6[_rswigi] = INTEGER(s_arg6)[_rswigi];
      }
    }
  }
  result = (int)bit_vector_propagation(arg1,arg2,arg3,(double const *)arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  Rf_protect(r_ans);
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,2));
  r_nprotect += 2;
  SET_VECTOR_ELT(R_OutputValues, 0, r_ans);
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg4);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg4)[_rswigi] = arg4[_rswigi];
      }
    }
  }
  
  
  
  
  free(arg4);
  
  
  
  free(arg6);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_skip_tracefile_cleanup ( SEXP tnum)
{
  short arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(tnum, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "skip_tracefile_cleanup" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  skip_tracefile_cleanup(arg1);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_tapestats ( SEXP tag, SEXP tape_stats)
{
  short arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(tag, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tapestats" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(tape_stats);
      arg2 = static_cast< size_t * >(calloc(sizeof(size_t), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg2[_rswigi] = INTEGER(tape_stats)[_rswigi];
      }
    }
  }
  tapestats(arg1,arg2);
  r_ans = R_NilValue;
  
  
  free(arg2);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_set_nested_ctx ( SEXP tag, SEXP nested)
{
  short arg1 ;
  char arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(tag, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_nested_ctx" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< char >(CHAR(STRING_ELT(nested, 0))[0]);
  set_nested_ctx(arg1,arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_currently_nested ( SEXP tag, SEXP s_swig_copy)
{
  char result;
  short arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(tag, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "currently_nested" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  result = (char)currently_nested(arg1);
  {
    char tmp[2] = "x";
    tmp[0] = result;    
    r_ans = Rf_mkString(tmp); 
  }
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_printTapeStats ( SEXP stream, SEXP tag)
{
  FILE *arg1 = (FILE *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(stream, &argp1, SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "printTapeStats" "', argument " "1"" of type '" "FILE *""'"); 
  }
  arg1 = reinterpret_cast< FILE * >(argp1);
  ecode2 = SWIG_AsVal_int(tag, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "printTapeStats" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  printTapeStats(arg1,arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cleanUp ( )
{
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  cleanUp();
  r_ans = R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_removeTape ( SEXP tapeID, SEXP type, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  short arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(tapeID, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "removeTape" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  ecode2 = SWIG_AsVal_int(type, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "removeTape" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  result = (int)removeTape(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_enableBranchSwitchWarnings ( )
{
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  enableBranchSwitchWarnings();
  r_ans = R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_disableBranchSwitchWarnings ( )
{
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  disableBranchSwitchWarnings();
  r_ans = R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_enableMinMaxUsingAbs ( )
{
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  enableMinMaxUsingAbs();
  r_ans = R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_disableMinMaxUsingAbs ( )
{
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  disableMinMaxUsingAbs();
  r_ans = R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_setStoreManagerControl ( SEXP gcTriggerRatio, SEXP gcTriggerMaxSize)
{
  double arg1 ;
  size_t arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(gcTriggerRatio)[0]);
  ecode2 = SWIG_AsVal_int(gcTriggerMaxSize, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setStoreManagerControl" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  setStoreManagerControl(arg1,arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_initADOLC ( )
{
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  initADOLC();
  r_ans = R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_trace_on__SWIG_0 ( SEXP tnum, SEXP keepTaylors, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(tnum, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "trace_on" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(keepTaylors)[0]);
  result = (int)trace_on(arg1,arg2);
  r_ans = Rf_ScalarInteger(result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_trace_on__SWIG_1 ( SEXP tnum, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(tnum, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "trace_on" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  result = (int)trace_on(arg1);
  r_ans = Rf_ScalarInteger(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_trace_on__SWIG_2 ( SEXP tnum, SEXP keepTaylors, SEXP obs, SEXP lbs, SEXP vbs, SEXP tbs, SEXP skipFileCleanup, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  uint arg3 ;
  uint arg4 ;
  uint arg5 ;
  uint arg6 ;
  int arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(tnum, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "trace_on" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(keepTaylors)[0]);
  ecode3 = SWIG_AsVal_int(obs, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "trace_on" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  ecode4 = SWIG_AsVal_int(lbs, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "trace_on" "', argument " "4"" of type '" "uint""'");
  } 
  arg4 = static_cast< uint >(val4);
  ecode5 = SWIG_AsVal_int(vbs, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "trace_on" "', argument " "5"" of type '" "uint""'");
  } 
  arg5 = static_cast< uint >(val5);
  ecode6 = SWIG_AsVal_int(tbs, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "trace_on" "', argument " "6"" of type '" "uint""'");
  } 
  arg6 = static_cast< uint >(val6);
  arg7 = static_cast< int >(INTEGER(skipFileCleanup)[0]);
  result = (int)trace_on(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_trace_on__SWIG_3 ( SEXP tnum, SEXP keepTaylors, SEXP obs, SEXP lbs, SEXP vbs, SEXP tbs, SEXP s_swig_copy)
{
  int result;
  short arg1 ;
  int arg2 ;
  uint arg3 ;
  uint arg4 ;
  uint arg5 ;
  uint arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(tnum, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "trace_on" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  arg2 = static_cast< int >(INTEGER(keepTaylors)[0]);
  ecode3 = SWIG_AsVal_int(obs, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "trace_on" "', argument " "3"" of type '" "uint""'");
  } 
  arg3 = static_cast< uint >(val3);
  ecode4 = SWIG_AsVal_int(lbs, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "trace_on" "', argument " "4"" of type '" "uint""'");
  } 
  arg4 = static_cast< uint >(val4);
  ecode5 = SWIG_AsVal_int(vbs, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "trace_on" "', argument " "5"" of type '" "uint""'");
  } 
  arg5 = static_cast< uint >(val5);
  ecode6 = SWIG_AsVal_int(tbs, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "trace_on" "', argument " "6"" of type '" "uint""'");
  } 
  arg6 = static_cast< uint >(val6);
  result = (int)trace_on(arg1,arg2,arg3,arg4,arg5,arg6);
  r_ans = Rf_ScalarInteger(result);
  
  
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_trace_off__SWIG_0 ( SEXP flag)
{
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(flag)[0]);
  trace_off(arg1);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_trace_off__SWIG_1 ( )
{
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  trace_off();
  r_ans = R_NilValue;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_isTaping ( SEXP s_swig_copy)
{
  bool result;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (bool)isTaping();
  r_ans = Rf_ScalarLogical(result);
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cachedTraceTags ( SEXP result)
{
  std::vector< short > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(result, &argp1, SWIGTYPE_p_std__vectorT_short_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cachedTraceTags" "', argument " "1"" of type '" "std::vector< short > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cachedTraceTags" "', argument " "1"" of type '" "std::vector< short > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< short > * >(argp1);
  cachedTraceTags(*arg1);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_populate_dpp ( SEXP pointer, SEXP memory, SEXP n, SEXP m)
{
  char *result = 0 ;
  double ***arg1 = (double ***) (double ***)0 ;
  char *arg2 = (char *) (char *)0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(pointer, &argp1, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "populate_dpp" "', argument " "1"" of type '" "double ***const""'"); 
  }
  arg1 = reinterpret_cast< double *** >(argp1);
  arg2 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(memory, 0))));
  arg3 = static_cast< int >(INTEGER(n)[0]);
  arg4 = static_cast< int >(INTEGER(m)[0]);
  result = (char *)populate_dpp(arg1,arg2,arg3,arg4);
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  
  free(arg2);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_populate_dppp ( SEXP pointer, SEXP memory, SEXP n, SEXP m, SEXP p)
{
  char *result = 0 ;
  double ****arg1 = (double ****) (double ****)0 ;
  char *arg2 = (char *) (char *)0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(pointer, &argp1, SWIGTYPE_p_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "populate_dppp" "', argument " "1"" of type '" "double ****const""'"); 
  }
  arg1 = reinterpret_cast< double **** >(argp1);
  arg2 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(memory, 0))));
  arg3 = static_cast< int >(INTEGER(n)[0]);
  arg4 = static_cast< int >(INTEGER(m)[0]);
  arg5 = static_cast< int >(INTEGER(p)[0]);
  result = (char *)populate_dppp(arg1,arg2,arg3,arg4,arg5);
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  
  free(arg2);
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_populate_dppp_nodata ( SEXP pointer, SEXP memory, SEXP n, SEXP m)
{
  char *result = 0 ;
  double ****arg1 = (double ****) (double ****)0 ;
  char *arg2 = (char *) (char *)0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(pointer, &argp1, SWIGTYPE_p_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "populate_dppp_nodata" "', argument " "1"" of type '" "double ****const""'"); 
  }
  arg1 = reinterpret_cast< double **** >(argp1);
  arg2 = reinterpret_cast< char * >(SWIG_strdup(CHAR(STRING_ELT(memory, 0))));
  arg3 = static_cast< int >(INTEGER(n)[0]);
  arg4 = static_cast< int >(INTEGER(m)[0]);
  result = (char *)populate_dppp_nodata(arg1,arg2,arg3,arg4);
  r_ans = result ? Rf_mkString(reinterpret_cast< char * >(result)) : R_NilValue;
  
  free(arg2);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myalloc1 ( SEXP s_arg1)
{
  double *result = 0 ;
  size_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "myalloc1" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (double *)myalloc1(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myalloc2 ( SEXP s_arg1, SEXP s_arg2)
{
  double **result = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "myalloc2" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_int(s_arg2, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "myalloc2" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (double **)myalloc2(arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_double, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myalloc3 ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3)
{
  double ***result = 0 ;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(s_arg1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "myalloc3" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_int(s_arg2, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "myalloc3" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_int(s_arg3, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "myalloc3" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (double ***)myalloc3(arg1,arg2,arg3);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_p_double, R_SWIG_EXTERNAL |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myfree1 ( SEXP s_arg1)
{
  double *arg1 = (double *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg1);
      arg1 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg1[_rswigi] = REAL(s_arg1)[_rswigi];
      }
    }
  }
  myfree1(arg1);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg1);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(s_arg1)[_rswigi] = arg1[_rswigi];
      }
    }
  }
  
  free(arg1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myfree2 ( SEXP s_arg1)
{
  double **arg1 = (double **) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg1, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg1 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg1_ltmp = reinterpret_cast< double * >(arg1 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg1[_rswigi] = arg1_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg1[_rswigi][_rswigj] =  REAL(s_arg1)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  myfree2(arg1);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg1, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg1)[_rswigi*_rswiglen1+_rswigj] = arg1[_rswigi][_rswigj];
        }
      }
    }
  }
  
  free(arg1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myfree3 ( SEXP s_arg1)
{
  double ***arg1 = (double ***) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "myfree3" "', argument " "1"" of type '" "double ***""'"); 
  }
  arg1 = reinterpret_cast< double *** >(argp1);
  myfree3(arg1);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myallocI2 ( SEXP s_arg1)
{
  double **result = 0 ;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(s_arg1)[0]);
  result = (double **)myallocI2(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_double, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myfreeI2 ( SEXP s_arg1, SEXP s_arg2)
{
  int arg1 ;
  double **arg2 = (double **) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  arg1 = static_cast< int >(INTEGER(s_arg1)[0]);
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg2, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg2 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg2_ltmp = reinterpret_cast< double * >(arg2 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg2[_rswigi] = arg2_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg2[_rswigi][_rswigj] =  REAL(s_arg2)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  myfreeI2(arg1,arg2);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(s_arg2, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(s_arg2)[_rswigi*_rswiglen1+_rswigj] = arg2[_rswigi][_rswigj];
        }
      }
    }
  }
  
  
  free(arg2);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myalloc1_uint ( SEXP s_arg1)
{
  unsigned int *result = 0 ;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(s_arg1)[0]);
  result = (unsigned int *)myalloc1_uint(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_int, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myalloc1_ulong ( SEXP s_arg1)
{
  unsigned long *result = 0 ;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(s_arg1)[0]);
  result = (unsigned long *)myalloc1_ulong(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_long, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myalloc2_ulong ( SEXP s_arg1, SEXP s_arg2)
{
  unsigned long **result = 0 ;
  int arg1 ;
  int arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(s_arg1)[0]);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  result = (unsigned long **)myalloc2_ulong(arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_unsigned_long, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myfree1_uint ( SEXP s_arg1)
{
  unsigned int *arg1 = (unsigned int *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg1);
      arg1 = static_cast< unsigned int * >(calloc(sizeof(unsigned int), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg1[_rswigi] = INTEGER(s_arg1)[_rswigi];
      }
    }
  }
  myfree1_uint(arg1);
  r_ans = R_NilValue;
  
  free(arg1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myfree1_ulong ( SEXP s_arg1)
{
  unsigned long *arg1 = (unsigned long *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(s_arg1);
      arg1 = static_cast< unsigned long * >(calloc(sizeof(unsigned long), _rswiglen));
      for (_rswigi=0; _rswigi< _rswiglen; _rswigi++) {
        arg1[_rswigi] = INTEGER(s_arg1)[_rswigi];
      }
    }
  }
  myfree1_ulong(arg1);
  r_ans = R_NilValue;
  
  free(arg1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myfree2_ulong ( SEXP s_arg1)
{
  unsigned long **arg1 = (unsigned long **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_p_unsigned_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "myfree2_ulong" "', argument " "1"" of type '" "unsigned long **""'"); 
  }
  arg1 = reinterpret_cast< unsigned long ** >(argp1);
  myfree2_ulong(arg1);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myalloc__SWIG_0 ( SEXP n)
{
  double *result = 0 ;
  int arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(n)[0]);
  result = (double *)myalloc(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myalloc__SWIG_1 ( SEXP m, SEXP n)
{
  double **result = 0 ;
  int arg1 ;
  int arg2 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(m)[0]);
  arg2 = static_cast< int >(INTEGER(n)[0]);
  result = (double **)myalloc(arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_double, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myalloc__SWIG_2 ( SEXP m, SEXP n, SEXP p)
{
  double ***result = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< int >(INTEGER(m)[0]);
  arg2 = static_cast< int >(INTEGER(n)[0]);
  arg3 = static_cast< int >(INTEGER(p)[0]);
  result = (double ***)myalloc(arg1,arg2,arg3);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_p_double, R_SWIG_EXTERNAL |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myfree__SWIG_0 ( SEXP A)
{
  double *arg1 = (double *) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(A);
      arg1 = static_cast< double * >(calloc(sizeof(double), _rswiglen));
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        arg1[_rswigi] = REAL(A)[_rswigi];
      }
    }
  }
  myfree(arg1);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    {
      int _rswigi;
      int _rswiglen = LENGTH(A);
      for (_rswigi=0; _rswigi<_rswiglen; _rswigi++) {
        REAL(A)[_rswigi] = arg1[_rswigi];
      }
    }
  }
  
  free(arg1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myfree__SWIG_1 ( SEXP A)
{
  double **arg1 = (double **) 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  SEXP R_OutputValues;
  
  {
    {
      SEXP r_dim = Rf_getAttrib(A, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      arg1 = static_cast< double ** >(malloc(sizeof(double)*_rswiglen0*_rswiglen1+ sizeof(size_t)*_rswiglen0));
      double * arg1_ltmp = reinterpret_cast< double * >(arg1 + _rswiglen0);
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        arg1[_rswigi] = arg1_ltmp + _rswigi *  _rswiglen1;
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          arg1[_rswigi][_rswigj] =  REAL(A)[_rswigi*_rswiglen1+_rswigj];
        }
      }
    }
  }
  myfree(arg1);
  r_ans = R_NilValue;
  Rf_protect(R_OutputValues = Rf_allocVector(VECSXP,0));
  r_nprotect += 1;
  r_ans = R_OutputValues;
  {
    {
      SEXP r_dim = Rf_getAttrib(A, R_DimSymbol) ;
      int _rswiglen0 = INTEGER(r_dim)[0];
      int _rswiglen1 = INTEGER(r_dim)[1];
      int _rswigi, _rswigj;
      for (_rswigi=0; _rswigi<_rswiglen0; _rswigi++) {
        for (_rswigj=0; _rswigj<_rswiglen1; _rswigj++) {
          REAL(A)[_rswigi*_rswiglen1+_rswigj] = arg1[_rswigi][_rswigj];
        }
      }
    }
  }
  
  free(arg1);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_myfree__SWIG_2 ( SEXP A)
{
  double ***arg1 = (double ***) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(A, &argp1, SWIGTYPE_p_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "myfree" "', argument " "1"" of type '" "double ***""'"); 
  }
  arg1 = reinterpret_cast< double *** >(argp1);
  myfree(arg1);
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Plus__SWIG_0 ( SEXP x)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(x, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plus" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plus" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = (adub *)operator +((badouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Minus__SWIG_0 ( SEXP x)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(x, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minus" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Minus" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = (adub *)operator -((badouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Minus__SWIG_1 ( SEXP s_arg1)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minus" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Minus" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  result = (adub *)operator -((pdouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Plus__SWIG_1 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plus" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plus" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plus" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plus" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adub *)operator +((badouble const &)*arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Plus__SWIG_2 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  double arg1 ;
  badouble *arg2 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plus" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plus" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adub *)operator +(arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Plus__SWIG_3 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plus" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plus" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (adub *)operator +((badouble const &)*arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Minus__SWIG_2 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minus" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Minus" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Minus" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Minus" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adub *)operator -((badouble const &)*arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Minus__SWIG_3 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minus" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Minus" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (adub *)operator -((badouble const &)*arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Minus__SWIG_4 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  double arg1 ;
  badouble *arg2 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Minus" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Minus" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adub *)operator -(arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Multiply__SWIG_0 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multiply" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Multiply" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Multiply" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Multiply" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adub *)operator *((badouble const &)*arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Multiply__SWIG_1 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  double arg1 ;
  badouble *arg2 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Multiply" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Multiply" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adub *)operator *(arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Multiply__SWIG_2 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multiply" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Multiply" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (adub *)operator *((badouble const &)*arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Divide__SWIG_0 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Divide" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Divide" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (adub *)operator /((badouble const &)*arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Divide__SWIG_1 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Divide" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Divide" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Divide" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Divide" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adub *)operator /((badouble const &)*arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Divide__SWIG_2 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  double arg1 ;
  badouble *arg2 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Divide" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Divide" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adub *)operator /(arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Plus__SWIG_4 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plus" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plus" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plus" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plus" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adub *)operator +((pdouble const &)*arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Plus__SWIG_5 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plus" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plus" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (adub *)operator +((pdouble const &)*arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Plus__SWIG_6 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  double arg1 ;
  pdouble *arg2 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plus" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plus" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adub *)operator +(arg1,(pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Plus__SWIG_7 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plus" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plus" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plus" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plus" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adub *)operator +((badouble const &)*arg1,(pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Minus__SWIG_5 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minus" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Minus" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Minus" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Minus" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adub *)operator -((badouble const &)*arg1,(pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Minus__SWIG_6 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minus" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Minus" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (adub *)operator -((pdouble const &)*arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Minus__SWIG_7 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  double arg1 ;
  pdouble *arg2 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Minus" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Minus" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adub *)operator -(arg1,(pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Minus__SWIG_8 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Minus" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Minus" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Minus" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Minus" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adub *)operator -((pdouble const &)*arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Multiply__SWIG_3 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multiply" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Multiply" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Multiply" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Multiply" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adub *)operator *((badouble const &)*arg1,(pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Multiply__SWIG_4 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multiply" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Multiply" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Multiply" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Multiply" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adub *)operator *((pdouble const &)*arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Multiply__SWIG_5 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Multiply" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Multiply" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (adub *)operator *((pdouble const &)*arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Multiply__SWIG_6 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  double arg1 ;
  pdouble *arg2 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Multiply" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Multiply" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adub *)operator *(arg1,(pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_recipr ( SEXP s_arg1)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "recipr" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "recipr" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  result = (adub *)recipr((pdouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Divide__SWIG_3 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Divide" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Divide" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Divide" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Divide" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adub *)operator /((badouble const &)*arg1,(pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Divide__SWIG_4 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  double arg1 ;
  pdouble *arg2 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Divide" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Divide" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adub *)operator /(arg1,(pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Divide__SWIG_5 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Divide" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Divide" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (adub *)operator /((pdouble const &)*arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_Divide__SWIG_6 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Divide" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Divide" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Divide" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Divide" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adub *)operator /((pdouble const &)*arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_exp__SWIG_0 ( SEXP s_arg1)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "exp" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = (adub *)exp((badouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_log__SWIG_0 ( SEXP s_arg1)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "log" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "log" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = (adub *)log((badouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_sqrt__SWIG_0 ( SEXP s_arg1)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqrt" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sqrt" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = (adub *)sqrt((badouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_sin__SWIG_0 ( SEXP s_arg1)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sin" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sin" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = (adub *)sin((badouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cos__SWIG_0 ( SEXP s_arg1)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cos" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cos" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = (adub *)cos((badouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_tan__SWIG_0 ( SEXP s_arg1)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tan" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tan" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = (adub *)tan((badouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_asin__SWIG_0 ( SEXP s_arg1)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "asin" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "asin" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = (adub *)asin((badouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_acos__SWIG_0 ( SEXP s_arg1)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "acos" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "acos" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = (adub *)acos((badouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_atan__SWIG_0 ( SEXP s_arg1)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atan" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "atan" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = (adub *)atan((badouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_pow__SWIG_3 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pow" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pow" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (adub *)pow((badouble const &)*arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_log10__SWIG_0 ( SEXP s_arg1)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "log10" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "log10" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = (adub *)log10((badouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_pow__SWIG_4 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pow" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pow" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pow" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pow" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adub *)pow((badouble const &)*arg1,(pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_sinh__SWIG_0 ( SEXP s_arg1)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sinh" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sinh" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = (adub *)sinh((badouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cosh__SWIG_0 ( SEXP s_arg1)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cosh" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cosh" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = (adub *)cosh((badouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_tanh__SWIG_0 ( SEXP s_arg1)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tanh" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tanh" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = (adub *)tanh((badouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fabs__SWIG_0 ( SEXP s_arg1)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fabs" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fabs" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = (adub *)fabs((badouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_ceil__SWIG_0 ( SEXP s_arg1)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ceil" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ceil" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = (adub *)ceil((badouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_floor__SWIG_0 ( SEXP s_arg1)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floor" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "floor" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  result = (adub *)floor((badouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fmax__SWIG_0 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmax" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmax" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fmax" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmax" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adub *)fmax((badouble const &)*arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fmax__SWIG_1 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  double arg1 ;
  badouble *arg2 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fmax" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmax" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adub *)fmax(arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fmax__SWIG_2 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmax" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmax" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (adub *)fmax((badouble const &)*arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fmin__SWIG_0 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmin" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmin" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fmin" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmin" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adub *)fmin((badouble const &)*arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fmin__SWIG_1 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  double arg1 ;
  badouble *arg2 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fmin" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmin" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adub *)fmin(arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fmin__SWIG_2 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmin" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmin" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (adub *)fmin((badouble const &)*arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fmax__SWIG_3 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmax" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmax" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fmax" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmax" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adub *)fmax((pdouble const &)*arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fmax__SWIG_4 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmax" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmax" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fmax" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmax" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adub *)fmax((badouble const &)*arg1,(pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fmin__SWIG_3 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  badouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmin" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmin" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fmin" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmin" "', argument " "2"" of type '" "badouble const &""'"); 
  }
  arg2 = reinterpret_cast< badouble * >(argp2);
  result = (adub *)fmin((pdouble const &)*arg1,(badouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fmin__SWIG_4 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmin" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmin" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fmin" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmin" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adub *)fmin((badouble const &)*arg1,(pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_ldexp__SWIG_0 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  badouble *arg1 = 0 ;
  int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_badouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldexp" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ldexp" "', argument " "1"" of type '" "badouble const &""'"); 
  }
  arg1 = reinterpret_cast< badouble * >(argp1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  result = (adub *)ldexp((badouble const &)*arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_exp__SWIG_1 ( SEXP s_arg1)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "exp" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  result = (adub *)exp((pdouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_log__SWIG_1 ( SEXP s_arg1)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "log" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "log" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  result = (adub *)log((pdouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_sqrt__SWIG_1 ( SEXP s_arg1)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sqrt" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sqrt" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  result = (adub *)sqrt((pdouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_sin__SWIG_1 ( SEXP s_arg1)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sin" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sin" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  result = (adub *)sin((pdouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cos__SWIG_1 ( SEXP s_arg1)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cos" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cos" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  result = (adub *)cos((pdouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_tan__SWIG_1 ( SEXP s_arg1)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tan" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tan" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  result = (adub *)tan((pdouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_asin__SWIG_1 ( SEXP s_arg1)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "asin" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "asin" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  result = (adub *)asin((pdouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_acos__SWIG_1 ( SEXP s_arg1)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "acos" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "acos" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  result = (adub *)acos((pdouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_atan__SWIG_1 ( SEXP s_arg1)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atan" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "atan" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  result = (adub *)atan((pdouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_pow__SWIG_5 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pow" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pow" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (adub *)pow((pdouble const &)*arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_log10__SWIG_1 ( SEXP s_arg1)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "log10" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "log10" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  result = (adub *)log10((pdouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_sinh__SWIG_1 ( SEXP s_arg1)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sinh" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sinh" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  result = (adub *)sinh((pdouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_cosh__SWIG_1 ( SEXP s_arg1)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cosh" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "cosh" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  result = (adub *)cosh((pdouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_tanh__SWIG_1 ( SEXP s_arg1)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tanh" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tanh" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  result = (adub *)tanh((pdouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fabs__SWIG_1 ( SEXP s_arg1)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fabs" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fabs" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  result = (adub *)fabs((pdouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_ceil__SWIG_1 ( SEXP s_arg1)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ceil" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ceil" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  result = (adub *)ceil((pdouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_floor__SWIG_1 ( SEXP s_arg1)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floor" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "floor" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  result = (adub *)floor((pdouble const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fmax__SWIG_5 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmax" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmax" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fmax" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmax" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adub *)fmax((pdouble const &)*arg1,(pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fmax__SWIG_6 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  double arg1 ;
  pdouble *arg2 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fmax" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmax" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adub *)fmax(arg1,(pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fmax__SWIG_7 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmax" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmax" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (adub *)fmax((pdouble const &)*arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fmin__SWIG_5 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  pdouble *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmin" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmin" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fmin" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmin" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adub *)fmin((pdouble const &)*arg1,(pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fmin__SWIG_6 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  double arg1 ;
  pdouble *arg2 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(s_arg1)[0]);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fmin" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmin" "', argument " "2"" of type '" "pdouble const &""'"); 
  }
  arg2 = reinterpret_cast< pdouble * >(argp2);
  result = (adub *)fmin(arg1,(pdouble const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_fmin__SWIG_7 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fmin" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fmin" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  arg2 = static_cast< double >(REAL(s_arg2)[0]);
  result = (adub *)fmin((pdouble const &)*arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_ldexp__SWIG_1 ( SEXP s_arg1, SEXP s_arg2)
{
  adub *result = 0 ;
  pdouble *arg1 = 0 ;
  int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_pdouble,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldexp" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ldexp" "', argument " "1"" of type '" "pdouble const &""'"); 
  }
  arg1 = reinterpret_cast< pdouble * >(argp1);
  arg2 = static_cast< int >(INTEGER(s_arg2)[0]);
  result = (adub *)ldexp((pdouble const &)*arg1,arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_adolc_vec_dot ( SEXP s_arg1, SEXP s_arg2, SEXP s_arg3)
{
  adub *result = 0 ;
  adouble *arg1 = (adouble *) (adouble *)0 ;
  adouble *arg2 = (adouble *) (adouble *)0 ;
  locint arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adolc_vec_dot" "', argument " "1"" of type '" "adouble const *const""'"); 
  }
  arg1 = reinterpret_cast< adouble * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_arg2, &argp2, SWIGTYPE_p_adouble, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adolc_vec_dot" "', argument " "2"" of type '" "adouble const *const""'"); 
  }
  arg2 = reinterpret_cast< adouble * >(argp2);
  {
    res3 = SWIG_R_ConvertPtr(s_arg3, &argp3, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "adolc_vec_dot" "', argument " "3"" of type '" "locint""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adolc_vec_dot" "', argument " "3"" of type '" "locint""'");
    } else {
      arg3 = *(reinterpret_cast< locint * >(argp3));
    }
  }
  result = (adub *)adolc_vec_dot((adouble const *)arg1,(adouble const *)arg2,arg3);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_adub, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_mkparam ( SEXP pval)
{
  pdouble *result = 0 ;
  double arg1 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  arg1 = static_cast< double >(REAL(pval)[0]);
  result = (pdouble *)mkparam(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pdouble, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_getparam ( SEXP index)
{
  pdouble *result = 0 ;
  locint arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    res1 = SWIG_R_ConvertPtr(index, &argp1, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getparam" "', argument " "1"" of type '" "locint""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getparam" "', argument " "1"" of type '" "locint""'");
    } else {
      arg1 = *(reinterpret_cast< locint * >(argp1));
    }
  }
  result = (pdouble *)getparam(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pdouble, R_SWIG_EXTERNAL |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_adubTo_p_badouble(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((badouble *)  ((adub *) x));
}
static void *_p_adoubleTo_p_badouble(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((badouble *)  ((adouble *) x));
}
static swig_type_info _swigt__p_CP_Context = {"_p_CP_Context", "CP_Context *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CpInfos = {"_p_CpInfos", "CpInfos *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EDFobject = {"_p_EDFobject", "EDFobject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EDFobject_iArr = {"_p_EDFobject_iArr", "EDFobject_iArr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EDFobject_v2 = {"_p_EDFobject_v2", "EDFobject_v2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_adouble = {"_p_adouble", "adouble *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_adub = {"_p_adub", "adub *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_adubref = {"_p_adubref", "adubref *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_advector = {"_p_advector", "advector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_badouble = {"_p_badouble", "badouble *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "revreal *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ext_diff_fct = {"_p_ext_diff_fct", "ext_diff_fct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ext_diff_fct_v2 = {"_p_ext_diff_fct_v2", "ext_diff_fct_v2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f___p_void = {"_p_f___p_void", "void *(*)()|ADOLC_saveFct", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_int_p_p_double_int_int_p_p_p_double_p_p_short__int = {"_p_f_int_int_p_p_double_int_int_p_p_p_double_p_p_short__int", "ADOLC_ext_fct_hov_reverse *|int (*)(int,int,double **,int,int,double ***,short **)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_int_p_p_double_int_p_p_double_p_double_p_double__int = {"_p_f_int_int_p_p_double_int_p_p_double_p_double_p_double__int", "int (*)(int,int,double **,int,double **,double *,double *)|ADOLC_ext_fct_fov_reverse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_adouble__int = {"_p_f_int_p_adouble__int", "ADOLC_TimeStepFuncion|int (*)(int,adouble *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_double__int = {"_p_f_int_p_double__int", "ADOLC_TimeStepFuncion_double|int (*)(int,double *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_double_int_int_p_p_double__int = {"_p_f_int_p_double_int_int_p_p_double__int", "ADOLC_ext_fct_hos_reverse *|int (*)(int,double *,int,int,double **)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_double_int_int_p_p_p_double_int_p_double_p_p_p_double__int = {"_p_f_int_p_double_int_int_p_p_p_double_int_p_double_p_p_p_double__int", "ADOLC_ext_fct_hov_forward *|int (*)(int,double *,int,int,double ***,int,double *,double ***)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_double_int_p_double__int = {"_p_f_int_p_double_int_p_double__int", "int (*)(int,double *,int,double *)|ADOLC_ext_fct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_double_int_p_double_p_double_p_double__int = {"_p_f_int_p_double_int_p_double_p_double_p_double__int", "ADOLC_ext_fct_fos_reverse *|int (*)(int,double *,int,double *,double *,double *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_double_int_p_p_double_int_p_double_p_p_double__int = {"_p_f_int_p_double_int_p_p_double_int_p_double_p_p_double__int", "ADOLC_ext_fct_fov_forward *|ADOLC_ext_fct_hos_forward *|int (*)(int,double *,int,double **,int,double *,double **)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_double_p_double_int_p_double_p_double__int = {"_p_f_int_p_double_p_double_int_p_double_p_double__int", "ADOLC_ext_fct_fos_forward *|int (*)(int,double *,double *,int,double *,double *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_int_int_int_p_int_int_p_p_p_double_p_int_p_p_p_double_p_p_double_p_p_double_p_void__int = {"_p_f_int_p_int_int_int_p_int_int_p_p_p_double_p_int_p_p_p_double_p_p_double_p_p_double_p_void__int", "ADOLC_ext_fct_v2_fov_reverse *|int (*)(int,int *,int,int,int *,int,double ***,int *,double ***,double **,double **,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_int_int_int_p_int_p_p_double_int_int_p_p_p_p_double_p_int_p_p_double_p_p_p_p_double_p_void__int = {"_p_f_int_p_int_int_int_p_int_p_p_double_int_int_p_p_p_p_double_p_int_p_p_double_p_p_p_p_double_p_void__int", "int (*)(int,int *,int,int,int *,double **,int,int,double ****,int *,double **,double ****,void *)|ADOLC_ext_fct_v2_hov_forward *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_int_int_int_p_int_p_p_double_int_p_p_p_double_p_int_p_p_double_p_p_p_double_p_void__int = {"_p_f_int_p_int_int_int_p_int_p_p_double_int_p_p_p_double_p_int_p_p_double_p_p_p_double_p_void__int", "ADOLC_ext_fct_v2_fov_forward *|ADOLC_ext_fct_v2_hos_forward *|int (*)(int,int *,int,int,int *,double **,int,double ***,int *,double **,double ***,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_int_int_int_p_int_p_p_double_p_int_p_p_double_p_p_double_p_p_double_p_void__int = {"_p_f_int_p_int_int_int_p_int_p_p_double_p_int_p_p_double_p_p_double_p_p_double_p_void__int", "ADOLC_ext_fct_v2_fos_reverse *|int (*)(int,int *,int,int,int *,double **,int *,double **,double **,double **,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_int_int_int_p_int_p_p_double_p_int_p_p_double_p_void__int = {"_p_f_int_p_int_int_int_p_int_p_p_double_p_int_p_p_double_p_void__int", "ADOLC_ext_fct_v2 *|int (*)(int,int *,int,int,int *,double **,int *,double **,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_int_int_int_p_int_p_p_double_p_p_double_p_int_p_p_double_p_p_double_p_void__int = {"_p_f_int_p_int_int_int_p_int_p_p_double_p_p_double_p_int_p_p_double_p_p_double_p_void__int", "ADOLC_ext_fct_v2_fos_forward *|int (*)(int,int *,int,int,int *,double **,double **,int *,double **,double **,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_int_int_int_p_p_double_int_int_p_p_p_double_p_p_short__int = {"_p_f_int_p_int_int_int_p_p_double_int_int_p_p_p_double_p_p_short__int", "ADOLC_ext_fct_iArr_hov_reverse *|int (*)(int,int *,int,int,double **,int,int,double ***,short **)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_int_int_int_p_p_double_int_p_p_double_p_double_p_double__int = {"_p_f_int_p_int_int_int_p_p_double_int_p_p_double_p_double_p_double__int", "int (*)(int,int *,int,int,double **,int,double **,double *,double *)|ADOLC_ext_fct_iArr_fov_reverse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_int_int_p_double_int_int_p_p_double__int = {"_p_f_int_p_int_int_p_double_int_int_p_p_double__int", "ADOLC_ext_fct_iArr_hos_reverse *|int (*)(int,int *,int,double *,int,int,double **)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_int_int_p_double_int_int_p_p_p_double_int_p_double_p_p_p_double__int = {"_p_f_int_p_int_int_p_double_int_int_p_p_p_double_int_p_double_p_p_p_double__int", "int (*)(int,int *,int,double *,int,int,double ***,int,double *,double ***)|ADOLC_ext_fct_iArr_hov_forward *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_int_int_p_double_int_p_double__int = {"_p_f_int_p_int_int_p_double_int_p_double__int", "int (*)(int,int *,int,double *,int,double *)|ADOLC_ext_fct_iArr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_int_int_p_double_int_p_double_p_double_p_double__int = {"_p_f_int_p_int_int_p_double_int_p_double_p_double_p_double__int", "ADOLC_ext_fct_iArr_fos_reverse *|int (*)(int,int *,int,double *,int,double *,double *,double *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_int_int_p_double_int_p_p_double_int_p_double_p_p_double__int = {"_p_f_int_p_int_int_p_double_int_p_p_double_int_p_double_p_p_double__int", "ADOLC_ext_fct_iArr_fov_forward *|ADOLC_ext_fct_iArr_hos_forward *|int (*)(int,int *,int,double *,int,double **,int,double *,double **)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_int_int_p_double_p_double_int_p_double_p_double__int = {"_p_f_int_p_int_int_p_double_p_double_int_p_double_p_double__int", "ADOLC_ext_fct_iArr_fos_forward *|int (*)(int,int *,int,double *,double *,int,double *,double *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_adouble_p_adouble_p_adouble_int_int__int = {"_p_f_p_adouble_p_adouble_p_adouble_int_int__int", "int (*)(adouble *,adouble *,adouble *,int,int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_double_int__double = {"_p_f_p_double_int__double", "double (*)(double *,int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_double_p_double_p_double_int_int__int = {"_p_f_p_double_p_double_p_double_int_int__int", "int (*)(double *,double *,double *,int,int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__void = {"_p_f_p_void__void", "ADOLC_restoreFct|void (*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_adouble = {"_p_p_adouble", "adouble **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "double **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_p_double = {"_p_p_p_double", "double ***", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_p_p_double = {"_p_p_p_p_double", "double ****", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_p_unsigned_int = {"_p_p_p_unsigned_int", "unsigned int ***", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_short = {"_p_p_short", "short **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_unsigned_int = {"_p_p_unsigned_int", "unsigned int **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_unsigned_long = {"_p_p_unsigned_long", "unsigned long **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pdouble = {"_p_pdouble", "pdouble *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_adouble_t = {"_p_std__vectorT_adouble_t", "std::vector< adouble > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_short_t = {"_p_std__vectorT_short_t", "std::vector< short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32_t = {"_p_uint32_t", "locint *|uint32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|uint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CP_Context,
  &_swigt__p_CpInfos,
  &_swigt__p_EDFobject,
  &_swigt__p_EDFobject_iArr,
  &_swigt__p_EDFobject_v2,
  &_swigt__p_FILE,
  &_swigt__p_adouble,
  &_swigt__p_adub,
  &_swigt__p_adubref,
  &_swigt__p_advector,
  &_swigt__p_badouble,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_ext_diff_fct,
  &_swigt__p_ext_diff_fct_v2,
  &_swigt__p_f___p_void,
  &_swigt__p_f_int_int_p_p_double_int_int_p_p_p_double_p_p_short__int,
  &_swigt__p_f_int_int_p_p_double_int_p_p_double_p_double_p_double__int,
  &_swigt__p_f_int_p_adouble__int,
  &_swigt__p_f_int_p_double__int,
  &_swigt__p_f_int_p_double_int_int_p_p_double__int,
  &_swigt__p_f_int_p_double_int_int_p_p_p_double_int_p_double_p_p_p_double__int,
  &_swigt__p_f_int_p_double_int_p_double__int,
  &_swigt__p_f_int_p_double_int_p_double_p_double_p_double__int,
  &_swigt__p_f_int_p_double_int_p_p_double_int_p_double_p_p_double__int,
  &_swigt__p_f_int_p_double_p_double_int_p_double_p_double__int,
  &_swigt__p_f_int_p_int_int_int_p_int_int_p_p_p_double_p_int_p_p_p_double_p_p_double_p_p_double_p_void__int,
  &_swigt__p_f_int_p_int_int_int_p_int_p_p_double_int_int_p_p_p_p_double_p_int_p_p_double_p_p_p_p_double_p_void__int,
  &_swigt__p_f_int_p_int_int_int_p_int_p_p_double_int_p_p_p_double_p_int_p_p_double_p_p_p_double_p_void__int,
  &_swigt__p_f_int_p_int_int_int_p_int_p_p_double_p_int_p_p_double_p_p_double_p_p_double_p_void__int,
  &_swigt__p_f_int_p_int_int_int_p_int_p_p_double_p_int_p_p_double_p_void__int,
  &_swigt__p_f_int_p_int_int_int_p_int_p_p_double_p_p_double_p_int_p_p_double_p_p_double_p_void__int,
  &_swigt__p_f_int_p_int_int_int_p_p_double_int_int_p_p_p_double_p_p_short__int,
  &_swigt__p_f_int_p_int_int_int_p_p_double_int_p_p_double_p_double_p_double__int,
  &_swigt__p_f_int_p_int_int_p_double_int_int_p_p_double__int,
  &_swigt__p_f_int_p_int_int_p_double_int_int_p_p_p_double_int_p_double_p_p_p_double__int,
  &_swigt__p_f_int_p_int_int_p_double_int_p_double__int,
  &_swigt__p_f_int_p_int_int_p_double_int_p_double_p_double_p_double__int,
  &_swigt__p_f_int_p_int_int_p_double_int_p_p_double_int_p_double_p_p_double__int,
  &_swigt__p_f_int_p_int_int_p_double_p_double_int_p_double_p_double__int,
  &_swigt__p_f_p_adouble_p_adouble_p_adouble_int_int__int,
  &_swigt__p_f_p_double_int__double,
  &_swigt__p_f_p_double_p_double_p_double_int_int__int,
  &_swigt__p_f_p_void__void,
  &_swigt__p_p_adouble,
  &_swigt__p_p_double,
  &_swigt__p_p_p_double,
  &_swigt__p_p_p_p_double,
  &_swigt__p_p_p_unsigned_int,
  &_swigt__p_p_short,
  &_swigt__p_p_unsigned_int,
  &_swigt__p_p_unsigned_long,
  &_swigt__p_p_void,
  &_swigt__p_pdouble,
  &_swigt__p_std__vectorT_adouble_t,
  &_swigt__p_std__vectorT_short_t,
  &_swigt__p_uint32_t,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_CP_Context[] = {  {&_swigt__p_CP_Context, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CpInfos[] = {  {&_swigt__p_CpInfos, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EDFobject[] = {  {&_swigt__p_EDFobject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EDFobject_iArr[] = {  {&_swigt__p_EDFobject_iArr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EDFobject_v2[] = {  {&_swigt__p_EDFobject_v2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adouble[] = {  {&_swigt__p_adouble, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adub[] = {  {&_swigt__p_adub, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_adubref[] = {  {&_swigt__p_adubref, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_advector[] = {  {&_swigt__p_advector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_badouble[] = {  {&_swigt__p_adub, _p_adubTo_p_badouble, 0, 0},  {&_swigt__p_badouble, 0, 0, 0},  {&_swigt__p_adouble, _p_adoubleTo_p_badouble, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ext_diff_fct[] = {  {&_swigt__p_ext_diff_fct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ext_diff_fct_v2[] = {  {&_swigt__p_ext_diff_fct_v2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f___p_void[] = {  {&_swigt__p_f___p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_int_p_p_double_int_int_p_p_p_double_p_p_short__int[] = {  {&_swigt__p_f_int_int_p_p_double_int_int_p_p_p_double_p_p_short__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_int_p_p_double_int_p_p_double_p_double_p_double__int[] = {  {&_swigt__p_f_int_int_p_p_double_int_p_p_double_p_double_p_double__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_adouble__int[] = {  {&_swigt__p_f_int_p_adouble__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_double__int[] = {  {&_swigt__p_f_int_p_double__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_double_int_int_p_p_double__int[] = {  {&_swigt__p_f_int_p_double_int_int_p_p_double__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_double_int_int_p_p_p_double_int_p_double_p_p_p_double__int[] = {  {&_swigt__p_f_int_p_double_int_int_p_p_p_double_int_p_double_p_p_p_double__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_double_int_p_double__int[] = {  {&_swigt__p_f_int_p_double_int_p_double__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_double_int_p_double_p_double_p_double__int[] = {  {&_swigt__p_f_int_p_double_int_p_double_p_double_p_double__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_double_int_p_p_double_int_p_double_p_p_double__int[] = {  {&_swigt__p_f_int_p_double_int_p_p_double_int_p_double_p_p_double__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_double_p_double_int_p_double_p_double__int[] = {  {&_swigt__p_f_int_p_double_p_double_int_p_double_p_double__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_int_int_int_p_int_int_p_p_p_double_p_int_p_p_p_double_p_p_double_p_p_double_p_void__int[] = {  {&_swigt__p_f_int_p_int_int_int_p_int_int_p_p_p_double_p_int_p_p_p_double_p_p_double_p_p_double_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_int_int_int_p_int_p_p_double_int_int_p_p_p_p_double_p_int_p_p_double_p_p_p_p_double_p_void__int[] = {  {&_swigt__p_f_int_p_int_int_int_p_int_p_p_double_int_int_p_p_p_p_double_p_int_p_p_double_p_p_p_p_double_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_int_int_int_p_int_p_p_double_int_p_p_p_double_p_int_p_p_double_p_p_p_double_p_void__int[] = {  {&_swigt__p_f_int_p_int_int_int_p_int_p_p_double_int_p_p_p_double_p_int_p_p_double_p_p_p_double_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_int_int_int_p_int_p_p_double_p_int_p_p_double_p_p_double_p_p_double_p_void__int[] = {  {&_swigt__p_f_int_p_int_int_int_p_int_p_p_double_p_int_p_p_double_p_p_double_p_p_double_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_int_int_int_p_int_p_p_double_p_int_p_p_double_p_void__int[] = {  {&_swigt__p_f_int_p_int_int_int_p_int_p_p_double_p_int_p_p_double_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_int_int_int_p_int_p_p_double_p_p_double_p_int_p_p_double_p_p_double_p_void__int[] = {  {&_swigt__p_f_int_p_int_int_int_p_int_p_p_double_p_p_double_p_int_p_p_double_p_p_double_p_void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_int_int_int_p_p_double_int_int_p_p_p_double_p_p_short__int[] = {  {&_swigt__p_f_int_p_int_int_int_p_p_double_int_int_p_p_p_double_p_p_short__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_int_int_int_p_p_double_int_p_p_double_p_double_p_double__int[] = {  {&_swigt__p_f_int_p_int_int_int_p_p_double_int_p_p_double_p_double_p_double__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_int_int_p_double_int_int_p_p_double__int[] = {  {&_swigt__p_f_int_p_int_int_p_double_int_int_p_p_double__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_int_int_p_double_int_int_p_p_p_double_int_p_double_p_p_p_double__int[] = {  {&_swigt__p_f_int_p_int_int_p_double_int_int_p_p_p_double_int_p_double_p_p_p_double__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_int_int_p_double_int_p_double__int[] = {  {&_swigt__p_f_int_p_int_int_p_double_int_p_double__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_int_int_p_double_int_p_double_p_double_p_double__int[] = {  {&_swigt__p_f_int_p_int_int_p_double_int_p_double_p_double_p_double__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_int_int_p_double_int_p_p_double_int_p_double_p_p_double__int[] = {  {&_swigt__p_f_int_p_int_int_p_double_int_p_p_double_int_p_double_p_p_double__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_int_int_p_double_p_double_int_p_double_p_double__int[] = {  {&_swigt__p_f_int_p_int_int_p_double_p_double_int_p_double_p_double__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_adouble_p_adouble_p_adouble_int_int__int[] = {  {&_swigt__p_f_p_adouble_p_adouble_p_adouble_int_int__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_double_int__double[] = {  {&_swigt__p_f_p_double_int__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_double_p_double_p_double_int_int__int[] = {  {&_swigt__p_f_p_double_p_double_p_double_int_int__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__void[] = {  {&_swigt__p_f_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_adouble[] = {  {&_swigt__p_p_adouble, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_p_double[] = {  {&_swigt__p_p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_p_p_double[] = {  {&_swigt__p_p_p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_p_unsigned_int[] = {  {&_swigt__p_p_p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_short[] = {  {&_swigt__p_p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_unsigned_int[] = {  {&_swigt__p_p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_unsigned_long[] = {  {&_swigt__p_p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pdouble[] = {  {&_swigt__p_pdouble, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_adouble_t[] = {  {&_swigt__p_std__vectorT_adouble_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_short_t[] = {  {&_swigt__p_std__vectorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32_t[] = {  {&_swigt__p_uint32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CP_Context,
  _swigc__p_CpInfos,
  _swigc__p_EDFobject,
  _swigc__p_EDFobject_iArr,
  _swigc__p_EDFobject_v2,
  _swigc__p_FILE,
  _swigc__p_adouble,
  _swigc__p_adub,
  _swigc__p_adubref,
  _swigc__p_advector,
  _swigc__p_badouble,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_ext_diff_fct,
  _swigc__p_ext_diff_fct_v2,
  _swigc__p_f___p_void,
  _swigc__p_f_int_int_p_p_double_int_int_p_p_p_double_p_p_short__int,
  _swigc__p_f_int_int_p_p_double_int_p_p_double_p_double_p_double__int,
  _swigc__p_f_int_p_adouble__int,
  _swigc__p_f_int_p_double__int,
  _swigc__p_f_int_p_double_int_int_p_p_double__int,
  _swigc__p_f_int_p_double_int_int_p_p_p_double_int_p_double_p_p_p_double__int,
  _swigc__p_f_int_p_double_int_p_double__int,
  _swigc__p_f_int_p_double_int_p_double_p_double_p_double__int,
  _swigc__p_f_int_p_double_int_p_p_double_int_p_double_p_p_double__int,
  _swigc__p_f_int_p_double_p_double_int_p_double_p_double__int,
  _swigc__p_f_int_p_int_int_int_p_int_int_p_p_p_double_p_int_p_p_p_double_p_p_double_p_p_double_p_void__int,
  _swigc__p_f_int_p_int_int_int_p_int_p_p_double_int_int_p_p_p_p_double_p_int_p_p_double_p_p_p_p_double_p_void__int,
  _swigc__p_f_int_p_int_int_int_p_int_p_p_double_int_p_p_p_double_p_int_p_p_double_p_p_p_double_p_void__int,
  _swigc__p_f_int_p_int_int_int_p_int_p_p_double_p_int_p_p_double_p_p_double_p_p_double_p_void__int,
  _swigc__p_f_int_p_int_int_int_p_int_p_p_double_p_int_p_p_double_p_void__int,
  _swigc__p_f_int_p_int_int_int_p_int_p_p_double_p_p_double_p_int_p_p_double_p_p_double_p_void__int,
  _swigc__p_f_int_p_int_int_int_p_p_double_int_int_p_p_p_double_p_p_short__int,
  _swigc__p_f_int_p_int_int_int_p_p_double_int_p_p_double_p_double_p_double__int,
  _swigc__p_f_int_p_int_int_p_double_int_int_p_p_double__int,
  _swigc__p_f_int_p_int_int_p_double_int_int_p_p_p_double_int_p_double_p_p_p_double__int,
  _swigc__p_f_int_p_int_int_p_double_int_p_double__int,
  _swigc__p_f_int_p_int_int_p_double_int_p_double_p_double_p_double__int,
  _swigc__p_f_int_p_int_int_p_double_int_p_p_double_int_p_double_p_p_double__int,
  _swigc__p_f_int_p_int_int_p_double_p_double_int_p_double_p_double__int,
  _swigc__p_f_p_adouble_p_adouble_p_adouble_int_int__int,
  _swigc__p_f_p_double_int__double,
  _swigc__p_f_p_double_p_double_p_double_int_int__int,
  _swigc__p_f_p_void__void,
  _swigc__p_p_adouble,
  _swigc__p_p_double,
  _swigc__p_p_p_double,
  _swigc__p_p_p_p_double,
  _swigc__p_p_p_unsigned_int,
  _swigc__p_p_short,
  _swigc__p_p_unsigned_int,
  _swigc__p_p_unsigned_long,
  _swigc__p_p_void,
  _swigc__p_pdouble,
  _swigc__p_std__vectorT_adouble_t,
  _swigc__p_std__vectorT_short_t,
  _swigc__p_uint32_t,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


SWIGEXPORT void SWIG_init(void) {

}
#ifdef __cplusplus
extern "C" {
#endif

#include <R_ext/Rdynload.h>

#ifdef __cplusplus
}
#endif

SWIGINTERN R_CallMethodDef CallEntries[] = {
   {"R_swig_delete_CP_Context", (DL_FUNC) &R_swig_delete_CP_Context, 1},
   {"R_swig_new_CP_Context", (DL_FUNC) &R_swig_new_CP_Context, 1},
   {"R_swig_edf_set_opaque_context", (DL_FUNC) &R_swig_edf_set_opaque_context, 2},
   {"R_swig_delete_adub", (DL_FUNC) &R_swig_delete_adub, 1},
   {"R_swig_hess_pat", (DL_FUNC) &R_swig_hess_pat, 6},
   {"R_swig_generate_seed_hess", (DL_FUNC) &R_swig_generate_seed_hess, 5},
   {"R_swig_delete_EDFobject_v2", (DL_FUNC) &R_swig_delete_EDFobject_v2, 1},
   {"R_swig_delete_EDFobject_iArr", (DL_FUNC) &R_swig_delete_EDFobject_iArr, 1},
   {"R_swig_CP_Context_setOutput", (DL_FUNC) &R_swig_CP_Context_setOutput, 2},
   {"R_swig_cachedTraceTags", (DL_FUNC) &R_swig_cachedTraceTags, 1},
   {"R_swig_disableMinMaxUsingAbs", (DL_FUNC) &R_swig_disableMinMaxUsingAbs, 0},
   {"R_swig_enableMinMaxUsingAbs", (DL_FUNC) &R_swig_enableMinMaxUsingAbs, 0},
   {"R_swig_badouble_value", (DL_FUNC) &R_swig_badouble_value, 2},
   {"R_swig_ext_firstsign2", (DL_FUNC) &R_swig_ext_firstsign2, 5},
   {"R_swig_adolc_vec_dot", (DL_FUNC) &R_swig_adolc_vec_dot, 3},
   {"R_swig_tensor_value", (DL_FUNC) &R_swig_tensor_value, 5},
   {"R_swig_removeTape", (DL_FUNC) &R_swig_removeTape, 3},
   {"R_swig_jac_vec", (DL_FUNC) &R_swig_jac_vec, 7},
   {"R_swig_generate_seed_jac", (DL_FUNC) &R_swig_generate_seed_jac, 6},
   {"R_swig_delete_EDFobject", (DL_FUNC) &R_swig_delete_EDFobject, 1},
   {"R_swig_CP_Context_setAlwaysRetaping", (DL_FUNC) &R_swig_CP_Context_setAlwaysRetaping, 2},
   {"R_swig_isTaping", (DL_FUNC) &R_swig_isTaping, 1},
   {"R_swig_set_param_vec", (DL_FUNC) &R_swig_set_param_vec, 3},
   {"R_swig_set_HP", (DL_FUNC) &R_swig_set_HP, 3},
   {"R_swig_hov_forward_partx", (DL_FUNC) &R_swig_hov_forward_partx, 11},
   {"R_swig_fov_forward_partx", (DL_FUNC) &R_swig_fov_forward_partx, 10},
   {"R_swig_hos_forward_partx", (DL_FUNC) &R_swig_hos_forward_partx, 8},
   {"R_swig_fos_forward_partx", (DL_FUNC) &R_swig_fos_forward_partx, 7},
   {"R_swig_zos_forward_partx", (DL_FUNC) &R_swig_zos_forward_partx, 7},
   {"R_swig_mkparam", (DL_FUNC) &R_swig_mkparam, 1},
   {"R_swig_atan2", (DL_FUNC) &R_swig_atan2, 3},
   {"R_swig_large_jacobian", (DL_FUNC) &R_swig_large_jacobian, 8},
   {"R_swig_jacobian", (DL_FUNC) &R_swig_jacobian, 6},
   {"R_swig_accodec", (DL_FUNC) &R_swig_accodec, 6},
   {"R_swig_populate_dppp_nodata", (DL_FUNC) &R_swig_populate_dppp_nodata, 4},
   {"R_swig_int_reverse_safe", (DL_FUNC) &R_swig_int_reverse_safe, 7},
   {"R_swig_badouble_getValue", (DL_FUNC) &R_swig_badouble_getValue, 2},
   {"R_swig_badouble_setValue", (DL_FUNC) &R_swig_badouble_setValue, 2},
   {"R_swig_myalloc1", (DL_FUNC) &R_swig_myalloc1, 1},
   {"R_swig_myalloc2", (DL_FUNC) &R_swig_myalloc2, 2},
   {"R_swig_recipr", (DL_FUNC) &R_swig_recipr, 1},
   {"R_swig_myalloc3", (DL_FUNC) &R_swig_myalloc3, 3},
   {"R_swig_absnormal_jac_pat", (DL_FUNC) &R_swig_absnormal_jac_pat, 7},
   {"R_swig_jac_pat", (DL_FUNC) &R_swig_jac_pat, 7},
   {"R_swig_eval_func", (DL_FUNC) &R_swig_eval_func, 6},
   {"R_swig_EDFobject_v2_eval_func", (DL_FUNC) &R_swig_EDFobject_v2_eval_func, 11},
   {"R_swig_EDFobject_eval_func", (DL_FUNC) &R_swig_EDFobject_eval_func, 6},
   {"R_swig_EDFobject_iArr_eval_func", (DL_FUNC) &R_swig_EDFobject_iArr_eval_func, 8},
   {"R_swig_vec_jac", (DL_FUNC) &R_swig_vec_jac, 8},
   {"R_swig_CP_Context_setNumberOfCheckpoints", (DL_FUNC) &R_swig_CP_Context_setNumberOfCheckpoints, 2},
   {"R_swig_get_HP", (DL_FUNC) &R_swig_get_HP, 3},
   {"R_swig_CP_Context_setTapeNumber", (DL_FUNC) &R_swig_CP_Context_setTapeNumber, 2},
   {"R_swig_setStoreManagerControl", (DL_FUNC) &R_swig_setStoreManagerControl, 2},
   {"R_swig_nonl_ind_old_forward_safe", (DL_FUNC) &R_swig_nonl_ind_old_forward_safe, 6},
   {"R_swig_nonl_ind_forward_safe", (DL_FUNC) &R_swig_nonl_ind_forward_safe, 6},
   {"R_swig_indopro_forward_safe", (DL_FUNC) &R_swig_indopro_forward_safe, 6},
   {"R_swig_int_forward_safe", (DL_FUNC) &R_swig_int_forward_safe, 7},
   {"R_swig_get_num_param", (DL_FUNC) &R_swig_get_num_param, 2},
   {"R_swig_reverse__SWIG_10", (DL_FUNC) &R_swig_reverse__SWIG_10, 8},
   {"R_swig_reverse__SWIG_11", (DL_FUNC) &R_swig_reverse__SWIG_11, 7},
   {"R_swig_reverse__SWIG_12", (DL_FUNC) &R_swig_reverse__SWIG_12, 6},
   {"R_swig_directional_active_gradient", (DL_FUNC) &R_swig_directional_active_gradient, 7},
   {"R_swig_gradient", (DL_FUNC) &R_swig_gradient, 5},
   {"R_swig_jac_solv", (DL_FUNC) &R_swig_jac_solv, 6},
   {"R_swig_myquad", (DL_FUNC) &R_swig_myquad, 2},
   {"R_swig_getparam", (DL_FUNC) &R_swig_getparam, 1},
   {"R_swig_tensorsetup", (DL_FUNC) &R_swig_tensorsetup, 4},
   {"R_swig_set_nested_ctx", (DL_FUNC) &R_swig_set_nested_ctx, 2},
   {"R_swig_delete_badouble", (DL_FUNC) &R_swig_delete_badouble, 1},
   {"R_swig_delete_adouble", (DL_FUNC) &R_swig_delete_adouble, 1},
   {"R_swig_delete_pdouble", (DL_FUNC) &R_swig_delete_pdouble, 1},
   {"R_swig_fp_iteration", (DL_FUNC) &R_swig_fp_iteration, 15},
   {"R_swig_get_num_switches", (DL_FUNC) &R_swig_get_num_switches, 2},
   {"R_swig_currently_nested", (DL_FUNC) &R_swig_currently_nested, 2},
   {"R_swig_advector_lookupindex", (DL_FUNC) &R_swig_advector_lookupindex, 4},
   {"R_swig_bit_vector_propagation", (DL_FUNC) &R_swig_bit_vector_propagation, 7},
   {"R_swig_abs_normal", (DL_FUNC) &R_swig_abs_normal, 14},
   {"R_swig_indopro_forward_absnormal", (DL_FUNC) &R_swig_indopro_forward_absnormal, 7},
   {"R_swig_inverse_Taylor_prop", (DL_FUNC) &R_swig_inverse_Taylor_prop, 6},
   {"R_swig_tensor_address", (DL_FUNC) &R_swig_tensor_address, 3},
   {"R_swig_CP_Context_setDoubleFct", (DL_FUNC) &R_swig_CP_Context_setDoubleFct, 2},
   {"R_swig_trace_off__SWIG_0", (DL_FUNC) &R_swig_trace_off__SWIG_0, 1},
   {"R_swig_trace_on__SWIG_0", (DL_FUNC) &R_swig_trace_on__SWIG_0, 3},
   {"R_swig_accode__SWIG_0", (DL_FUNC) &R_swig_accode__SWIG_0, 6},
   {"R_swig_forode__SWIG_0", (DL_FUNC) &R_swig_forode__SWIG_0, 7},
   {"R_swig_reverse__SWIG_0", (DL_FUNC) &R_swig_reverse__SWIG_0, 7},
   {"R_swig_forward__SWIG_0", (DL_FUNC) &R_swig_forward__SWIG_0, 8},
   {"R_swig_EDFobject_iArr_call__SWIG_0", (DL_FUNC) &R_swig_EDFobject_iArr_call__SWIG_0, 8},
   {"R_swig_new_adouble__SWIG_0", (DL_FUNC) &R_swig_new_adouble__SWIG_0, 1},
   {"R_swig_pow__SWIG_0", (DL_FUNC) &R_swig_pow__SWIG_0, 3},
   {"R_swig_LessThan__SWIG_0", (DL_FUNC) &R_swig_LessThan__SWIG_0, 3},
   {"R_swig_GreaterThan__SWIG_0", (DL_FUNC) &R_swig_GreaterThan__SWIG_0, 3},
   {"R_swig_GreaterThanEqual__SWIG_0", (DL_FUNC) &R_swig_GreaterThanEqual__SWIG_0, 3},
   {"R_swig_badouble___seteq____SWIG_0", (DL_FUNC) &R_swig_badouble___seteq____SWIG_0, 3},
   {"R_swig_badouble_declareIndependent__SWIG_0", (DL_FUNC) &R_swig_badouble_declareIndependent__SWIG_0, 3},
   {"R_swig_badouble_declareDependent__SWIG_0", (DL_FUNC) &R_swig_badouble_declareDependent__SWIG_0, 3},
   {"R_swig_condeqassign__SWIG_0", (DL_FUNC) &R_swig_condeqassign__SWIG_0, 4},
   {"R_swig_condassign__SWIG_0", (DL_FUNC) &R_swig_condassign__SWIG_0, 4},
   {"R_swig_badouble_PlusEqual__SWIG_0", (DL_FUNC) &R_swig_badouble_PlusEqual__SWIG_0, 3},
   {"R_swig_badouble_MinusEqual__SWIG_0", (DL_FUNC) &R_swig_badouble_MinusEqual__SWIG_0, 3},
   {"R_swig_badouble_MultiplyEqual__SWIG_0", (DL_FUNC) &R_swig_badouble_MultiplyEqual__SWIG_0, 3},
   {"R_swig_badouble_DivideEqual__SWIG_0", (DL_FUNC) &R_swig_badouble_DivideEqual__SWIG_0, 3},
   {"R_swig_NotEqual__SWIG_0", (DL_FUNC) &R_swig_NotEqual__SWIG_0, 3},
   {"R_swig_EqualEqual__SWIG_0", (DL_FUNC) &R_swig_EqualEqual__SWIG_0, 3},
   {"R_swig_LessThanEqual__SWIG_0", (DL_FUNC) &R_swig_LessThanEqual__SWIG_0, 3},
   {"R_swig_adouble___plusplus____SWIG_0", (DL_FUNC) &R_swig_adouble___plusplus____SWIG_0, 2},
   {"R_swig_adouble___minusminus____SWIG_0", (DL_FUNC) &R_swig_adouble___minusminus____SWIG_0, 2},
   {"R_swig_adouble___seteq____SWIG_0", (DL_FUNC) &R_swig_adouble___seteq____SWIG_0, 3},
   {"R_swig_adubref___plusplus____SWIG_0", (DL_FUNC) &R_swig_adubref___plusplus____SWIG_0, 2},
   {"R_swig_adubref___minusminus____SWIG_0", (DL_FUNC) &R_swig_adubref___minusminus____SWIG_0, 2},
   {"R_swig_adubref___seteq____SWIG_0", (DL_FUNC) &R_swig_adubref___seteq____SWIG_0, 3},
   {"R_swig_adubref_PlusEqual__SWIG_0", (DL_FUNC) &R_swig_adubref_PlusEqual__SWIG_0, 3},
   {"R_swig_adubref_MinusEqual__SWIG_0", (DL_FUNC) &R_swig_adubref_MinusEqual__SWIG_0, 3},
   {"R_swig_adubref_MultiplyEqual__SWIG_0", (DL_FUNC) &R_swig_adubref_MultiplyEqual__SWIG_0, 3},
   {"R_swig_adubref_DivideEqual__SWIG_0", (DL_FUNC) &R_swig_adubref_DivideEqual__SWIG_0, 3},
   {"R_swig_adubref_declareIndependent__SWIG_0", (DL_FUNC) &R_swig_adubref_declareIndependent__SWIG_0, 3},
   {"R_swig_adubref_declareDependent__SWIG_0", (DL_FUNC) &R_swig_adubref_declareDependent__SWIG_0, 3},
   {"R_swig_new_advector__SWIG_0", (DL_FUNC) &R_swig_new_advector__SWIG_0, 0},
   {"R_swig_advector___index____SWIG_0", (DL_FUNC) &R_swig_advector___index____SWIG_0, 2},
   {"R_swig_reg_ext_fct__SWIG_0", (DL_FUNC) &R_swig_reg_ext_fct__SWIG_0, 1},
   {"R_swig_call_ext_fct__SWIG_0", (DL_FUNC) &R_swig_call_ext_fct__SWIG_0, 10},
   {"R_swig_edf_zero__SWIG_0", (DL_FUNC) &R_swig_edf_zero__SWIG_0, 1},
   {"R_swig_EDFobject_call__SWIG_0", (DL_FUNC) &R_swig_EDFobject_call__SWIG_0, 6},
   {"R_swig_myalloc__SWIG_0", (DL_FUNC) &R_swig_myalloc__SWIG_0, 1},
   {"R_swig_myfree__SWIG_0", (DL_FUNC) &R_swig_myfree__SWIG_0, 1},
   {"R_swig_Plus__SWIG_0", (DL_FUNC) &R_swig_Plus__SWIG_0, 1},
   {"R_swig_Minus__SWIG_0", (DL_FUNC) &R_swig_Minus__SWIG_0, 1},
   {"R_swig_Multiply__SWIG_0", (DL_FUNC) &R_swig_Multiply__SWIG_0, 2},
   {"R_swig_Divide__SWIG_0", (DL_FUNC) &R_swig_Divide__SWIG_0, 2},
   {"R_swig_exp__SWIG_0", (DL_FUNC) &R_swig_exp__SWIG_0, 1},
   {"R_swig_log__SWIG_0", (DL_FUNC) &R_swig_log__SWIG_0, 1},
   {"R_swig_sqrt__SWIG_0", (DL_FUNC) &R_swig_sqrt__SWIG_0, 1},
   {"R_swig_sin__SWIG_0", (DL_FUNC) &R_swig_sin__SWIG_0, 1},
   {"R_swig_cos__SWIG_0", (DL_FUNC) &R_swig_cos__SWIG_0, 1},
   {"R_swig_tan__SWIG_0", (DL_FUNC) &R_swig_tan__SWIG_0, 1},
   {"R_swig_asin__SWIG_0", (DL_FUNC) &R_swig_asin__SWIG_0, 1},
   {"R_swig_acos__SWIG_0", (DL_FUNC) &R_swig_acos__SWIG_0, 1},
   {"R_swig_atan__SWIG_0", (DL_FUNC) &R_swig_atan__SWIG_0, 1},
   {"R_swig_log10__SWIG_0", (DL_FUNC) &R_swig_log10__SWIG_0, 1},
   {"R_swig_sinh__SWIG_0", (DL_FUNC) &R_swig_sinh__SWIG_0, 1},
   {"R_swig_cosh__SWIG_0", (DL_FUNC) &R_swig_cosh__SWIG_0, 1},
   {"R_swig_tanh__SWIG_0", (DL_FUNC) &R_swig_tanh__SWIG_0, 1},
   {"R_swig_fabs__SWIG_0", (DL_FUNC) &R_swig_fabs__SWIG_0, 1},
   {"R_swig_ceil__SWIG_0", (DL_FUNC) &R_swig_ceil__SWIG_0, 1},
   {"R_swig_floor__SWIG_0", (DL_FUNC) &R_swig_floor__SWIG_0, 1},
   {"R_swig_fmax__SWIG_0", (DL_FUNC) &R_swig_fmax__SWIG_0, 2},
   {"R_swig_fmin__SWIG_0", (DL_FUNC) &R_swig_fmin__SWIG_0, 2},
   {"R_swig_ldexp__SWIG_0", (DL_FUNC) &R_swig_ldexp__SWIG_0, 2},
   {"R_swig_trace_off__SWIG_1", (DL_FUNC) &R_swig_trace_off__SWIG_1, 0},
   {"R_swig_trace_on__SWIG_1", (DL_FUNC) &R_swig_trace_on__SWIG_1, 2},
   {"R_swig_accode__SWIG_1", (DL_FUNC) &R_swig_accode__SWIG_1, 5},
   {"R_swig_forode__SWIG_1", (DL_FUNC) &R_swig_forode__SWIG_1, 6},
   {"R_swig_reverse__SWIG_1", (DL_FUNC) &R_swig_reverse__SWIG_1, 7},
   {"R_swig_forward__SWIG_1", (DL_FUNC) &R_swig_forward__SWIG_1, 8},
   {"R_swig_EDFobject_iArr_call__SWIG_1", (DL_FUNC) &R_swig_EDFobject_iArr_call__SWIG_1, 8},
   {"R_swig_pow__SWIG_1", (DL_FUNC) &R_swig_pow__SWIG_1, 3},
   {"R_swig_LessThan__SWIG_1", (DL_FUNC) &R_swig_LessThan__SWIG_1, 3},
   {"R_swig_GreaterThan__SWIG_1", (DL_FUNC) &R_swig_GreaterThan__SWIG_1, 3},
   {"R_swig_GreaterThanEqual__SWIG_1", (DL_FUNC) &R_swig_GreaterThanEqual__SWIG_1, 3},
   {"R_swig_LessThanEqual__SWIG_1", (DL_FUNC) &R_swig_LessThanEqual__SWIG_1, 3},
   {"R_swig_EqualEqual__SWIG_1", (DL_FUNC) &R_swig_EqualEqual__SWIG_1, 3},
   {"R_swig_NotEqual__SWIG_1", (DL_FUNC) &R_swig_NotEqual__SWIG_1, 3},
   {"R_swig_badouble___seteq____SWIG_1", (DL_FUNC) &R_swig_badouble___seteq____SWIG_1, 3},
   {"R_swig_badouble_declareDependent__SWIG_1", (DL_FUNC) &R_swig_badouble_declareDependent__SWIG_1, 1},
   {"R_swig_badouble_declareIndependent__SWIG_1", (DL_FUNC) &R_swig_badouble_declareIndependent__SWIG_1, 1},
   {"R_swig_condeqassign__SWIG_1", (DL_FUNC) &R_swig_condeqassign__SWIG_1, 3},
   {"R_swig_condassign__SWIG_1", (DL_FUNC) &R_swig_condassign__SWIG_1, 3},
   {"R_swig_badouble_PlusEqual__SWIG_1", (DL_FUNC) &R_swig_badouble_PlusEqual__SWIG_1, 3},
   {"R_swig_badouble_MinusEqual__SWIG_1", (DL_FUNC) &R_swig_badouble_MinusEqual__SWIG_1, 3},
   {"R_swig_badouble_MultiplyEqual__SWIG_1", (DL_FUNC) &R_swig_badouble_MultiplyEqual__SWIG_1, 3},
   {"R_swig_badouble_DivideEqual__SWIG_1", (DL_FUNC) &R_swig_badouble_DivideEqual__SWIG_1, 3},
   {"R_swig_new_adouble__SWIG_1", (DL_FUNC) &R_swig_new_adouble__SWIG_1, 1},
   {"R_swig_adouble___plusplus____SWIG_1", (DL_FUNC) &R_swig_adouble___plusplus____SWIG_1, 2},
   {"R_swig_adouble___minusminus____SWIG_1", (DL_FUNC) &R_swig_adouble___minusminus____SWIG_1, 2},
   {"R_swig_adouble___seteq____SWIG_1", (DL_FUNC) &R_swig_adouble___seteq____SWIG_1, 3},
   {"R_swig_adubref___plusplus____SWIG_1", (DL_FUNC) &R_swig_adubref___plusplus____SWIG_1, 2},
   {"R_swig_adubref___minusminus____SWIG_1", (DL_FUNC) &R_swig_adubref___minusminus____SWIG_1, 2},
   {"R_swig_adubref___seteq____SWIG_1", (DL_FUNC) &R_swig_adubref___seteq____SWIG_1, 3},
   {"R_swig_adubref_PlusEqual__SWIG_1", (DL_FUNC) &R_swig_adubref_PlusEqual__SWIG_1, 3},
   {"R_swig_adubref_MinusEqual__SWIG_1", (DL_FUNC) &R_swig_adubref_MinusEqual__SWIG_1, 3},
   {"R_swig_adubref_MultiplyEqual__SWIG_1", (DL_FUNC) &R_swig_adubref_MultiplyEqual__SWIG_1, 3},
   {"R_swig_adubref_DivideEqual__SWIG_1", (DL_FUNC) &R_swig_adubref_DivideEqual__SWIG_1, 3},
   {"R_swig_adubref_declareIndependent__SWIG_1", (DL_FUNC) &R_swig_adubref_declareIndependent__SWIG_1, 1},
   {"R_swig_adubref_declareDependent__SWIG_1", (DL_FUNC) &R_swig_adubref_declareDependent__SWIG_1, 1},
   {"R_swig_new_advector__SWIG_1", (DL_FUNC) &R_swig_new_advector__SWIG_1, 1},
   {"R_swig_advector___index____SWIG_1", (DL_FUNC) &R_swig_advector___index____SWIG_1, 2},
   {"R_swig_reg_ext_fct__SWIG_1", (DL_FUNC) &R_swig_reg_ext_fct__SWIG_1, 1},
   {"R_swig_call_ext_fct__SWIG_1", (DL_FUNC) &R_swig_call_ext_fct__SWIG_1, 6},
   {"R_swig_edf_zero__SWIG_1", (DL_FUNC) &R_swig_edf_zero__SWIG_1, 1},
   {"R_swig_EDFobject_call__SWIG_1", (DL_FUNC) &R_swig_EDFobject_call__SWIG_1, 6},
   {"R_swig_myalloc__SWIG_1", (DL_FUNC) &R_swig_myalloc__SWIG_1, 2},
   {"R_swig_myfree__SWIG_1", (DL_FUNC) &R_swig_myfree__SWIG_1, 1},
   {"R_swig_Minus__SWIG_1", (DL_FUNC) &R_swig_Minus__SWIG_1, 1},
   {"R_swig_Plus__SWIG_1", (DL_FUNC) &R_swig_Plus__SWIG_1, 2},
   {"R_swig_Multiply__SWIG_1", (DL_FUNC) &R_swig_Multiply__SWIG_1, 2},
   {"R_swig_Divide__SWIG_1", (DL_FUNC) &R_swig_Divide__SWIG_1, 2},
   {"R_swig_fmax__SWIG_1", (DL_FUNC) &R_swig_fmax__SWIG_1, 2},
   {"R_swig_fmin__SWIG_1", (DL_FUNC) &R_swig_fmin__SWIG_1, 2},
   {"R_swig_exp__SWIG_1", (DL_FUNC) &R_swig_exp__SWIG_1, 1},
   {"R_swig_log__SWIG_1", (DL_FUNC) &R_swig_log__SWIG_1, 1},
   {"R_swig_sqrt__SWIG_1", (DL_FUNC) &R_swig_sqrt__SWIG_1, 1},
   {"R_swig_sin__SWIG_1", (DL_FUNC) &R_swig_sin__SWIG_1, 1},
   {"R_swig_cos__SWIG_1", (DL_FUNC) &R_swig_cos__SWIG_1, 1},
   {"R_swig_tan__SWIG_1", (DL_FUNC) &R_swig_tan__SWIG_1, 1},
   {"R_swig_asin__SWIG_1", (DL_FUNC) &R_swig_asin__SWIG_1, 1},
   {"R_swig_acos__SWIG_1", (DL_FUNC) &R_swig_acos__SWIG_1, 1},
   {"R_swig_atan__SWIG_1", (DL_FUNC) &R_swig_atan__SWIG_1, 1},
   {"R_swig_log10__SWIG_1", (DL_FUNC) &R_swig_log10__SWIG_1, 1},
   {"R_swig_sinh__SWIG_1", (DL_FUNC) &R_swig_sinh__SWIG_1, 1},
   {"R_swig_cosh__SWIG_1", (DL_FUNC) &R_swig_cosh__SWIG_1, 1},
   {"R_swig_tanh__SWIG_1", (DL_FUNC) &R_swig_tanh__SWIG_1, 1},
   {"R_swig_fabs__SWIG_1", (DL_FUNC) &R_swig_fabs__SWIG_1, 1},
   {"R_swig_ceil__SWIG_1", (DL_FUNC) &R_swig_ceil__SWIG_1, 1},
   {"R_swig_floor__SWIG_1", (DL_FUNC) &R_swig_floor__SWIG_1, 1},
   {"R_swig_ldexp__SWIG_1", (DL_FUNC) &R_swig_ldexp__SWIG_1, 2},
   {"R_swig_trace_on__SWIG_2", (DL_FUNC) &R_swig_trace_on__SWIG_2, 8},
   {"R_swig_accode__SWIG_2", (DL_FUNC) &R_swig_accode__SWIG_2, 5},
   {"R_swig_forode__SWIG_2", (DL_FUNC) &R_swig_forode__SWIG_2, 6},
   {"R_swig_reverse__SWIG_2", (DL_FUNC) &R_swig_reverse__SWIG_2, 7},
   {"R_swig_forward__SWIG_2", (DL_FUNC) &R_swig_forward__SWIG_2, 8},
   {"R_swig_pow__SWIG_2", (DL_FUNC) &R_swig_pow__SWIG_2, 3},
   {"R_swig_condeqassign__SWIG_2", (DL_FUNC) &R_swig_condeqassign__SWIG_2, 4},
   {"R_swig_condassign__SWIG_2", (DL_FUNC) &R_swig_condassign__SWIG_2, 4},
   {"R_swig_LessThan__SWIG_2", (DL_FUNC) &R_swig_LessThan__SWIG_2, 3},
   {"R_swig_GreaterThan__SWIG_2", (DL_FUNC) &R_swig_GreaterThan__SWIG_2, 3},
   {"R_swig_GreaterThanEqual__SWIG_2", (DL_FUNC) &R_swig_GreaterThanEqual__SWIG_2, 3},
   {"R_swig_LessThanEqual__SWIG_2", (DL_FUNC) &R_swig_LessThanEqual__SWIG_2, 3},
   {"R_swig_EqualEqual__SWIG_2", (DL_FUNC) &R_swig_EqualEqual__SWIG_2, 3},
   {"R_swig_NotEqual__SWIG_2", (DL_FUNC) &R_swig_NotEqual__SWIG_2, 3},
   {"R_swig_badouble___seteq____SWIG_2", (DL_FUNC) &R_swig_badouble___seteq____SWIG_2, 3},
   {"R_swig_badouble_PlusEqual__SWIG_2", (DL_FUNC) &R_swig_badouble_PlusEqual__SWIG_2, 3},
   {"R_swig_badouble_MinusEqual__SWIG_2", (DL_FUNC) &R_swig_badouble_MinusEqual__SWIG_2, 3},
   {"R_swig_badouble_MultiplyEqual__SWIG_2", (DL_FUNC) &R_swig_badouble_MultiplyEqual__SWIG_2, 3},
   {"R_swig_badouble_DivideEqual__SWIG_2", (DL_FUNC) &R_swig_badouble_DivideEqual__SWIG_2, 3},
   {"R_swig_new_adouble__SWIG_2", (DL_FUNC) &R_swig_new_adouble__SWIG_2, 0},
   {"R_swig_adouble___seteq____SWIG_2", (DL_FUNC) &R_swig_adouble___seteq____SWIG_2, 3},
   {"R_swig_adubref___seteq____SWIG_2", (DL_FUNC) &R_swig_adubref___seteq____SWIG_2, 3},
   {"R_swig_adubref_PlusEqual__SWIG_2", (DL_FUNC) &R_swig_adubref_PlusEqual__SWIG_2, 3},
   {"R_swig_adubref_MinusEqual__SWIG_2", (DL_FUNC) &R_swig_adubref_MinusEqual__SWIG_2, 3},
   {"R_swig_adubref_MultiplyEqual__SWIG_2", (DL_FUNC) &R_swig_adubref_MultiplyEqual__SWIG_2, 3},
   {"R_swig_adubref_DivideEqual__SWIG_2", (DL_FUNC) &R_swig_adubref_DivideEqual__SWIG_2, 3},
   {"R_swig_new_advector__SWIG_2", (DL_FUNC) &R_swig_new_advector__SWIG_2, 1},
   {"R_swig_advector___index____SWIG_2", (DL_FUNC) &R_swig_advector___index____SWIG_2, 3},
   {"R_swig_reg_ext_fct__SWIG_2", (DL_FUNC) &R_swig_reg_ext_fct__SWIG_2, 1},
   {"R_swig_call_ext_fct__SWIG_2", (DL_FUNC) &R_swig_call_ext_fct__SWIG_2, 8},
   {"R_swig_myalloc__SWIG_2", (DL_FUNC) &R_swig_myalloc__SWIG_2, 3},
   {"R_swig_myfree__SWIG_2", (DL_FUNC) &R_swig_myfree__SWIG_2, 1},
   {"R_swig_Plus__SWIG_2", (DL_FUNC) &R_swig_Plus__SWIG_2, 2},
   {"R_swig_Minus__SWIG_2", (DL_FUNC) &R_swig_Minus__SWIG_2, 2},
   {"R_swig_Multiply__SWIG_2", (DL_FUNC) &R_swig_Multiply__SWIG_2, 2},
   {"R_swig_Divide__SWIG_2", (DL_FUNC) &R_swig_Divide__SWIG_2, 2},
   {"R_swig_fmax__SWIG_2", (DL_FUNC) &R_swig_fmax__SWIG_2, 2},
   {"R_swig_fmin__SWIG_2", (DL_FUNC) &R_swig_fmin__SWIG_2, 2},
   {"R_swig_myallocI2", (DL_FUNC) &R_swig_myallocI2, 1},
   {"R_swig_inverse_tensor_eval", (DL_FUNC) &R_swig_inverse_tensor_eval, 8},
   {"R_swig_tensor_eval", (DL_FUNC) &R_swig_tensor_eval, 9},
   {"R_swig_binomi", (DL_FUNC) &R_swig_binomi, 3},
   {"R_swig_trace_on__SWIG_3", (DL_FUNC) &R_swig_trace_on__SWIG_3, 7},
   {"R_swig_accode__SWIG_3", (DL_FUNC) &R_swig_accode__SWIG_3, 4},
   {"R_swig_forode__SWIG_3", (DL_FUNC) &R_swig_forode__SWIG_3, 5},
   {"R_swig_reverse__SWIG_3", (DL_FUNC) &R_swig_reverse__SWIG_3, 7},
   {"R_swig_forward__SWIG_3", (DL_FUNC) &R_swig_forward__SWIG_3, 7},
   {"R_swig_LessThan__SWIG_3", (DL_FUNC) &R_swig_LessThan__SWIG_3, 3},
   {"R_swig_GreaterThan__SWIG_3", (DL_FUNC) &R_swig_GreaterThan__SWIG_3, 3},
   {"R_swig_GreaterThanEqual__SWIG_3", (DL_FUNC) &R_swig_GreaterThanEqual__SWIG_3, 3},
   {"R_swig_LessThanEqual__SWIG_3", (DL_FUNC) &R_swig_LessThanEqual__SWIG_3, 3},
   {"R_swig_EqualEqual__SWIG_3", (DL_FUNC) &R_swig_EqualEqual__SWIG_3, 3},
   {"R_swig_NotEqual__SWIG_3", (DL_FUNC) &R_swig_NotEqual__SWIG_3, 3},
   {"R_swig_condeqassign__SWIG_3", (DL_FUNC) &R_swig_condeqassign__SWIG_3, 3},
   {"R_swig_condassign__SWIG_3", (DL_FUNC) &R_swig_condassign__SWIG_3, 3},
   {"R_swig_badouble___seteq____SWIG_3", (DL_FUNC) &R_swig_badouble___seteq____SWIG_3, 3},
   {"R_swig_badouble_PlusEqual__SWIG_3", (DL_FUNC) &R_swig_badouble_PlusEqual__SWIG_3, 3},
   {"R_swig_badouble_MinusEqual__SWIG_3", (DL_FUNC) &R_swig_badouble_MinusEqual__SWIG_3, 3},
   {"R_swig_new_adouble__SWIG_3", (DL_FUNC) &R_swig_new_adouble__SWIG_3, 1},
   {"R_swig_adouble___seteq____SWIG_3", (DL_FUNC) &R_swig_adouble___seteq____SWIG_3, 3},
   {"R_swig_adubref___seteq____SWIG_3", (DL_FUNC) &R_swig_adubref___seteq____SWIG_3, 3},
   {"R_swig_new_advector__SWIG_3", (DL_FUNC) &R_swig_new_advector__SWIG_3, 1},
   {"R_swig_advector___index____SWIG_3", (DL_FUNC) &R_swig_advector___index____SWIG_3, 3},
   {"R_swig_Plus__SWIG_3", (DL_FUNC) &R_swig_Plus__SWIG_3, 2},
   {"R_swig_Minus__SWIG_3", (DL_FUNC) &R_swig_Minus__SWIG_3, 2},
   {"R_swig_Multiply__SWIG_3", (DL_FUNC) &R_swig_Multiply__SWIG_3, 2},
   {"R_swig_Divide__SWIG_3", (DL_FUNC) &R_swig_Divide__SWIG_3, 2},
   {"R_swig_pow__SWIG_3", (DL_FUNC) &R_swig_pow__SWIG_3, 2},
   {"R_swig_fmax__SWIG_3", (DL_FUNC) &R_swig_fmax__SWIG_3, 2},
   {"R_swig_fmin__SWIG_3", (DL_FUNC) &R_swig_fmin__SWIG_3, 2},
   {"R_swig_reverse__SWIG_4", (DL_FUNC) &R_swig_reverse__SWIG_4, 9},
   {"R_swig_forward__SWIG_4", (DL_FUNC) &R_swig_forward__SWIG_4, 10},
   {"R_swig_LessThan__SWIG_4", (DL_FUNC) &R_swig_LessThan__SWIG_4, 3},
   {"R_swig_GreaterThan__SWIG_4", (DL_FUNC) &R_swig_GreaterThan__SWIG_4, 3},
   {"R_swig_GreaterThanEqual__SWIG_4", (DL_FUNC) &R_swig_GreaterThanEqual__SWIG_4, 3},
   {"R_swig_LessThanEqual__SWIG_4", (DL_FUNC) &R_swig_LessThanEqual__SWIG_4, 3},
   {"R_swig_EqualEqual__SWIG_4", (DL_FUNC) &R_swig_EqualEqual__SWIG_4, 3},
   {"R_swig_NotEqual__SWIG_4", (DL_FUNC) &R_swig_NotEqual__SWIG_4, 3},
   {"R_swig_adouble___seteq____SWIG_4", (DL_FUNC) &R_swig_adouble___seteq____SWIG_4, 3},
   {"R_swig_condassign__SWIG_4", (DL_FUNC) &R_swig_condassign__SWIG_4, 4},
   {"R_swig_condeqassign__SWIG_4", (DL_FUNC) &R_swig_condeqassign__SWIG_4, 4},
   {"R_swig_Minus__SWIG_4", (DL_FUNC) &R_swig_Minus__SWIG_4, 2},
   {"R_swig_Plus__SWIG_4", (DL_FUNC) &R_swig_Plus__SWIG_4, 2},
   {"R_swig_Multiply__SWIG_4", (DL_FUNC) &R_swig_Multiply__SWIG_4, 2},
   {"R_swig_Divide__SWIG_4", (DL_FUNC) &R_swig_Divide__SWIG_4, 2},
   {"R_swig_pow__SWIG_4", (DL_FUNC) &R_swig_pow__SWIG_4, 2},
   {"R_swig_fmax__SWIG_4", (DL_FUNC) &R_swig_fmax__SWIG_4, 2},
   {"R_swig_fmin__SWIG_4", (DL_FUNC) &R_swig_fmin__SWIG_4, 2},
   {"R_swig_initADOLC", (DL_FUNC) &R_swig_initADOLC, 0},
   {"R_swig_reverse__SWIG_5", (DL_FUNC) &R_swig_reverse__SWIG_5, 8},
   {"R_swig_forward__SWIG_5", (DL_FUNC) &R_swig_forward__SWIG_5, 9},
   {"R_swig_condassign__SWIG_5", (DL_FUNC) &R_swig_condassign__SWIG_5, 3},
   {"R_swig_condeqassign__SWIG_5", (DL_FUNC) &R_swig_condeqassign__SWIG_5, 3},
   {"R_swig_Plus__SWIG_5", (DL_FUNC) &R_swig_Plus__SWIG_5, 2},
   {"R_swig_Minus__SWIG_5", (DL_FUNC) &R_swig_Minus__SWIG_5, 2},
   {"R_swig_Multiply__SWIG_5", (DL_FUNC) &R_swig_Multiply__SWIG_5, 2},
   {"R_swig_Divide__SWIG_5", (DL_FUNC) &R_swig_Divide__SWIG_5, 2},
   {"R_swig_pow__SWIG_5", (DL_FUNC) &R_swig_pow__SWIG_5, 2},
   {"R_swig_fmax__SWIG_5", (DL_FUNC) &R_swig_fmax__SWIG_5, 2},
   {"R_swig_fmin__SWIG_5", (DL_FUNC) &R_swig_fmin__SWIG_5, 2},
   {"R_swig_reverse__SWIG_6", (DL_FUNC) &R_swig_reverse__SWIG_6, 9},
   {"R_swig_Plus__SWIG_6", (DL_FUNC) &R_swig_Plus__SWIG_6, 2},
   {"R_swig_Minus__SWIG_6", (DL_FUNC) &R_swig_Minus__SWIG_6, 2},
   {"R_swig_Multiply__SWIG_6", (DL_FUNC) &R_swig_Multiply__SWIG_6, 2},
   {"R_swig_Divide__SWIG_6", (DL_FUNC) &R_swig_Divide__SWIG_6, 2},
   {"R_swig_fmax__SWIG_6", (DL_FUNC) &R_swig_fmax__SWIG_6, 2},
   {"R_swig_fmin__SWIG_6", (DL_FUNC) &R_swig_fmin__SWIG_6, 2},
   {"R_swig_reverse__SWIG_7", (DL_FUNC) &R_swig_reverse__SWIG_7, 8},
   {"R_swig_Plus__SWIG_7", (DL_FUNC) &R_swig_Plus__SWIG_7, 2},
   {"R_swig_Minus__SWIG_7", (DL_FUNC) &R_swig_Minus__SWIG_7, 2},
   {"R_swig_fmax__SWIG_7", (DL_FUNC) &R_swig_fmax__SWIG_7, 2},
   {"R_swig_fmin__SWIG_7", (DL_FUNC) &R_swig_fmin__SWIG_7, 2},
   {"R_swig_reverse__SWIG_8", (DL_FUNC) &R_swig_reverse__SWIG_8, 8},
   {"R_swig_Minus__SWIG_8", (DL_FUNC) &R_swig_Minus__SWIG_8, 2},
   {"R_swig_reverse__SWIG_9", (DL_FUNC) &R_swig_reverse__SWIG_9, 7},
   {"R_swig_populate_dpp", (DL_FUNC) &R_swig_populate_dpp, 4},
   {"R_swig_hessian", (DL_FUNC) &R_swig_hessian, 5},
   {"R_swig_int_reverse_tight", (DL_FUNC) &R_swig_int_reverse_tight, 7},
   {"R_swig_nonl_ind_old_forward_tight", (DL_FUNC) &R_swig_nonl_ind_old_forward_tight, 6},
   {"R_swig_nonl_ind_forward_tight", (DL_FUNC) &R_swig_nonl_ind_forward_tight, 6},
   {"R_swig_indopro_forward_tight", (DL_FUNC) &R_swig_indopro_forward_tight, 6},
   {"R_swig_int_forward_tight", (DL_FUNC) &R_swig_int_forward_tight, 9},
   {"R_swig_fov_pl_sig_forward", (DL_FUNC) &R_swig_fov_pl_sig_forward, 15},
   {"R_swig_fos_pl_sig_forward", (DL_FUNC) &R_swig_fos_pl_sig_forward, 14},
   {"R_swig_fov_pl_forward", (DL_FUNC) &R_swig_fov_pl_forward, 12},
   {"R_swig_fos_pl_forward", (DL_FUNC) &R_swig_fos_pl_forward, 10},
   {"R_swig_zos_pl_forward", (DL_FUNC) &R_swig_zos_pl_forward, 8},
   {"R_swig_hov_wk_forward", (DL_FUNC) &R_swig_hov_wk_forward, 11},
   {"R_swig_hov_forward", (DL_FUNC) &R_swig_hov_forward, 10},
   {"R_swig_fov_offset_forward", (DL_FUNC) &R_swig_fov_offset_forward, 10},
   {"R_swig_fov_forward", (DL_FUNC) &R_swig_fov_forward, 9},
   {"R_swig_hos_forward", (DL_FUNC) &R_swig_hos_forward, 10},
   {"R_swig_fos_forward", (DL_FUNC) &R_swig_fos_forward, 9},
   {"R_swig_zos_forward", (DL_FUNC) &R_swig_zos_forward, 7},
   {"R_swig_EDFobject_v2_fov_forward", (DL_FUNC) &R_swig_EDFobject_v2_fov_forward, 14},
   {"R_swig_EDFobject_v2_fos_forward", (DL_FUNC) &R_swig_EDFobject_v2_fos_forward, 13},
   {"R_swig_EDFobject_v2_zos_forward", (DL_FUNC) &R_swig_EDFobject_v2_zos_forward, 11},
   {"R_swig_EDFobject_zos_forward", (DL_FUNC) &R_swig_EDFobject_zos_forward, 6},
   {"R_swig_EDFobject_fos_forward", (DL_FUNC) &R_swig_EDFobject_fos_forward, 8},
   {"R_swig_EDFobject_fov_forward", (DL_FUNC) &R_swig_EDFobject_fov_forward, 9},
   {"R_swig_EDFobject_iArr_zos_forward", (DL_FUNC) &R_swig_EDFobject_iArr_zos_forward, 8},
   {"R_swig_EDFobject_iArr_fos_forward", (DL_FUNC) &R_swig_EDFobject_iArr_fos_forward, 10},
   {"R_swig_EDFobject_iArr_fov_forward", (DL_FUNC) &R_swig_EDFobject_iArr_fov_forward, 11},
   {"R_swig_hessian2", (DL_FUNC) &R_swig_hessian2, 5},
   {"R_swig_forodec", (DL_FUNC) &R_swig_forodec, 7},
   {"R_swig_CP_Context_setSaveFct", (DL_FUNC) &R_swig_CP_Context_setSaveFct, 2},
   {"R_swig_adolc_vec_axpy", (DL_FUNC) &R_swig_adolc_vec_axpy, 5},
   {"R_swig_cleanUp", (DL_FUNC) &R_swig_cleanUp, 0},
   {"R_swig_EDFobject_v2_call", (DL_FUNC) &R_swig_EDFobject_v2_call, 10},
   {"R_swig_myfree1_uint", (DL_FUNC) &R_swig_myfree1_uint, 1},
   {"R_swig_myalloc1_uint", (DL_FUNC) &R_swig_myalloc1_uint, 1},
   {"R_swig_CP_Context_setNumberOfSteps", (DL_FUNC) &R_swig_CP_Context_setNumberOfSteps, 2},
   {"R_swig_populate_dppp", (DL_FUNC) &R_swig_populate_dppp, 5},
   {"R_swig_tapestats", (DL_FUNC) &R_swig_tapestats, 2},
   {"R_swig_advector_size", (DL_FUNC) &R_swig_advector_size, 2},
   {"R_swig_CP_Context_setRestoreFct", (DL_FUNC) &R_swig_CP_Context_setRestoreFct, 2},
   {"R_swig_hess_mat", (DL_FUNC) &R_swig_hess_mat, 7},
   {"R_swig_ensureContiguousLocations", (DL_FUNC) &R_swig_ensureContiguousLocations, 1},
   {"R_swig_delete_adubref", (DL_FUNC) &R_swig_delete_adubref, 1},
   {"R_swig_skip_tracefile_cleanup", (DL_FUNC) &R_swig_skip_tracefile_cleanup, 1},
   {"R_swig_sparse_jac", (DL_FUNC) &R_swig_sparse_jac, 11},
   {"R_swig_myfreeI2", (DL_FUNC) &R_swig_myfreeI2, 2},
   {"R_swig_ext_firstsign", (DL_FUNC) &R_swig_ext_firstsign, 6},
   {"R_swig_firstsign", (DL_FUNC) &R_swig_firstsign, 4},
   {"R_swig_myfree1_ulong", (DL_FUNC) &R_swig_myfree1_ulong, 1},
   {"R_swig_myalloc1_ulong", (DL_FUNC) &R_swig_myalloc1_ulong, 1},
   {"R_swig_myfree2_ulong", (DL_FUNC) &R_swig_myfree2_ulong, 1},
   {"R_swig_myalloc2_ulong", (DL_FUNC) &R_swig_myalloc2_ulong, 2},
   {"R_swig_printTapeStats", (DL_FUNC) &R_swig_printTapeStats, 2},
   {"R_swig_CP_Context_setDimensionXY", (DL_FUNC) &R_swig_CP_Context_setDimensionXY, 2},
   {"R_swig_delete_advector", (DL_FUNC) &R_swig_delete_advector, 1},
   {"R_swig_adolc_vec_copy", (DL_FUNC) &R_swig_adolc_vec_copy, 3},
   {"R_swig_myfree1", (DL_FUNC) &R_swig_myfree1, 1},
   {"R_swig_myfree2", (DL_FUNC) &R_swig_myfree2, 1},
   {"R_swig_myfree3", (DL_FUNC) &R_swig_myfree3, 1},
   {"R_swig_tape_doc", (DL_FUNC) &R_swig_tape_doc, 5},
   {"R_swig_freetensor", (DL_FUNC) &R_swig_freetensor, 4},
   {"R_swig_CP_Context_setInput", (DL_FUNC) &R_swig_CP_Context_setInput, 2},
   {"R_swig_reg_timestep_fct", (DL_FUNC) &R_swig_reg_timestep_fct, 1},
   {"R_swig_fos_pl_sig_reverse", (DL_FUNC) &R_swig_fos_pl_sig_reverse, 8},
   {"R_swig_fos_pl_reverse", (DL_FUNC) &R_swig_fos_pl_reverse, 7},
   {"R_swig_hov_ti_reverse", (DL_FUNC) &R_swig_hov_ti_reverse, 9},
   {"R_swig_hov_reverse", (DL_FUNC) &R_swig_hov_reverse, 9},
   {"R_swig_fov_reverse", (DL_FUNC) &R_swig_fov_reverse, 7},
   {"R_swig_hos_ov_reverse", (DL_FUNC) &R_swig_hos_ov_reverse, 8},
   {"R_swig_hos_ti_reverse", (DL_FUNC) &R_swig_hos_ti_reverse, 7},
   {"R_swig_hos_reverse", (DL_FUNC) &R_swig_hos_reverse, 7},
   {"R_swig_fos_reverse", (DL_FUNC) &R_swig_fos_reverse, 6},
   {"R_swig_EDFobject_v2_fov_reverse", (DL_FUNC) &R_swig_EDFobject_v2_fov_reverse, 14},
   {"R_swig_EDFobject_v2_fos_reverse", (DL_FUNC) &R_swig_EDFobject_v2_fos_reverse, 13},
   {"R_swig_EDFobject_iArr_fov_reverse", (DL_FUNC) &R_swig_EDFobject_iArr_fov_reverse, 11},
   {"R_swig_EDFobject_fos_reverse", (DL_FUNC) &R_swig_EDFobject_fos_reverse, 8},
   {"R_swig_EDFobject_fov_reverse", (DL_FUNC) &R_swig_EDFobject_fov_reverse, 9},
   {"R_swig_EDFobject_iArr_fos_reverse", (DL_FUNC) &R_swig_EDFobject_iArr_fos_reverse, 10},
   {"R_swig_lagra_hess_vec", (DL_FUNC) &R_swig_lagra_hess_vec, 8},
   {"R_swig_hess_vec", (DL_FUNC) &R_swig_hess_vec, 6},
   {"R_swig_mkparam_idx", (DL_FUNC) &R_swig_mkparam_idx, 2},
   {"R_swig_CP_Context_checkpointing", (DL_FUNC) &R_swig_CP_Context_checkpointing, 2},
   {"R_swig_reinit_checkpointing", (DL_FUNC) &R_swig_reinit_checkpointing, 0},
   {"R_swig_checkpointing", (DL_FUNC) &R_swig_checkpointing, 2},
   {"R_swig_sparse_hess", (DL_FUNC) &R_swig_sparse_hess, 10},
   {"R_swig_disableBranchSwitchWarnings", (DL_FUNC) &R_swig_disableBranchSwitchWarnings, 0},
   {"R_swig_enableBranchSwitchWarnings", (DL_FUNC) &R_swig_enableBranchSwitchWarnings, 0},
   {"R_swig_badouble_loc", (DL_FUNC) &R_swig_badouble_loc, 2},
   {"R_swig_adouble_loc", (DL_FUNC) &R_swig_adouble_loc, 2},
   {NULL, NULL, 0}
};

extern "C" SWIGEXPORT void R_init_adolc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);


SWIG_init();
SWIG_InitializeModule(0);


}

